# this file can be processed by running something like: 
# oc process -f openshift/container-gateway.yml --param-file=openshift/container-gateway.env | oc create -f -

apiVersion: v1
kind: Template
metadata:
  name: container-signvalidation
  labels:
    name: signvalidation
  annotations:
    description: Template for the Sign and Validation
objects:
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: signvalidation
    spec:
      replicas: 1
      selector:
        deploymentconfig: signvalidation 
      strategy:
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 100%
          maxUnavailable: 0%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            deploymentconfig: signvalidation
            application: signvalidation
        spec:
          containers:
          - image: registry-fsf.services.belgium.be:5000/eidas/sign-validation:latest
            imagePullPolicy: Always
            name: signvalidation # The name your container will have within the pod (mostly relevant if you have multiple containers in a pod)
            env: []
            port: []
            resources: # Specify the resources needed
              requests: # Minimal resources needed for your application to run at an acceptable level (ideally you figure these out through stress-testing)
                cpu: 50m
                memory: 64Mi
              limits: # Maximum resources you want your container to use (to limit costs)
                cpu: 1000m
                memory: 1024Mi
  - apiVersion: v1
    kind: Service
    metadata:
      name: signvalidation-svc # You will use this name to link the route
      annotations:
        description: "The Container Sign and Validatione"
    spec:
      selector:
        deploymentconfig: signvalidation
      ports:
        - name: signvalidation-web
          port: 80
          protocol: TCP
          targetPort: 8080
        - name: signvalidation-web-ssl
          port: 443
          protocol: TCP
          targetPort: 8080

  - apiVersion: v1
    kind: Route
    metadata:
      name: signvalidation-validate # Needs to be unique compared to other routes
      annotations:
        description: "The route to expose the Validation port"
    spec:
      host: validate.ta.fts.bosa.belgium.be # The part of your url before the slash. You cannot have routes using the same host in multiple projects unless this feature is activated for your cluster (security choice based on your governance).
      to:
        kind: Service
        name: signvalidation-svc
      port:
        targetPort: signvalidation-web-ssl