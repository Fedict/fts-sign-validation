6c6
<             <ns4:ValidationDate>2024-08-26T09:30:50Z</ns4:ValidationDate>
---
>             <ns4:ValidationDate>2024-08-26T09:30:52Z</ns4:ValidationDate>
1699a1700
>                     <ns4:Revocations/>
2584c2585
<                     <ns4:Origin>EXTERNAL</ns4:Origin>
---
>                     <ns4:Origin>CACHED</ns4:Origin>
2586d2586
<                     <ns4:SourceAddress>http://crl.eid.belgium.be/belgium3.crl</ns4:SourceAddress>
2647c2647
<                     <ns4:Origin>EXTERNAL</ns4:Origin>
---
>                     <ns4:Origin>CACHED</ns4:Origin>
2685c2685
<                     <ns4:Origin>EXTERNAL</ns4:Origin>
---
>                     <ns4:Origin>CACHED</ns4:Origin>
3203c3203
<         <ns2:SimpleReport ValidationTime="2024-08-26T09:30:50Z">
---
>         <ns2:SimpleReport ValidationTime="2024-08-26T09:30:52Z">
3212c3212
<             <ns2:ValidSignaturesCount>2</ns2:ValidSignaturesCount>
---
>             <ns2:ValidSignaturesCount>1</ns2:ValidSignaturesCount>
3373c3373
<             <ns2:Signature SignatureFormat="PAdES-BASELINE-LTA" ExtensionPeriodMax="2028-12-09T10:56:35Z" Id="S-484F543E355A6ABB75D636043738B56E8AFAD5B1460E40FA919467A18DA287C0">
---
>             <ns2:Signature SignatureFormat="PAdES-BASELINE-LTA" Id="S-484F543E355A6ABB75D636043738B56E8AFAD5B1460E40FA919467A18DA287C0">
3393c3393,3399
<                 <ns2:Indication>TOTAL_PASSED</ns2:Indication>
---
>                 <ns2:Indication>INDETERMINATE</ns2:Indication>
>                 <ns2:SubIndication>CRYPTO_CONSTRAINTS_FAILURE_NO_POE</ns2:SubIndication>
>                 <ns2:AdESValidationDetails>
>                     <ns2:Error Key="BBB_XCV_SUB_ANS">The certificate validation is not conclusive!</ns2:Error>
>                     <ns2:Error Key="ASCCM_AR_ANS_ANR">The algorithm SHA1 is no longer considered reliable for signature's certificate chain!</ns2:Error>
>                     <ns2:Error Key="PSV_IPSVC_ANS">The past signature validation is not conclusive!</ns2:Error>
>                 </ns2:AdESValidationDetails>
3394a3401
>                     <ns2:Warning Key="QUAL_IS_ADES_IND">The signature/seal is an INDETERMINATE AdES digital signature!</ns2:Warning>
3400c3407
<                 <ns2:SignatureLevel description="Qualified Electronic Signature">QESig</ns2:SignatureLevel>
---
>                 <ns2:SignatureLevel description="Indeterminate Qualified Electronic Signature">Indeterminate QESig</ns2:SignatureLevel>
3473c3480
<         <ns3:DetailedReport ValidationTime="2024-08-26T09:30:50Z">
---
>         <ns3:DetailedReport ValidationTime="2024-08-26T09:30:52Z">
3490,3498d3496
<                         <ns3:Status>WARNING</ns3:Status>
<                         <ns3:Warning Key="BSV_IXCVRC_ANS">The result of the 'X.509 Certificate Validation' building block is not conclusive!</ns3:Warning>
<                     </ns3:Constraint>
<                     <ns3:Constraint Id="S-21296427544E99B00370C305EF94F992A0B72BB29A375C525DE98566DF7F1F04-XCV">
<                         <ns3:Name Key="BSV_ISCRAVTC">Is the signing certificate not revoked at validation time?</ns3:Name>
<                         <ns3:Status>OK</ns3:Status>
<                     </ns3:Constraint>
<                     <ns3:Constraint Id="S-21296427544E99B00370C305EF94F992A0B72BB29A375C525DE98566DF7F1F04-XCV">
<                         <ns3:Name Key="BSV_IVTAVRSC">Is the validation time in the validity range of the signing certificate?</ns3:Name>
3505,3509c3503,3505
<                     <ns3:Constraint Id="S-21296427544E99B00370C305EF94F992A0B72BB29A375C525DE98566DF7F1F04">
<                         <ns3:Name Key="ADEST_ROBVPIIC">Is the result of the Basic Validation Process conclusive?</ns3:Name>
<                         <ns3:Status>NOT OK</ns3:Status>
<                         <ns3:Error Key="ADEST_ROBVPIIC_ANS">The result of the Basic validation process is not conclusive!</ns3:Error>
<                         <ns3:AdditionalInfo>Basic Signature Validation process failed with INDETERMINATE/TRY_LATER indication</ns3:AdditionalInfo>
---
>                     <ns3:Constraint Id="S-21296427544E99B00370C305EF94F992A0B72BB29A375C525DE98566DF7F1F04-SAV">
>                         <ns3:Name Key="BSV_ISAVRC">Is the result of the 'Signature Acceptance Validation' building block conclusive?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
3512,3515c3508
<                         <ns3:Indication>INDETERMINATE</ns3:Indication>
<                         <ns3:SubIndication>TRY_LATER</ns3:SubIndication>
<                         <ns3:Errors Key="BBB_XCV_SUB_ANS">The certificate validation is not conclusive!</ns3:Errors>
<                         <ns3:Errors Key="BBB_RFC_IRIF_ANS">The revocation status information is not considered as 'fresh'.</ns3:Errors>
---
>                         <ns3:Indication>PASSED</ns3:Indication>
3518c3511
<                         <ns3:Time>2024-08-26T09:30:50Z</ns3:Time>
---
>                         <ns3:Time>2024-08-26T09:30:52Z</ns3:Time>
3630a3624,3627
>                         <ns3:Constraint Id="T-9AD7F5AB5E568619592CEE8AF466E86A4C796F6E238855BE2904C9536067CA41-FC">
>                             <ns3:Name Key="BSV_IFCRC">Is the result of the 'Format Checking' building block conclusive?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
3738a3736,3739
>                         <ns3:Constraint Id="T-D52E786E215D52DF45703B9136E1381AF7A225CC1EF14F62F1FF88071EB552B4-FC">
>                             <ns3:Name Key="BSV_IFCRC">Is the result of the 'Format Checking' building block conclusive?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
3781c3782
<                             <ns3:Time>2024-08-26T09:30:50Z</ns3:Time>
---
>                             <ns3:Time>2024-08-26T09:30:52Z</ns3:Time>
3823c3824
<                         <ns3:ValidationTimestampQualificationAtTime DateTime="2024-08-26T09:30:50Z" ValidationTime="TIMESTAMP_POE_TIME" TimestampQualification="QTSA" Title="Time-stamp Qualification at time-stamp lowest POE time">
---
>                         <ns3:ValidationTimestampQualificationAtTime DateTime="2024-08-26T09:30:52Z" ValidationTime="TIMESTAMP_POE_TIME" TimestampQualification="QTSA" Title="Time-stamp Qualification at time-stamp lowest POE time">
3889a3891,3895
>                         <ns3:Name Key="TSV_IBSTAIDOSC">Is the best-signature-time not before the issuance date of the signing certificate?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
>                         <ns3:AdditionalInfo>Best-signature-time : 2023-04-18 06:27, certificate notBefore : 2021-11-24 23:00</ns3:AdditionalInfo>
>                     </ns3:Constraint>
>                     <ns3:Constraint>
3901,3905d3906
<                     <ns3:Constraint Id="R-24B73989B830FEFF4D16060803625CE2C5275C9792D58038F04B9314927F713A" BlockType="RFC">
<                         <ns3:Name Key="BBB_XCV_RFC">Is the revocation freshness check conclusive?</ns3:Name>
<                         <ns3:Status>OK</ns3:Status>
<                         <ns3:AdditionalInfo>Id = R-24B73989B830FEFF4D16060803625CE2C5275C9792D58038F04B9314927F713A</ns3:AdditionalInfo>
<                     </ns3:Constraint>
3947,3961d3947
<                     <ns3:RFC Id="R-24B73989B830FEFF4D16060803625CE2C5275C9792D58038F04B9314927F713A" Title="Revocation Freshness Checker">
<                         <ns3:Constraint>
<                             <ns3:Name Key="BBB_RFC_IRIF">Is the revocation information fresh for the certificate?</ns3:Name>
<                             <ns3:Status>OK</ns3:Status>
<                             <ns3:AdditionalInfo>Validation time : 2023-04-18 06:27; thisUpdate time : 2024-05-17 09:14; nextUpdate time : 2024-05-23 09:14</ns3:AdditionalInfo>
<                         </ns3:Constraint>
<                         <ns3:Constraint>
<                             <ns3:Name Key="ACCM">Are cryptographic constraints met for the revocation data signature?</ns3:Name>
<                             <ns3:Status>OK</ns3:Status>
<                             <ns3:AdditionalInfo>Signature algorithm RSA with SHA256 with key size 3072 at validation time : 2023-04-18 06:27</ns3:AdditionalInfo>
<                         </ns3:Constraint>
<                         <ns3:Conclusion>
<                             <ns3:Indication>PASSED</ns3:Indication>
<                         </ns3:Conclusion>
<                     </ns3:RFC>
4195a4182,4190
>                         <ns3:Status>WARNING</ns3:Status>
>                         <ns3:Warning Key="BSV_IXCVRC_ANS">The result of the 'X.509 Certificate Validation' building block is not conclusive!</ns3:Warning>
>                     </ns3:Constraint>
>                     <ns3:Constraint Id="S-484F543E355A6ABB75D636043738B56E8AFAD5B1460E40FA919467A18DA287C0-XCV">
>                         <ns3:Name Key="BSV_ISCRAVTC">Is the signing certificate not revoked at validation time?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
>                     </ns3:Constraint>
>                     <ns3:Constraint Id="S-484F543E355A6ABB75D636043738B56E8AFAD5B1460E40FA919467A18DA287C0-XCV">
>                         <ns3:Name Key="BSV_IVTAVRSC">Is the validation time in the validity range of the signing certificate?</ns3:Name>
4202,4204c4197,4201
<                     <ns3:Constraint Id="S-484F543E355A6ABB75D636043738B56E8AFAD5B1460E40FA919467A18DA287C0-SAV">
<                         <ns3:Name Key="BSV_ISAVRC">Is the result of the 'Signature Acceptance Validation' building block conclusive?</ns3:Name>
<                         <ns3:Status>OK</ns3:Status>
---
>                     <ns3:Constraint Id="S-484F543E355A6ABB75D636043738B56E8AFAD5B1460E40FA919467A18DA287C0">
>                         <ns3:Name Key="ADEST_ROBVPIIC">Is the result of the Basic Validation Process conclusive?</ns3:Name>
>                         <ns3:Status>NOT OK</ns3:Status>
>                         <ns3:Error Key="ADEST_ROBVPIIC_ANS">The result of the Basic validation process is not conclusive!</ns3:Error>
>                         <ns3:AdditionalInfo>Basic Signature Validation process failed with INDETERMINATE/CRYPTO_CONSTRAINTS_FAILURE_NO_POE indication</ns3:AdditionalInfo>
4207c4204,4208
<                         <ns3:Indication>PASSED</ns3:Indication>
---
>                         <ns3:Indication>INDETERMINATE</ns3:Indication>
>                         <ns3:SubIndication>CRYPTO_CONSTRAINTS_FAILURE_NO_POE</ns3:SubIndication>
>                         <ns3:Errors Key="BBB_XCV_SUB_ANS">The certificate validation is not conclusive!</ns3:Errors>
>                         <ns3:Errors Key="ASCCM_AR_ANS_ANR">The algorithm SHA1 is no longer considered reliable for signature's certificate chain!</ns3:Errors>
>                         <ns3:Errors Key="ASCCM_AR_ANS_ANR">The algorithm SHA1 is no longer considered reliable for signature's certificate chain!</ns3:Errors>
4210c4211
<                         <ns3:Time>2024-08-26T09:30:50Z</ns3:Time>
---
>                         <ns3:Time>2024-08-26T09:30:52Z</ns3:Time>
4322a4324,4327
>                         <ns3:Constraint Id="T-D52E786E215D52DF45703B9136E1381AF7A225CC1EF14F62F1FF88071EB552B4-FC">
>                             <ns3:Name Key="BSV_IFCRC">Is the result of the 'Format Checking' building block conclusive?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
4365c4370
<                             <ns3:Time>2024-08-26T09:30:50Z</ns3:Time>
---
>                             <ns3:Time>2024-08-26T09:30:52Z</ns3:Time>
4407c4412
<                         <ns3:ValidationTimestampQualificationAtTime DateTime="2024-08-26T09:30:50Z" ValidationTime="TIMESTAMP_POE_TIME" TimestampQualification="QTSA" Title="Time-stamp Qualification at time-stamp lowest POE time">
---
>                         <ns3:ValidationTimestampQualificationAtTime DateTime="2024-08-26T09:30:52Z" ValidationTime="TIMESTAMP_POE_TIME" TimestampQualification="QTSA" Title="Time-stamp Qualification at time-stamp lowest POE time">
4473c4478
<                         <ns3:Name Key="TSV_IBSTAIDOSC">Is the best-signature-time not before the issuance date of the signing certificate?</ns3:Name>
---
>                         <ns3:Name Key="ACCM">Are cryptographic constraints met for the signature creation?</ns3:Name>
4475c4480
<                         <ns3:AdditionalInfo>Best-signature-time : 2024-05-17 14:11, certificate notBefore : 2014-11-24 14:05</ns3:AdditionalInfo>
---
>                         <ns3:AdditionalInfo>Signature algorithm RSA with SHA256 with key size 2048 at validation time : 2024-05-17 14:11</ns3:AdditionalInfo>
4478c4483
<                         <ns3:Name Key="TSV_ASTPTCT">Are the time-stamps in the right order?</ns3:Name>
---
>                         <ns3:Name Key="ACCM">Are cryptographic constraints met for the message digest?</ns3:Name>
4479a4485
>                         <ns3:AdditionalInfo>Digest algorithm SHA256 at validation time : 2024-05-17 14:11 for message digest</ns3:AdditionalInfo>
4482c4488
<                         <ns3:Name Key="BBB_SAV_ISQPSTP">Is the signed qualifying property: 'signing-time' present?</ns3:Name>
---
>                         <ns3:Name Key="ACCM">Are cryptographic constraints met for the signing-certificate reference?</ns3:Name>
4483a4490
>                         <ns3:AdditionalInfo>Digest algorithm SHA256 at validation time : 2024-05-17 14:11 for signing-certificate reference with Id : C-72D556BE570C0C404B1D0786D1A15DAC687269280EB3D0ED49B1E12A74EEB8E9</ns3:AdditionalInfo>
4486,4491c4493,4496
<                         <ns3:Name Key="ADEST_ISTPTDABST">Is the signing-time plus the time-stamp delay after best-signature-time?</ns3:Name>
<                         <ns3:Status>IGNORED</ns3:Status>
<                     </ns3:Constraint>
<                     <ns3:Constraint>
<                         <ns3:Name Key="BBB_SAV_ISVA">Is the signature acceptable?</ns3:Name>
<                         <ns3:Status>OK</ns3:Status>
---
>                         <ns3:Name Key="ACCM">Are cryptographic constraints met for the signature's certificate chain?</ns3:Name>
>                         <ns3:Status>NOT OK</ns3:Status>
>                         <ns3:Error Key="ASCCM_AR_ANS_ANR">The algorithm SHA1 is no longer considered reliable for signature's certificate chain!</ns3:Error>
>                         <ns3:AdditionalInfo>The algorithm SHA1 is no longer considered reliable for signature's certificate chain! for the token at the validation time : 2024-08-26 09:30</ns3:AdditionalInfo>
4494c4499,4501
<                         <ns3:Indication>PASSED</ns3:Indication>
---
>                         <ns3:Indication>INDETERMINATE</ns3:Indication>
>                         <ns3:SubIndication>CRYPTO_CONSTRAINTS_FAILURE_NO_POE</ns3:SubIndication>
>                         <ns3:Errors Key="ASCCM_AR_ANS_ANR">The algorithm SHA1 is no longer considered reliable for signature's certificate chain!</ns3:Errors>
4575a4583,4587
>                     <ns3:Constraint Id="S-484F543E355A6ABB75D636043738B56E8AFAD5B1460E40FA919467A18DA287C0-PSV" BlockType="PSV">
>                         <ns3:Name Key="PSV_IPSVC">Is the past signature validation conclusive?</ns3:Name>
>                         <ns3:Status>NOT OK</ns3:Status>
>                         <ns3:Error Key="PSV_IPSVC_ANS">The past signature validation is not conclusive!</ns3:Error>
>                     </ns3:Constraint>
4577c4589,4591
<                         <ns3:Indication>PASSED</ns3:Indication>
---
>                         <ns3:Indication>INDETERMINATE</ns3:Indication>
>                         <ns3:SubIndication>CRYPTO_CONSTRAINTS_FAILURE_NO_POE</ns3:SubIndication>
>                         <ns3:Errors Key="PSV_IPSVC_ANS">The past signature validation is not conclusive!</ns3:Errors>
4584c4598
<                 <ns3:ValidationSignatureQualification SignatureQualification="QESig" Title="Signature Qualification">
---
>                 <ns3:ValidationSignatureQualification SignatureQualification="Indeterminate QESig" Title="Signature Qualification">
4587c4601,4602
<                         <ns3:Status>OK</ns3:Status>
---
>                         <ns3:Status>WARNING</ns3:Status>
>                         <ns3:Warning Key="QUAL_IS_ADES_IND">The signature/seal is an INDETERMINATE AdES digital signature!</ns3:Warning>
4624a4640
>                         <ns3:Warnings Key="QUAL_IS_ADES_IND">The signature/seal is an INDETERMINATE AdES digital signature!</ns3:Warnings>
4752c4768,4769
<                     <ns3:Indication>TOTAL_PASSED</ns3:Indication>
---
>                     <ns3:Indication>INDETERMINATE</ns3:Indication>
>                     <ns3:SubIndication>CRYPTO_CONSTRAINTS_FAILURE_NO_POE</ns3:SubIndication>
4813c4830
<                         <ns3:ValidationTime>2024-08-26T09:30:50Z</ns3:ValidationTime>
---
>                         <ns3:ValidationTime>2024-08-26T09:30:52Z</ns3:ValidationTime>
4858,4862c4875,4876
<                         <ns3:Status>OK</ns3:Status>
<                     </ns3:Constraint>
<                     <ns3:Constraint Id="C-A8D14E945E3E5156BCAE5E39737CF6A1B1F51028BBBF982F50CE5F4C05568B4D" BlockType="SUB_XCV">
<                         <ns3:Name Key="BBB_XCV_SUB">Is the certificate validation conclusive?</ns3:Name>
<                         <ns3:Status>OK</ns3:Status>
---
>                         <ns3:Status>NOT OK</ns3:Status>
>                         <ns3:Error Key="BBB_XCV_SUB_ANS">The certificate validation is not conclusive!</ns3:Error>
4865c4879,4882
<                         <ns3:Indication>PASSED</ns3:Indication>
---
>                         <ns3:Indication>INDETERMINATE</ns3:Indication>
>                         <ns3:SubIndication>CRYPTO_CONSTRAINTS_FAILURE_NO_POE</ns3:SubIndication>
>                         <ns3:Errors Key="BBB_XCV_SUB_ANS">The certificate validation is not conclusive!</ns3:Errors>
>                         <ns3:Errors Key="ASCCM_AR_ANS_ANR">The algorithm SHA1 is no longer considered reliable for revocation data's certificate chain!</ns3:Errors>
4872a4890,4901
>                             <ns3:Name Key="BBB_XCV_ICPTV">Is the certificate's policy tree valid?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_DCSBSINC">Do certificate's subject names satisfy the imposed name constraints?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_DCCUCE">Are all found critical certificate extensions supported?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
4895a4925,4953
>                             <ns3:Name Key="BBB_XCV_ICAC">Is the certificate a CA certificate?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_ICPDV">Is the certificate's path depth valid?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_ISCGKU">Does the certificate have an expected key-usage?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                             <ns3:AdditionalInfo>Key usage : [KEY_CERT_SIGN, CRL_SIGN]</ns3:AdditionalInfo>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_ICPTV">Is the certificate's policy tree valid?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_DCSBSINC">Do certificate's subject names satisfy the imposed name constraints?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_DCCUCE">Are all found critical certificate extensions supported?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_DCCFCE">Are all found certificate extensions allowed for the certificate?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
4919,4920c4977,4979
<                             <ns3:Status>OK</ns3:Status>
<                             <ns3:AdditionalInfo>Signature algorithm RSA with SHA1 with key size 4096 at validation time : 2024-08-26 09:30</ns3:AdditionalInfo>
---
>                             <ns3:Status>NOT OK</ns3:Status>
>                             <ns3:Error Key="ASCCM_AR_ANS_ANR">The algorithm SHA1 is no longer considered reliable for revocation data's certificate chain!</ns3:Error>
>                             <ns3:AdditionalInfo>The algorithm SHA1 is no longer considered reliable for revocation data's certificate chain! for the token at the validation time : 2024-08-26 09:30</ns3:AdditionalInfo>
4923c4982,4984
<                             <ns3:Indication>PASSED</ns3:Indication>
---
>                             <ns3:Indication>INDETERMINATE</ns3:Indication>
>                             <ns3:SubIndication>CRYPTO_CONSTRAINTS_FAILURE_NO_POE</ns3:SubIndication>
>                             <ns3:Errors Key="ASCCM_AR_ANS_ANR">The algorithm SHA1 is no longer considered reliable for revocation data's certificate chain!</ns3:Errors>
4995c5056
<                                 <ns3:Name Key="BBB_RFC_IRIF">Is the revocation information fresh for the certificate?</ns3:Name>
---
>                                 <ns3:Name Key="BBB_RFC_NUP">Is there a Next Update defined for the revocation data?</ns3:Name>
4997c5058,5061
<                                 <ns3:AdditionalInfo>Validation time : 2024-08-26 09:30; thisUpdate time : 2024-07-01 11:00; nextUpdate time : 2025-01-31 11:00</ns3:AdditionalInfo>
---
>                             </ns3:Constraint>
>                             <ns3:Constraint>
>                                 <ns3:Name Key="BBB_RFC_IRIF">Is the revocation information fresh for the certificate?</ns3:Name>
>                                 <ns3:Status>IGNORED</ns3:Status>
5040c5104
<                         <ns3:ValidationTime>2024-08-26T09:30:50Z</ns3:ValidationTime>
---
>                         <ns3:ValidationTime>2024-08-26T09:30:52Z</ns3:ValidationTime>
5056c5120,5123
<                     <ns3:Indication>PASSED</ns3:Indication>
---
>                     <ns3:Indication>INDETERMINATE</ns3:Indication>
>                     <ns3:SubIndication>CRYPTO_CONSTRAINTS_FAILURE_NO_POE</ns3:SubIndication>
>                     <ns3:Errors Key="BBB_XCV_SUB_ANS">The certificate validation is not conclusive!</ns3:Errors>
>                     <ns3:Errors Key="ASCCM_AR_ANS_ANR">The algorithm SHA1 is no longer considered reliable for revocation data's certificate chain!</ns3:Errors>
5098a5166,5177
>                             <ns3:Name Key="BBB_XCV_ICPTV">Is the certificate's policy tree valid?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_DCSBSINC">Do certificate's subject names satisfy the imposed name constraints?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_DCCUCE">Are all found critical certificate extensions supported?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
5147c5226
<                         <ns3:ValidationTime>2024-08-26T09:30:50Z</ns3:ValidationTime>
---
>                         <ns3:ValidationTime>2024-08-26T09:30:52Z</ns3:ValidationTime>
5205a5285,5296
>                             <ns3:Name Key="BBB_XCV_ICPTV">Is the certificate's policy tree valid?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_DCSBSINC">Do certificate's subject names satisfy the imposed name constraints?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_DCCUCE">Are all found critical certificate extensions supported?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
5255c5346
<                         <ns3:ValidationTime>2024-08-26T09:30:50Z</ns3:ValidationTime>
---
>                         <ns3:ValidationTime>2024-08-26T09:30:52Z</ns3:ValidationTime>
5332c5423
<                         <ns3:ValidationTime>2024-08-26T09:30:50Z</ns3:ValidationTime>
---
>                         <ns3:ValidationTime>2024-08-26T09:30:52Z</ns3:ValidationTime>
5377,5381c5468,5469
<                         <ns3:Status>OK</ns3:Status>
<                     </ns3:Constraint>
<                     <ns3:Constraint Id="C-A8D14E945E3E5156BCAE5E39737CF6A1B1F51028BBBF982F50CE5F4C05568B4D" BlockType="SUB_XCV">
<                         <ns3:Name Key="BBB_XCV_SUB">Is the certificate validation conclusive?</ns3:Name>
<                         <ns3:Status>OK</ns3:Status>
---
>                         <ns3:Status>NOT OK</ns3:Status>
>                         <ns3:Error Key="BBB_XCV_SUB_ANS">The certificate validation is not conclusive!</ns3:Error>
5384c5472,5475
<                         <ns3:Indication>PASSED</ns3:Indication>
---
>                         <ns3:Indication>INDETERMINATE</ns3:Indication>
>                         <ns3:SubIndication>CRYPTO_CONSTRAINTS_FAILURE_NO_POE</ns3:SubIndication>
>                         <ns3:Errors Key="BBB_XCV_SUB_ANS">The certificate validation is not conclusive!</ns3:Errors>
>                         <ns3:Errors Key="ASCCM_AR_ANS_ANR">The algorithm SHA1 is no longer considered reliable for revocation data's certificate chain!</ns3:Errors>
5391a5483,5494
>                             <ns3:Name Key="BBB_XCV_ICPTV">Is the certificate's policy tree valid?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_DCSBSINC">Do certificate's subject names satisfy the imposed name constraints?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_DCCUCE">Are all found critical certificate extensions supported?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
5414a5518,5546
>                             <ns3:Name Key="BBB_XCV_ICAC">Is the certificate a CA certificate?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_ICPDV">Is the certificate's path depth valid?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_ISCGKU">Does the certificate have an expected key-usage?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                             <ns3:AdditionalInfo>Key usage : [KEY_CERT_SIGN, CRL_SIGN]</ns3:AdditionalInfo>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_ICPTV">Is the certificate's policy tree valid?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_DCSBSINC">Do certificate's subject names satisfy the imposed name constraints?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_DCCUCE">Are all found critical certificate extensions supported?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_DCCFCE">Are all found certificate extensions allowed for the certificate?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
5438,5439c5570,5572
<                             <ns3:Status>OK</ns3:Status>
<                             <ns3:AdditionalInfo>Signature algorithm RSA with SHA1 with key size 4096 at validation time : 2024-08-26 09:30</ns3:AdditionalInfo>
---
>                             <ns3:Status>NOT OK</ns3:Status>
>                             <ns3:Error Key="ASCCM_AR_ANS_ANR">The algorithm SHA1 is no longer considered reliable for revocation data's certificate chain!</ns3:Error>
>                             <ns3:AdditionalInfo>The algorithm SHA1 is no longer considered reliable for revocation data's certificate chain! for the token at the validation time : 2024-08-26 09:30</ns3:AdditionalInfo>
5442c5575,5577
<                             <ns3:Indication>PASSED</ns3:Indication>
---
>                             <ns3:Indication>INDETERMINATE</ns3:Indication>
>                             <ns3:SubIndication>CRYPTO_CONSTRAINTS_FAILURE_NO_POE</ns3:SubIndication>
>                             <ns3:Errors Key="ASCCM_AR_ANS_ANR">The algorithm SHA1 is no longer considered reliable for revocation data's certificate chain!</ns3:Errors>
5514c5649
<                                 <ns3:Name Key="BBB_RFC_IRIF">Is the revocation information fresh for the certificate?</ns3:Name>
---
>                                 <ns3:Name Key="BBB_RFC_NUP">Is there a Next Update defined for the revocation data?</ns3:Name>
5516c5651,5654
<                                 <ns3:AdditionalInfo>Validation time : 2024-08-26 09:30; thisUpdate time : 2024-07-01 11:00; nextUpdate time : 2025-01-31 11:00</ns3:AdditionalInfo>
---
>                             </ns3:Constraint>
>                             <ns3:Constraint>
>                                 <ns3:Name Key="BBB_RFC_IRIF">Is the revocation information fresh for the certificate?</ns3:Name>
>                                 <ns3:Status>IGNORED</ns3:Status>
5559c5697
<                         <ns3:ValidationTime>2024-08-26T09:30:50Z</ns3:ValidationTime>
---
>                         <ns3:ValidationTime>2024-08-26T09:30:52Z</ns3:ValidationTime>
5575c5713,5716
<                     <ns3:Indication>PASSED</ns3:Indication>
---
>                     <ns3:Indication>INDETERMINATE</ns3:Indication>
>                     <ns3:SubIndication>CRYPTO_CONSTRAINTS_FAILURE_NO_POE</ns3:SubIndication>
>                     <ns3:Errors Key="BBB_XCV_SUB_ANS">The certificate validation is not conclusive!</ns3:Errors>
>                     <ns3:Errors Key="ASCCM_AR_ANS_ANR">The algorithm SHA1 is no longer considered reliable for revocation data's certificate chain!</ns3:Errors>
5617a5759,5770
>                             <ns3:Name Key="BBB_XCV_ICPTV">Is the certificate's policy tree valid?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_DCSBSINC">Do certificate's subject names satisfy the imposed name constraints?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_DCCUCE">Are all found critical certificate extensions supported?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
5666c5819
<                         <ns3:ValidationTime>2024-08-26T09:30:50Z</ns3:ValidationTime>
---
>                         <ns3:ValidationTime>2024-08-26T09:30:52Z</ns3:ValidationTime>
5724a5878,5889
>                             <ns3:Name Key="BBB_XCV_ICPTV">Is the certificate's policy tree valid?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_DCSBSINC">Do certificate's subject names satisfy the imposed name constraints?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_DCCUCE">Are all found critical certificate extensions supported?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
5774c5939
<                         <ns3:ValidationTime>2024-08-26T09:30:50Z</ns3:ValidationTime>
---
>                         <ns3:ValidationTime>2024-08-26T09:30:52Z</ns3:ValidationTime>
5803,5806d5967
<                     <ns3:Constraint>
<                         <ns3:Name Key="BBB_ICS_ICDVV">Does the certificate digest value match a digest value found in the certificate reference(s)?</ns3:Name>
<                         <ns3:Status>OK</ns3:Status>
<                     </ns3:Constraint>
5890c6051
<                         <ns3:ValidationTime>2024-08-26T09:30:50Z</ns3:ValidationTime>
---
>                         <ns3:ValidationTime>2024-08-26T09:30:52Z</ns3:ValidationTime>
5910c6071
<                 <ns3:ISC Title="Identification of the Signing Certificate">
---
>                 <ns3:FC Title="Format Checking">
5912c6073
<                         <ns3:Name Key="BBB_ICS_ISCI">Is there an identified candidate for the signing certificate?</ns3:Name>
---
>                         <ns3:Name Key="BBB_FC_IBRV">Is the /ByteRange dictionary consistent?</ns3:Name>
5916c6077
<                         <ns3:Name Key="BBB_ICS_ISACDP">Is the signed attribute: 'cert-digest' of the certificate present?</ns3:Name>
---
>                         <ns3:Name Key="BBB_FC_DBTOOST">Does the /ByteRange not overlap with other signature/timestamp?</ns3:Name>
5920c6081,6110
<                         <ns3:Name Key="BBB_ICS_ICDVV">Does the certificate digest value match a digest value found in the certificate reference(s)?</ns3:Name>
---
>                         <ns3:Name Key="BBB_FC_ISDC">Is the signature dictionary consistent?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
>                     </ns3:Constraint>
>                     <ns3:Constraint>
>                         <ns3:Name Key="BBB_FC_DSFREAP">Do signed and final revisions contain equal amount of pages?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
>                     </ns3:Constraint>
>                     <ns3:Constraint>
>                         <ns3:Name Key="BBB_FC_IAOD">Is no element overlapping detected in the PDF?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
>                     </ns3:Constraint>
>                     <ns3:Constraint>
>                         <ns3:Name Key="BBB_FC_IVDBSFR">Is there no visual difference between signed and final revisions in the PDF?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
>                     </ns3:Constraint>
>                     <ns3:Constraint>
>                         <ns3:Name Key="BBB_FC_DSCNUOM">Does the document contain none of the undefined object modifications?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
>                     </ns3:Constraint>
>                     <ns3:Conclusion>
>                         <ns3:Indication>PASSED</ns3:Indication>
>                     </ns3:Conclusion>
>                 </ns3:FC>
>                 <ns3:ISC Title="Identification of the Signing Certificate">
>                     <ns3:Constraint>
>                         <ns3:Name Key="BBB_ICS_ISCI">Is there an identified candidate for the signing certificate?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
>                     </ns3:Constraint>
>                     <ns3:Constraint>
>                         <ns3:Name Key="BBB_ICS_ISACDP">Is the signed attribute: 'cert-digest' of the certificate present?</ns3:Name>
6006c6196
<                         <ns3:ValidationTime>2024-08-26T09:30:50Z</ns3:ValidationTime>
---
>                         <ns3:ValidationTime>2024-08-26T09:30:52Z</ns3:ValidationTime>
6036,6039d6225
<                         <ns3:Name Key="BBB_ICS_ICDVV">Does the certificate digest value match a digest value found in the certificate reference(s)?</ns3:Name>
<                         <ns3:Status>OK</ns3:Status>
<                     </ns3:Constraint>
<                     <ns3:Constraint>
6126c6312
<                         <ns3:ValidationTime>2024-08-26T09:30:50Z</ns3:ValidationTime>
---
>                         <ns3:ValidationTime>2024-08-26T09:30:52Z</ns3:ValidationTime>
6146c6332
<                 <ns3:ISC Title="Identification of the Signing Certificate">
---
>                 <ns3:FC Title="Format Checking">
6148c6334
<                         <ns3:Name Key="BBB_ICS_ISCI">Is there an identified candidate for the signing certificate?</ns3:Name>
---
>                         <ns3:Name Key="BBB_FC_IBRV">Is the /ByteRange dictionary consistent?</ns3:Name>
6152c6338
<                         <ns3:Name Key="BBB_ICS_ISACDP">Is the signed attribute: 'cert-digest' of the certificate present?</ns3:Name>
---
>                         <ns3:Name Key="BBB_FC_DBTOOST">Does the /ByteRange not overlap with other signature/timestamp?</ns3:Name>
6156c6342,6371
<                         <ns3:Name Key="BBB_ICS_ICDVV">Does the certificate digest value match a digest value found in the certificate reference(s)?</ns3:Name>
---
>                         <ns3:Name Key="BBB_FC_ISDC">Is the signature dictionary consistent?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
>                     </ns3:Constraint>
>                     <ns3:Constraint>
>                         <ns3:Name Key="BBB_FC_DSFREAP">Do signed and final revisions contain equal amount of pages?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
>                     </ns3:Constraint>
>                     <ns3:Constraint>
>                         <ns3:Name Key="BBB_FC_IAOD">Is no element overlapping detected in the PDF?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
>                     </ns3:Constraint>
>                     <ns3:Constraint>
>                         <ns3:Name Key="BBB_FC_IVDBSFR">Is there no visual difference between signed and final revisions in the PDF?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
>                     </ns3:Constraint>
>                     <ns3:Constraint>
>                         <ns3:Name Key="BBB_FC_DSCNUOM">Does the document contain none of the undefined object modifications?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
>                     </ns3:Constraint>
>                     <ns3:Conclusion>
>                         <ns3:Indication>PASSED</ns3:Indication>
>                     </ns3:Conclusion>
>                 </ns3:FC>
>                 <ns3:ISC Title="Identification of the Signing Certificate">
>                     <ns3:Constraint>
>                         <ns3:Name Key="BBB_ICS_ISCI">Is there an identified candidate for the signing certificate?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
>                     </ns3:Constraint>
>                     <ns3:Constraint>
>                         <ns3:Name Key="BBB_ICS_ISACDP">Is the signed attribute: 'cert-digest' of the certificate present?</ns3:Name>
6246c6461
<                         <ns3:ValidationTime>2024-08-26T09:30:50Z</ns3:ValidationTime>
---
>                         <ns3:ValidationTime>2024-08-26T09:30:52Z</ns3:ValidationTime>
6283a6499,6510
>                         <ns3:Name Key="BBB_FC_IBRV">Is the /ByteRange dictionary consistent?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
>                     </ns3:Constraint>
>                     <ns3:Constraint>
>                         <ns3:Name Key="BBB_FC_DBTOOST">Does the /ByteRange not overlap with other signature/timestamp?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
>                     </ns3:Constraint>
>                     <ns3:Constraint>
>                         <ns3:Name Key="BBB_FC_ISDC">Is the signature dictionary consistent?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
>                     </ns3:Constraint>
>                     <ns3:Constraint>
6351,6352c6578,6582
<                         <ns3:Status>NOT OK</ns3:Status>
<                         <ns3:Error Key="BBB_XCV_SUB_ANS">The certificate validation is not conclusive!</ns3:Error>
---
>                         <ns3:Status>OK</ns3:Status>
>                     </ns3:Constraint>
>                     <ns3:Constraint Id="C-1CC358A6DFA0A76BB5470660D78F3B25F23CCD6395667E49CCFC8201DA3D192D" BlockType="SUB_XCV">
>                         <ns3:Name Key="BBB_XCV_SUB">Is the certificate validation conclusive?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
6355,6358c6585
<                         <ns3:Indication>INDETERMINATE</ns3:Indication>
<                         <ns3:SubIndication>TRY_LATER</ns3:SubIndication>
<                         <ns3:Errors Key="BBB_XCV_SUB_ANS">The certificate validation is not conclusive!</ns3:Errors>
<                         <ns3:Errors Key="BBB_RFC_IRIF_ANS">The revocation status information is not considered as 'fresh'.</ns3:Errors>
---
>                         <ns3:Indication>PASSED</ns3:Indication>
6386a6614,6629
>                             <ns3:Name Key="BBB_XCV_ICPTV">Is the certificate's policy tree valid?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_DCSBSINC">Do certificate's subject names satisfy the imposed name constraints?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_DCCUCE">Are all found critical certificate extensions supported?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_DCCFCE">Are all found certificate extensions allowed for the certificate?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
6409,6410c6652
<                             <ns3:Status>NOT OK</ns3:Status>
<                             <ns3:Error Key="BBB_XCV_RFC_ANS">The revocation freshness check is not conclusive!</ns3:Error>
---
>                             <ns3:Status>OK</ns3:Status>
6412a6655,6669
>                         <ns3:Constraint>
>                             <ns3:Name Key="ACCM">Are cryptographic constraints met for the signature's certificate chain?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                             <ns3:AdditionalInfo>Signature algorithm RSA with SHA256 with key size 4096 at validation time : 2024-08-26 09:30</ns3:AdditionalInfo>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_ICTIVRSC">Is the current time in the validity range of the signer's certificate?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                             <ns3:AdditionalInfo>Validation time : 2024-08-26 09:30, certificate validity : 2021-11-24 23:00 - 2024-11-23 22:59</ns3:AdditionalInfo>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_ICTIVRCIRI">Is the current time in the validity range of the certificate of the issuer of the revocation information?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                             <ns3:AdditionalInfo>Issuer certificate C-F8A600EC0ADB5FA4FBC1240330DE770A68AC8E1378E1A0141B8A015F7F96206E of revocation data R-24B73989B830FEFF4D16060803625CE2C5275C9792D58038F04B9314927F713A with validity range : 2023-10-16 07:59 - 2026-10-16 07:59 and validation time 2024-08-26 09:30</ns3:AdditionalInfo>
>                         </ns3:Constraint>
6414,6416c6671
<                             <ns3:Indication>INDETERMINATE</ns3:Indication>
<                             <ns3:SubIndication>TRY_LATER</ns3:SubIndication>
<                             <ns3:Errors Key="BBB_RFC_IRIF_ANS">The revocation status information is not considered as 'fresh'.</ns3:Errors>
---
>                             <ns3:Indication>PASSED</ns3:Indication>
6442a6698,6701
>                                     <ns3:Name Key="BBB_XCV_REVOC_RESPID_MATCH">Does the ResponderId match the OCSP issuer certificate?</ns3:Name>
>                                     <ns3:Status>OK</ns3:Status>
>                                 </ns3:Constraint>
>                                 <ns3:Constraint>
6479a6739,6742
>                                     <ns3:Name Key="BBB_XCV_REVOC_RESPID_MATCH">Does the ResponderId match the OCSP issuer certificate?</ns3:Name>
>                                     <ns3:Status>OK</ns3:Status>
>                                 </ns3:Constraint>
>                                 <ns3:Constraint>
6515,6517c6778,6783
<                                 <ns3:Status>NOT OK</ns3:Status>
<                                 <ns3:Error Key="BBB_RFC_IRIF_ANS">The revocation status information is not considered as 'fresh'.</ns3:Error>
<                                 <ns3:AdditionalInfo>Validation time : 2024-08-26 09:30; thisUpdate time : 2024-05-17 09:14; nextUpdate time : 2024-05-23 09:14</ns3:AdditionalInfo>
---
>                                 <ns3:Status>IGNORED</ns3:Status>
>                             </ns3:Constraint>
>                             <ns3:Constraint>
>                                 <ns3:Name Key="ACCM">Are cryptographic constraints met for the revocation data signature?</ns3:Name>
>                                 <ns3:Status>OK</ns3:Status>
>                                 <ns3:AdditionalInfo>Signature algorithm RSA with SHA256 with key size 3072 at validation time : 2024-08-26 09:30</ns3:AdditionalInfo>
6520,6522c6786
<                                 <ns3:Indication>INDETERMINATE</ns3:Indication>
<                                 <ns3:SubIndication>TRY_LATER</ns3:SubIndication>
<                                 <ns3:Errors Key="BBB_RFC_IRIF_ANS">The revocation status information is not considered as 'fresh'.</ns3:Errors>
---
>                                 <ns3:Indication>PASSED</ns3:Indication>
6602c6866
<                         <ns3:ValidationTime>2024-08-26T09:30:50Z</ns3:ValidationTime>
---
>                         <ns3:ValidationTime>2024-08-26T09:30:52Z</ns3:ValidationTime>
6618,6621c6882
<                     <ns3:Indication>INDETERMINATE</ns3:Indication>
<                     <ns3:SubIndication>TRY_LATER</ns3:SubIndication>
<                     <ns3:Errors Key="BBB_XCV_SUB_ANS">The certificate validation is not conclusive!</ns3:Errors>
<                     <ns3:Errors Key="BBB_RFC_IRIF_ANS">The revocation status information is not considered as 'fresh'.</ns3:Errors>
---
>                     <ns3:Indication>PASSED</ns3:Indication>
6642a6904,6915
>                         <ns3:Name Key="BBB_FC_IBRV">Is the /ByteRange dictionary consistent?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
>                     </ns3:Constraint>
>                     <ns3:Constraint>
>                         <ns3:Name Key="BBB_FC_DBTOOST">Does the /ByteRange not overlap with other signature/timestamp?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
>                     </ns3:Constraint>
>                     <ns3:Constraint>
>                         <ns3:Name Key="BBB_FC_ISDC">Is the signature dictionary consistent?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
>                     </ns3:Constraint>
>                     <ns3:Constraint>
6710,6718c6983,6984
<                         <ns3:Status>OK</ns3:Status>
<                     </ns3:Constraint>
<                     <ns3:Constraint Id="C-4A0E0F30FA2D188690F9C75253A017195F2163E45C090CF5D2B73C62C449A782" BlockType="SUB_XCV">
<                         <ns3:Name Key="BBB_XCV_SUB">Is the certificate validation conclusive?</ns3:Name>
<                         <ns3:Status>OK</ns3:Status>
<                     </ns3:Constraint>
<                     <ns3:Constraint Id="C-A8D14E945E3E5156BCAE5E39737CF6A1B1F51028BBBF982F50CE5F4C05568B4D" BlockType="SUB_XCV">
<                         <ns3:Name Key="BBB_XCV_SUB">Is the certificate validation conclusive?</ns3:Name>
<                         <ns3:Status>OK</ns3:Status>
---
>                         <ns3:Status>NOT OK</ns3:Status>
>                         <ns3:Error Key="BBB_XCV_SUB_ANS">The certificate validation is not conclusive!</ns3:Error>
6721c6987,6991
<                         <ns3:Indication>PASSED</ns3:Indication>
---
>                         <ns3:Indication>INDETERMINATE</ns3:Indication>
>                         <ns3:SubIndication>CRYPTO_CONSTRAINTS_FAILURE_NO_POE</ns3:SubIndication>
>                         <ns3:Errors Key="BBB_XCV_SUB_ANS">The certificate validation is not conclusive!</ns3:Errors>
>                         <ns3:Errors Key="ASCCM_AR_ANS_ANR">The algorithm SHA1 is no longer considered reliable for signature's certificate chain!</ns3:Errors>
>                         <ns3:Errors Key="ASCCM_AR_ANS_ANR">The algorithm SHA1 is no longer considered reliable for signature's certificate chain!</ns3:Errors>
6749a7020,7035
>                             <ns3:Name Key="BBB_XCV_ICPTV">Is the certificate's policy tree valid?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_DCSBSINC">Do certificate's subject names satisfy the imposed name constraints?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_DCCUCE">Are all found critical certificate extensions supported?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_DCCFCE">Are all found certificate extensions allowed for the certificate?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
6777,6788c7063,7065
<                             <ns3:Status>OK</ns3:Status>
<                             <ns3:AdditionalInfo>Signature algorithm RSA with SHA1 with key size 4096 at validation time : 2024-08-26 09:30</ns3:AdditionalInfo>
<                         </ns3:Constraint>
<                         <ns3:Constraint>
<                             <ns3:Name Key="BBB_XCV_ICTIVRSC">Is the current time in the validity range of the signer's certificate?</ns3:Name>
<                             <ns3:Status>OK</ns3:Status>
<                             <ns3:AdditionalInfo>Validation time : 2024-08-26 09:30, certificate validity : 2014-11-24 14:05 - 2024-11-19 23:59</ns3:AdditionalInfo>
<                         </ns3:Constraint>
<                         <ns3:Constraint>
<                             <ns3:Name Key="BBB_XCV_ICTIVRCIRI">Is the current time in the validity range of the certificate of the issuer of the revocation information?</ns3:Name>
<                             <ns3:Status>OK</ns3:Status>
<                             <ns3:AdditionalInfo>Issuer certificate C-BDA3808DF76A9BB9A1109ECE8806AAAA76DA79D40A14C45008CA03946E36995B of revocation data R-E115453F82792FD0FE30976BFE2696B4EE652B36DD96C25B84A7C452B7EF136B with validity range : 2023-11-14 11:00 - 2025-01-31 11:00 and validation time 2024-08-26 09:30</ns3:AdditionalInfo>
---
>                             <ns3:Status>NOT OK</ns3:Status>
>                             <ns3:Error Key="ASCCM_AR_ANS_ANR">The algorithm SHA1 is no longer considered reliable for signature's certificate chain!</ns3:Error>
>                             <ns3:AdditionalInfo>The algorithm SHA1 is no longer considered reliable for signature's certificate chain! for the token at the validation time : 2024-08-26 09:30</ns3:AdditionalInfo>
6791c7068,7070
<                             <ns3:Indication>PASSED</ns3:Indication>
---
>                             <ns3:Indication>INDETERMINATE</ns3:Indication>
>                             <ns3:SubIndication>CRYPTO_CONSTRAINTS_FAILURE_NO_POE</ns3:SubIndication>
>                             <ns3:Errors Key="ASCCM_AR_ANS_ANR">The algorithm SHA1 is no longer considered reliable for signature's certificate chain!</ns3:Errors>
6817a7097,7100
>                                     <ns3:Name Key="BBB_XCV_REVOC_RESPID_MATCH">Does the ResponderId match the OCSP issuer certificate?</ns3:Name>
>                                     <ns3:Status>OK</ns3:Status>
>                                 </ns3:Constraint>
>                                 <ns3:Constraint>
6936a7220,7223
>                                     <ns3:Name Key="BBB_XCV_REVOC_RESPID_MATCH">Does the ResponderId match the OCSP issuer certificate?</ns3:Name>
>                                     <ns3:Status>OK</ns3:Status>
>                                 </ns3:Constraint>
>                                 <ns3:Constraint>
6963,6964c7250
<                                 <ns3:Status>OK</ns3:Status>
<                                 <ns3:AdditionalInfo>Validation time : 2024-08-26 09:30; thisUpdate time : 2024-08-26 09:30; nextUpdate time : 2024-08-26 09:31</ns3:AdditionalInfo>
---
>                                 <ns3:Status>IGNORED</ns3:Status>
6981a7268,7296
>                             <ns3:Name Key="BBB_XCV_ICAC">Is the certificate a CA certificate?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_ICPDV">Is the certificate's path depth valid?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_ISCGKU">Does the certificate have an expected key-usage?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                             <ns3:AdditionalInfo>Key usage : [KEY_CERT_SIGN, CRL_SIGN]</ns3:AdditionalInfo>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_ICPTV">Is the certificate's policy tree valid?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_DCSBSINC">Do certificate's subject names satisfy the imposed name constraints?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_DCCUCE">Are all found critical certificate extensions supported?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_DCCFCE">Are all found certificate extensions allowed for the certificate?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
7005,7006c7320,7322
<                             <ns3:Status>OK</ns3:Status>
<                             <ns3:AdditionalInfo>Signature algorithm RSA with SHA1 with key size 4096 at validation time : 2024-08-26 09:30</ns3:AdditionalInfo>
---
>                             <ns3:Status>NOT OK</ns3:Status>
>                             <ns3:Error Key="ASCCM_AR_ANS_ANR">The algorithm SHA1 is no longer considered reliable for signature's certificate chain!</ns3:Error>
>                             <ns3:AdditionalInfo>The algorithm SHA1 is no longer considered reliable for signature's certificate chain! for the token at the validation time : 2024-08-26 09:30</ns3:AdditionalInfo>
7009c7325,7327
<                             <ns3:Indication>PASSED</ns3:Indication>
---
>                             <ns3:Indication>INDETERMINATE</ns3:Indication>
>                             <ns3:SubIndication>CRYPTO_CONSTRAINTS_FAILURE_NO_POE</ns3:SubIndication>
>                             <ns3:Errors Key="ASCCM_AR_ANS_ANR">The algorithm SHA1 is no longer considered reliable for signature's certificate chain!</ns3:Errors>
7081c7399
<                                 <ns3:Name Key="BBB_RFC_IRIF">Is the revocation information fresh for the certificate?</ns3:Name>
---
>                                 <ns3:Name Key="BBB_RFC_NUP">Is there a Next Update defined for the revocation data?</ns3:Name>
7083c7401,7404
<                                 <ns3:AdditionalInfo>Validation time : 2024-08-26 09:30; thisUpdate time : 2024-07-01 11:00; nextUpdate time : 2025-01-31 11:00</ns3:AdditionalInfo>
---
>                             </ns3:Constraint>
>                             <ns3:Constraint>
>                                 <ns3:Name Key="BBB_RFC_IRIF">Is the revocation information fresh for the certificate?</ns3:Name>
>                                 <ns3:Status>IGNORED</ns3:Status>
7170c7491
<                         <ns3:ValidationTime>2024-08-26T09:30:50Z</ns3:ValidationTime>
---
>                         <ns3:ValidationTime>2024-08-26T09:30:52Z</ns3:ValidationTime>
7173a7495,7701
>                 <ns3:PSV Title="Past Signature Validation">
>                     <ns3:Constraint Id="C-72D556BE570C0C404B1D0786D1A15DAC687269280EB3D0ED49B1E12A74EEB8E9" BlockType="PSV_CRS">
>                         <ns3:Name Key="BBB_XCV_IARDPFC">Is an acceptable revocation data present for the certificate?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
>                         <ns3:AdditionalInfo>Acceptable revocation data : [R-E115453F82792FD0FE30976BFE2696B4EE652B36DD96C25B84A7C452B7EF136B, R-0103EB144906A71389D1EE770A15DA3D0396DA6B5E791B04323AD7DA2A246515]</ns3:AdditionalInfo>
>                     </ns3:Constraint>
>                     <ns3:Constraint Id="S-484F543E355A6ABB75D636043738B56E8AFAD5B1460E40FA919467A18DA287C0" BlockType="PCV">
>                         <ns3:Name Key="PSV_IPCVA">Is the past certificate validation conclusive?</ns3:Name>
>                         <ns3:Status>NOT OK</ns3:Status>
>                         <ns3:Error Key="PSV_IPCVA_ANS">The past certificate validation is not conclusive!</ns3:Error>
>                     </ns3:Constraint>
>                     <ns3:Conclusion>
>                         <ns3:Indication>INDETERMINATE</ns3:Indication>
>                         <ns3:SubIndication>CRYPTO_CONSTRAINTS_FAILURE_NO_POE</ns3:SubIndication>
>                         <ns3:Errors Key="PSV_IPCVA_ANS">The past certificate validation is not conclusive!</ns3:Errors>
>                     </ns3:Conclusion>
>                 </ns3:PSV>
>                 <ns3:PSV_CRS Id="C-72D556BE570C0C404B1D0786D1A15DAC687269280EB3D0ED49B1E12A74EEB8E9" LatestAcceptableRevocationId="R-E115453F82792FD0FE30976BFE2696B4EE652B36DD96C25B84A7C452B7EF136B" Title="Past Revocation Data Selector">
>                     <ns3:Constraint Id="R-E115453F82792FD0FE30976BFE2696B4EE652B36DD96C25B84A7C452B7EF136B" BlockType="REV_BBB">
>                         <ns3:Name Key="ADEST_RORPIIC">Is the result of the revocation data basic validation process acceptable?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
>                         <ns3:AdditionalInfo>Id = R-E115453F82792FD0FE30976BFE2696B4EE652B36DD96C25B84A7C452B7EF136B</ns3:AdditionalInfo>
>                     </ns3:Constraint>
>                     <ns3:Constraint Id="R-E115453F82792FD0FE30976BFE2696B4EE652B36DD96C25B84A7C452B7EF136B" BlockType="RAC">
>                         <ns3:Name Key="BBB_XCV_RAC">Is the revocation acceptance check conclusive?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
>                         <ns3:AdditionalInfo>Id = R-E115453F82792FD0FE30976BFE2696B4EE652B36DD96C25B84A7C452B7EF136B, thisUpdate = 2024-08-26 09:30, production time = 2024-08-26 09:30</ns3:AdditionalInfo>
>                     </ns3:Constraint>
>                     <ns3:Constraint>
>                         <ns3:Name Key="PSV_IPCRIAIDBEDC">Is there a POE for the revocation data issuer within its validity range?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
>                         <ns3:AdditionalInfo>Certificate Id = C-BDA3808DF76A9BB9A1109ECE8806AAAA76DA79D40A14C45008CA03946E36995B</ns3:AdditionalInfo>
>                     </ns3:Constraint>
>                     <ns3:Constraint Id="R-0103EB144906A71389D1EE770A15DA3D0396DA6B5E791B04323AD7DA2A246515" BlockType="REV_BBB">
>                         <ns3:Name Key="ADEST_RORPIIC">Is the result of the revocation data basic validation process acceptable?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
>                         <ns3:AdditionalInfo>Id = R-0103EB144906A71389D1EE770A15DA3D0396DA6B5E791B04323AD7DA2A246515</ns3:AdditionalInfo>
>                     </ns3:Constraint>
>                     <ns3:Constraint Id="R-0103EB144906A71389D1EE770A15DA3D0396DA6B5E791B04323AD7DA2A246515" BlockType="RAC">
>                         <ns3:Name Key="BBB_XCV_RAC">Is the revocation acceptance check conclusive?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
>                         <ns3:AdditionalInfo>Id = R-0103EB144906A71389D1EE770A15DA3D0396DA6B5E791B04323AD7DA2A246515, thisUpdate = 2024-05-17 14:10, production time = 2024-05-17 14:10</ns3:AdditionalInfo>
>                     </ns3:Constraint>
>                     <ns3:Constraint>
>                         <ns3:Name Key="PSV_IPCRIAIDBEDC">Is there a POE for the revocation data issuer within its validity range?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
>                         <ns3:AdditionalInfo>Certificate Id = C-BDA3808DF76A9BB9A1109ECE8806AAAA76DA79D40A14C45008CA03946E36995B</ns3:AdditionalInfo>
>                     </ns3:Constraint>
>                     <ns3:Constraint>
>                         <ns3:Name Key="BBB_XCV_IARDPFC">Is an acceptable revocation data present for the certificate?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
>                         <ns3:AdditionalInfo>Acceptable revocation data : [R-E115453F82792FD0FE30976BFE2696B4EE652B36DD96C25B84A7C452B7EF136B, R-0103EB144906A71389D1EE770A15DA3D0396DA6B5E791B04323AD7DA2A246515]</ns3:AdditionalInfo>
>                     </ns3:Constraint>
>                     <ns3:Conclusion>
>                         <ns3:Indication>PASSED</ns3:Indication>
>                     </ns3:Conclusion>
>                     <ns3:AcceptableRevocationId>R-E115453F82792FD0FE30976BFE2696B4EE652B36DD96C25B84A7C452B7EF136B R-0103EB144906A71389D1EE770A15DA3D0396DA6B5E791B04323AD7DA2A246515</ns3:AcceptableRevocationId>
>                 </ns3:PSV_CRS>
>                 <ns3:PCV Title="Past Certificate Validation">
>                     <ns3:Constraint>
>                         <ns3:Name Key="BBB_XCV_CCCBB">Can the certificate chain be built till a trust anchor?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
>                     </ns3:Constraint>
>                     <ns3:Constraint Id="S-484F543E355A6ABB75D636043738B56E8AFAD5B1460E40FA919467A18DA287C0" BlockType="VTS">
>                         <ns3:Name Key="PCV_IVTSC">Is the validation time sliding process conclusive?</ns3:Name>
>                         <ns3:Status>NOT OK</ns3:Status>
>                         <ns3:Error Key="PCV_IVTSC_ANS">Validation time sliding process is not conclusive!</ns3:Error>
>                     </ns3:Constraint>
>                     <ns3:Conclusion>
>                         <ns3:Indication>INDETERMINATE</ns3:Indication>
>                         <ns3:SubIndication>NO_POE</ns3:SubIndication>
>                         <ns3:Errors Key="PCV_IVTSC_ANS">Validation time sliding process is not conclusive!</ns3:Errors>
>                     </ns3:Conclusion>
>                 </ns3:PCV>
>                 <ns3:VTS Title="Validation Time Sliding">
>                     <ns3:Constraint Id="C-4A0E0F30FA2D188690F9C75253A017195F2163E45C090CF5D2B73C62C449A782" BlockType="CRS">
>                         <ns3:Name Key="BBB_VTS_IRDPFC">Is there a satisfying revocation status information?</ns3:Name>
>                         <ns3:Status>OK</ns3:Status>
>                         <ns3:AdditionalInfo>Revocation data : R-76CC4618881E15321FE529A36605E33FB6B9402B9B7C325552CCECC876EFB9F6 for certificate C-4A0E0F30FA2D188690F9C75253A017195F2163E45C090CF5D2B73C62C449A782 with POE at control time 2024-08-26 09:30</ns3:AdditionalInfo>
>                     </ns3:Constraint>
>                     <ns3:Constraint Id="C-72D556BE570C0C404B1D0786D1A15DAC687269280EB3D0ED49B1E12A74EEB8E9" BlockType="CRS">
>                         <ns3:Name Key="BBB_VTS_IRDPFC">Is there a satisfying revocation status information?</ns3:Name>
>                         <ns3:Status>NOT OK</ns3:Status>
>                         <ns3:Error Key="BBB_VTS_IRDPFC_ANS">No satisfying revocation status information found for the certificate!</ns3:Error>
>                         <ns3:AdditionalInfo>No satisfying revocation data found for certificate C-72D556BE570C0C404B1D0786D1A15DAC687269280EB3D0ED49B1E12A74EEB8E9 with POE at control time 2008-12-31 23:00</ns3:AdditionalInfo>
>                     </ns3:Constraint>
>                     <ns3:Conclusion>
>                         <ns3:Indication>INDETERMINATE</ns3:Indication>
>                         <ns3:SubIndication>NO_POE</ns3:SubIndication>
>                         <ns3:Errors Key="BBB_XCV_IARDPFC_ANS">No acceptable revocation data for the certificate!</ns3:Errors>
>                         <ns3:Errors Key="BBB_XCV_SUB_ANS">The certificate validation is not conclusive!</ns3:Errors>
>                         <ns3:Errors Key="ASCCM_AR_ANS_ANR">The algorithm SHA1 is no longer considered reliable for revocation data's certificate chain!</ns3:Errors>
>                         <ns3:Errors Key="BBB_XCV_SUB_ANS">The certificate validation is not conclusive!</ns3:Errors>
>                         <ns3:Errors Key="ASCCM_AR_ANS_ANR">The algorithm SHA1 is no longer considered reliable for revocation data's certificate chain!</ns3:Errors>
>                     </ns3:Conclusion>
>                     <ns3:ControlTime>2008-12-31T23:00:00Z</ns3:ControlTime>
>                     <ns3:CRS Id="C-4A0E0F30FA2D188690F9C75253A017195F2163E45C090CF5D2B73C62C449A782" LatestAcceptableRevocationId="R-76CC4618881E15321FE529A36605E33FB6B9402B9B7C325552CCECC876EFB9F6" Title="Validation Time Sliding Revocation Data Selector">
>                         <ns3:Constraint Id="R-76CC4618881E15321FE529A36605E33FB6B9402B9B7C325552CCECC876EFB9F6" BlockType="REV_BBB">
>                             <ns3:Name Key="ADEST_RORPIIC">Is the result of the revocation data basic validation process acceptable?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                             <ns3:AdditionalInfo>Id = R-76CC4618881E15321FE529A36605E33FB6B9402B9B7C325552CCECC876EFB9F6</ns3:AdditionalInfo>
>                         </ns3:Constraint>
>                         <ns3:Constraint Id="R-76CC4618881E15321FE529A36605E33FB6B9402B9B7C325552CCECC876EFB9F6" BlockType="RAC">
>                             <ns3:Name Key="BBB_XCV_RAC">Is the revocation acceptance check conclusive?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                             <ns3:AdditionalInfo>Id = R-76CC4618881E15321FE529A36605E33FB6B9402B9B7C325552CCECC876EFB9F6, thisUpdate = 2024-07-01 11:00, production time = 2024-07-01 11:00</ns3:AdditionalInfo>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="PSV_HRDBIBCT">Has the revocation data been issued before the control time?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                             <ns3:AdditionalInfo>Revocation data R-76CC4618881E15321FE529A36605E33FB6B9402B9B7C325552CCECC876EFB9F6 with thisUpdate time : 2024-07-01 11:00, control time : 2024-08-26 09:30</ns3:AdditionalInfo>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="PSV_ITPOCOBCT">Is there a POE of the certificate at (or before) control-time?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                             <ns3:AdditionalInfo>Token Id : C-4A0E0F30FA2D188690F9C75253A017195F2163E45C090CF5D2B73C62C449A782, control time : 2024-08-26 09:30</ns3:AdditionalInfo>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="PSV_ITPORDAOBCT">Is there a POE of the revocation data at (or before) control-time?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                             <ns3:AdditionalInfo>Token Id : R-76CC4618881E15321FE529A36605E33FB6B9402B9B7C325552CCECC876EFB9F6, control time : 2024-08-26 09:30</ns3:AdditionalInfo>
>                         </ns3:Constraint>
>                         <ns3:Constraint Id="R-5CF16ADCB17DF0C975EABDF239EC89476209DA1C9A7A860E79E6F3ADB1D0DDED" BlockType="REV_BBB">
>                             <ns3:Name Key="ADEST_RORPIIC">Is the result of the revocation data basic validation process acceptable?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                             <ns3:AdditionalInfo>Id = R-5CF16ADCB17DF0C975EABDF239EC89476209DA1C9A7A860E79E6F3ADB1D0DDED</ns3:AdditionalInfo>
>                         </ns3:Constraint>
>                         <ns3:Constraint Id="R-5CF16ADCB17DF0C975EABDF239EC89476209DA1C9A7A860E79E6F3ADB1D0DDED" BlockType="RAC">
>                             <ns3:Name Key="BBB_XCV_RAC">Is the revocation acceptance check conclusive?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                             <ns3:AdditionalInfo>Id = R-5CF16ADCB17DF0C975EABDF239EC89476209DA1C9A7A860E79E6F3ADB1D0DDED, thisUpdate = 2024-01-01 11:00, production time = 2024-01-01 11:00</ns3:AdditionalInfo>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="PSV_HRDBIBCT">Has the revocation data been issued before the control time?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                             <ns3:AdditionalInfo>Revocation data R-5CF16ADCB17DF0C975EABDF239EC89476209DA1C9A7A860E79E6F3ADB1D0DDED with thisUpdate time : 2024-01-01 11:00, control time : 2024-08-26 09:30</ns3:AdditionalInfo>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="PSV_ITPOCOBCT">Is there a POE of the certificate at (or before) control-time?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                             <ns3:AdditionalInfo>Token Id : C-4A0E0F30FA2D188690F9C75253A017195F2163E45C090CF5D2B73C62C449A782, control time : 2024-08-26 09:30</ns3:AdditionalInfo>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="PSV_ITPORDAOBCT">Is there a POE of the revocation data at (or before) control-time?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                             <ns3:AdditionalInfo>Token Id : R-5CF16ADCB17DF0C975EABDF239EC89476209DA1C9A7A860E79E6F3ADB1D0DDED, control time : 2024-08-26 09:30</ns3:AdditionalInfo>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_IARDPFC">Is an acceptable revocation data present for the certificate?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                             <ns3:AdditionalInfo>Latest acceptable revocation : R-76CC4618881E15321FE529A36605E33FB6B9402B9B7C325552CCECC876EFB9F6</ns3:AdditionalInfo>
>                         </ns3:Constraint>
>                         <ns3:Conclusion>
>                             <ns3:Indication>PASSED</ns3:Indication>
>                         </ns3:Conclusion>
>                     </ns3:CRS>
>                     <ns3:CRS Id="C-72D556BE570C0C404B1D0786D1A15DAC687269280EB3D0ED49B1E12A74EEB8E9" Title="Validation Time Sliding Revocation Data Selector">
>                         <ns3:Constraint Id="R-E115453F82792FD0FE30976BFE2696B4EE652B36DD96C25B84A7C452B7EF136B" BlockType="REV_BBB">
>                             <ns3:Name Key="ADEST_RORPIIC">Is the result of the revocation data basic validation process acceptable?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                             <ns3:AdditionalInfo>Id = R-E115453F82792FD0FE30976BFE2696B4EE652B36DD96C25B84A7C452B7EF136B</ns3:AdditionalInfo>
>                         </ns3:Constraint>
>                         <ns3:Constraint Id="R-E115453F82792FD0FE30976BFE2696B4EE652B36DD96C25B84A7C452B7EF136B" BlockType="RAC">
>                             <ns3:Name Key="BBB_XCV_RAC">Is the revocation acceptance check conclusive?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                             <ns3:AdditionalInfo>Id = R-E115453F82792FD0FE30976BFE2696B4EE652B36DD96C25B84A7C452B7EF136B, thisUpdate = 2024-08-26 09:30, production time = 2024-08-26 09:30</ns3:AdditionalInfo>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="PSV_HRDBIBCT">Has the revocation data been issued before the control time?</ns3:Name>
>                             <ns3:Status>WARNING</ns3:Status>
>                             <ns3:Warning Key="PSV_HRDBIBCT_ANS">The revocation data has been issued at or after the control time!</ns3:Warning>
>                             <ns3:AdditionalInfo>Revocation data R-E115453F82792FD0FE30976BFE2696B4EE652B36DD96C25B84A7C452B7EF136B with thisUpdate time : 2024-08-26 09:30, control time : 2008-12-31 23:00</ns3:AdditionalInfo>
>                         </ns3:Constraint>
>                         <ns3:Constraint Id="R-0103EB144906A71389D1EE770A15DA3D0396DA6B5E791B04323AD7DA2A246515" BlockType="REV_BBB">
>                             <ns3:Name Key="ADEST_RORPIIC">Is the result of the revocation data basic validation process acceptable?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                             <ns3:AdditionalInfo>Id = R-0103EB144906A71389D1EE770A15DA3D0396DA6B5E791B04323AD7DA2A246515</ns3:AdditionalInfo>
>                         </ns3:Constraint>
>                         <ns3:Constraint Id="R-0103EB144906A71389D1EE770A15DA3D0396DA6B5E791B04323AD7DA2A246515" BlockType="RAC">
>                             <ns3:Name Key="BBB_XCV_RAC">Is the revocation acceptance check conclusive?</ns3:Name>
>                             <ns3:Status>OK</ns3:Status>
>                             <ns3:AdditionalInfo>Id = R-0103EB144906A71389D1EE770A15DA3D0396DA6B5E791B04323AD7DA2A246515, thisUpdate = 2024-05-17 14:10, production time = 2024-05-17 14:10</ns3:AdditionalInfo>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="PSV_HRDBIBCT">Has the revocation data been issued before the control time?</ns3:Name>
>                             <ns3:Status>WARNING</ns3:Status>
>                             <ns3:Warning Key="PSV_HRDBIBCT_ANS">The revocation data has been issued at or after the control time!</ns3:Warning>
>                             <ns3:AdditionalInfo>Revocation data R-0103EB144906A71389D1EE770A15DA3D0396DA6B5E791B04323AD7DA2A246515 with thisUpdate time : 2024-05-17 14:10, control time : 2008-12-31 23:00</ns3:AdditionalInfo>
>                         </ns3:Constraint>
>                         <ns3:Constraint>
>                             <ns3:Name Key="BBB_XCV_IARDPFC">Is an acceptable revocation data present for the certificate?</ns3:Name>
>                             <ns3:Status>NOT OK</ns3:Status>
>                             <ns3:Error Key="BBB_XCV_IARDPFC_ANS">No acceptable revocation data for the certificate!</ns3:Error>
>                         </ns3:Constraint>
>                         <ns3:Conclusion>
>                             <ns3:Indication>INDETERMINATE</ns3:Indication>
>                             <ns3:SubIndication>NO_POE</ns3:SubIndication>
>                             <ns3:Errors Key="BBB_XCV_IARDPFC_ANS">No acceptable revocation data for the certificate!</ns3:Errors>
>                             <ns3:Errors Key="BBB_XCV_SUB_ANS">The certificate validation is not conclusive!</ns3:Errors>
>                             <ns3:Errors Key="ASCCM_AR_ANS_ANR">The algorithm SHA1 is no longer considered reliable for revocation data's certificate chain!</ns3:Errors>
>                             <ns3:Errors Key="BBB_XCV_SUB_ANS">The certificate validation is not conclusive!</ns3:Errors>
>                             <ns3:Errors Key="ASCCM_AR_ANS_ANR">The algorithm SHA1 is no longer considered reliable for revocation data's certificate chain!</ns3:Errors>
>                             <ns3:Warnings Key="PSV_HRDBIBCT_ANS">The revocation data has been issued at or after the control time!</ns3:Warnings>
>                             <ns3:Warnings Key="PSV_HRDBIBCT_ANS">The revocation data has been issued at or after the control time!</ns3:Warnings>
>                         </ns3:Conclusion>
>                     </ns3:CRS>
>                 </ns3:VTS>
7186c7714,7719
<                     <ns3:Indication>PASSED</ns3:Indication>
---
>                     <ns3:Indication>INDETERMINATE</ns3:Indication>
>                     <ns3:SubIndication>CRYPTO_CONSTRAINTS_FAILURE_NO_POE</ns3:SubIndication>
>                     <ns3:Errors Key="BBB_XCV_SUB_ANS">The certificate validation is not conclusive!</ns3:Errors>
>                     <ns3:Errors Key="ASCCM_AR_ANS_ANR">The algorithm SHA1 is no longer considered reliable for signature's certificate chain!</ns3:Errors>
>                     <ns3:Errors Key="ASCCM_AR_ANS_ANR">The algorithm SHA1 is no longer considered reliable for signature's certificate chain!</ns3:Errors>
>                     <ns3:Errors Key="PSV_IPCVA_ANS">The past certificate validation is not conclusive!</ns3:Errors>
7253c7786
<         <validationReportDataHandler>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9InllcyI/Pgo8VmFsaWRhdGlvblJlcG9ydCB4bWxucz0iaHR0cDovL3VyaS5ldHNpLm9yZy8xOTEwMi92MS40LjEjIiB4bWxuczpuczI9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiIHhtbG5zOm5zMz0iaHR0cDovL3VyaS5ldHNpLm9yZy8wMTkwMy92MS4zLjIjIiB4bWxuczpuczQ9Imh0dHA6Ly91cmkuZXRzaS5vcmcvMDIyMzEvdjIjIj4KICAgIDxTaWduYXR1cmVWYWxpZGF0aW9uUmVwb3J0PgogICAgICAgIDxTaWduYXR1cmVJZGVudGlmaWVyIGlkPSJTLTIxMjk2NDI3NTQ0RTk5QjAwMzcwQzMwNUVGOTRGOTkyQTBCNzJCQjI5QTM3NUM1MjVERTk4NTY2REY3RjFGMDQiPgogICAgICAgICAgICA8RGlnZXN0QWxnQW5kVmFsdWU+CiAgICAgICAgICAgICAgICA8bnMyOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiIvPgogICAgICAgICAgICAgICAgPG5zMjpEaWdlc3RWYWx1ZT5RbE85b08rYko0dmFvR0lhck1mc3NjTnl6YjlweEppNHhvTU9zaHp0YzgwPTwvbnMyOkRpZ2VzdFZhbHVlPgogICAgICAgICAgICA8L0RpZ2VzdEFsZ0FuZFZhbHVlPgogICAgICAgICAgICA8bnMyOlNpZ25hdHVyZVZhbHVlPkpnRENja3FtY3pOZnRGa1NwcTk5WnZtOHgzbWVzSEdJMUV3L0R0VGpUbDZLUSs5WlNLNENKdDVhOWFjUFUxVjRLMjBGSW13ZXF3VTFWY3ZTeGhBMVBCUXYya3BjU2YrMDA3b3VaTkVmbFlHQ3doclRMSFkzdGJHYnRNQndPaVdYWUtkVjN5cVBqR1ZLZUVqSytqK3UySmpZY09Jcm9SWTVlOUFsaG5XczVZeW1jSmFDcHBGek9EQ0Jld1VIdUdSOVQ3VWhZYjJYa2Z3ay9PckxXSnJTc2MxbEQwVDl3aDFKR3FTRlNCU25lZ0hYS3ZvNHhlK3VRQ3RXZU5DOWZ3UXFzdnliQ29sZTNPMG5jUTIvNG5leWhsYW9lQTR1M2kzM01iNS8xU3hMRTFHVGJHYmw3SmpZbGhhWnZoQitRQkIxdG1aZGVQUTZiTUZCMm9HbGdiOWY3Zz09PC9uczI6U2lnbmF0dXJlVmFsdWU+CiAgICAgICAgICAgIDxIYXNoT25seT5mYWxzZTwvSGFzaE9ubHk+CiAgICAgICAgICAgIDxEb2NIYXNoT25seT5mYWxzZTwvRG9jSGFzaE9ubHk+CiAgICAgICAgPC9TaWduYXR1cmVJZGVudGlmaWVyPgogICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludHNFdmFsdWF0aW9uUmVwb3J0PgogICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjpmb3JtYXRDaGVja2luZzwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czphcHBsaWVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICA8L0NvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICA8VmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8TWFpbkluZGljYXRpb24+dXJuOmV0c2k6MDE5MTAyOm1haW5pbmRpY2F0aW9uOnBhc3NlZDwvTWFpbkluZGljYXRpb24+CiAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+dXJuOmNlZjpkc3M6YmJiOmlkZW50aWZpY2F0aW9uT2ZUaGVTaWduaW5nQ2VydGlmaWNhdGU8L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDxTdGF0dXM+dXJuOmV0c2k6MDE5MTAyOmNvbnN0cmFpbnRTdGF0dXM6YXBwbGllZDwvU3RhdHVzPgogICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgPFZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPE1haW5JbmRpY2F0aW9uPnVybjpldHNpOjAxOTEwMjptYWluaW5kaWNhdGlvbjpwYXNzZWQ8L01haW5JbmRpY2F0aW9uPgogICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjp2YWxpZGF0aW9uQ29udGV4dEluaXRpYWxpemF0aW9uPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmFwcGxpZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDxNYWluSW5kaWNhdGlvbj51cm46ZXRzaTowMTkxMDI6bWFpbmluZGljYXRpb246cGFzc2VkPC9NYWluSW5kaWNhdGlvbj4KICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgPC9WYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj51cm46Y2VmOmRzczpiYmI6Y3J5cHRvZ3JhcGhpY1ZlcmlmaWNhdGlvbjwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czphcHBsaWVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICA8L0NvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICA8VmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8TWFpbkluZGljYXRpb24+dXJuOmV0c2k6MDE5MTAyOm1haW5pbmRpY2F0aW9uOnBhc3NlZDwvTWFpbkluZGljYXRpb24+CiAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+dXJuOmNlZjpkc3M6YmJiOnNpZ25hdHVyZUFjY2VwdGFuY2VWYWxpZGF0aW9uPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmFwcGxpZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDxNYWluSW5kaWNhdGlvbj51cm46ZXRzaTowMTkxMDI6bWFpbmluZGljYXRpb246cGFzc2VkPC9NYWluSW5kaWNhdGlvbj4KICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgPC9WYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj51cm46Y2VmOmRzczpiYmI6eDUwOUNlcnRpZmljYXRlVmFsaWRhdGlvbjwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czphcHBsaWVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICA8L0NvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICA8VmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8TWFpbkluZGljYXRpb24+dXJuOmV0c2k6MDE5MTAyOm1haW5pbmRpY2F0aW9uOmluZGV0ZXJtaW5hdGU8L01haW5JbmRpY2F0aW9uPgogICAgICAgICAgICAgICAgICAgIDxTdWJJbmRpY2F0aW9uPnVybjpldHNpOjAxOTEwMjpzdWJpbmRpY2F0aW9uOlRSWV9MQVRFUjwvU3ViSW5kaWNhdGlvbj4KICAgICAgICAgICAgICAgICAgICA8QXNzb2NpYXRlZFZhbGlkYXRpb25SZXBvcnREYXRhPgogICAgICAgICAgICAgICAgICAgICAgICA8QWRkaXRpb25hbFZhbGlkYXRpb25SZXBvcnREYXRhPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFJlcG9ydERhdGE+CjxUeXBlPnVybjpjZWY6ZHNzOm1lc3NhZ2U6ZXJyb3I8L1R5cGU+CjxWYWx1ZSB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4bWxuczp4cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhzaTp0eXBlPSJ4czpzdHJpbmciPlRoZSBjZXJ0aWZpY2F0ZSB2YWxpZGF0aW9uIGlzIG5vdCBjb25jbHVzaXZlITwvVmFsdWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1JlcG9ydERhdGE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UmVwb3J0RGF0YT4KPFR5cGU+dXJuOmNlZjpkc3M6bWVzc2FnZTplcnJvcjwvVHlwZT4KPFZhbHVlIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeHNpOnR5cGU9InhzOnN0cmluZyI+VGhlIHJldm9jYXRpb24gc3RhdHVzIGluZm9ybWF0aW9uIGlzIG5vdCBjb25zaWRlcmVkIGFzICdmcmVzaCcuPC9WYWx1ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvUmVwb3J0RGF0YT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9BZGRpdGlvbmFsVmFsaWRhdGlvblJlcG9ydERhdGE+CiAgICAgICAgICAgICAgICAgICAgPC9Bc3NvY2lhdGVkVmFsaWRhdGlvblJlcG9ydERhdGE+CiAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+dXJuOmNlZjpkc3M6YmJiOnBhc3RTaWduYXR1cmVWYWxpZGF0aW9uPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmRpc2FibGVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICA8L0NvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+dXJuOmNlZjpkc3M6YmJiOnBhc3RDZXJ0aWZpY2F0ZVZhbGlkYXRpb248L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDxTdGF0dXM+dXJuOmV0c2k6MDE5MTAyOmNvbnN0cmFpbnRTdGF0dXM6ZGlzYWJsZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgPC9WYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj51cm46Y2VmOmRzczpiYmI6dmFsaWRhdGlvblRpbWVTbGlkaW5nPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmRpc2FibGVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICA8L0NvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgPC9WYWxpZGF0aW9uQ29uc3RyYWludHNFdmFsdWF0aW9uUmVwb3J0PgogICAgICAgIDxWYWxpZGF0aW9uVGltZUluZm8+CiAgICAgICAgICAgIDxWYWxpZGF0aW9uVGltZT4yMDI0LTA4LTI2VDA5OjMwOjUwWjwvVmFsaWRhdGlvblRpbWU+CiAgICAgICAgICAgIDxCZXN0U2lnbmF0dXJlVGltZT4KICAgICAgICAgICAgICAgIDxQT0VUaW1lPjIwMjMtMDQtMThUMDY6Mjc6MDJaPC9QT0VUaW1lPgogICAgICAgICAgICAgICAgPFR5cGVPZlByb29mPnVybjpldHNpOjAxOTEwMjpwb2V0eXBlOnZhbGlkYXRpb248L1R5cGVPZlByb29mPgogICAgICAgICAgICAgICAgPFBPRU9iamVjdCBWT1JlZmVyZW5jZT0iVC01OTg3MjY4NEY4QUYyOEVFMDZEMkYxRTBBNkQ5OTM5RTM0N0I3RjkwMjlEMTYzQURCQkYwRjIxM0RFQ0RBMDQ2Ii8+CiAgICAgICAgICAgIDwvQmVzdFNpZ25hdHVyZVRpbWU+CiAgICAgICAgPC9WYWxpZGF0aW9uVGltZUluZm8+CiAgICAgICAgPFNpZ25lcnNEb2N1bWVudD4KICAgICAgICAgICAgPERpZ2VzdEFsZ0FuZFZhbHVlPgogICAgICAgICAgICAgICAgPG5zMjpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNzaGEyNTYiLz4KICAgICAgICAgICAgICAgIDxuczI6RGlnZXN0VmFsdWU+RHZxSDJueHF0TkQ3elFwMlozRklWczFPdC96UCt2MmppNlNiUlQ0MXNmUT08L25zMjpEaWdlc3RWYWx1ZT4KICAgICAgICAgICAgPC9EaWdlc3RBbGdBbmRWYWx1ZT4KICAgICAgICAgICAgPFNpZ25lcnNEb2N1bWVudFJlcHJlc2VudGF0aW9uIFZPUmVmZXJlbmNlPSJELUJCQTQ4NTU0QkNENEM5QkQwQzVFNDBERUJGNDc3Qzk1REFBMzdFNkMyOTUxNkVBOUU3RjVBNEJBNUQ0QjE4MzQiLz4KICAgICAgICA8L1NpZ25lcnNEb2N1bWVudD4KICAgICAgICA8U2lnbmF0dXJlQXR0cmlidXRlcz4KICAgICAgICAgICAgPFNpZ25pbmdUaW1lIFNpZ25lZD0idHJ1ZSI+CiAgICAgICAgICAgICAgICA8VGltZT4yMDIzLTA0LTE4VDA2OjI3OjAxWjwvVGltZT4KICAgICAgICAgICAgPC9TaWduaW5nVGltZT4KICAgICAgICAgICAgPFNpZ25pbmdDZXJ0aWZpY2F0ZSBTaWduZWQ9InRydWUiPgogICAgICAgICAgICAgICAgPEF0dHJpYnV0ZU9iamVjdCBWT1JlZmVyZW5jZT0iQy1GNDQwNkY5MzIwOEVFNzM4MDhFMTdFNEE5RTFDNDg3N0IwOTMwRUE4MTI3RTU5QTFGQ0QyNDU3RTZDMThGRkE4Ii8+CiAgICAgICAgICAgIDwvU2lnbmluZ0NlcnRpZmljYXRlPgogICAgICAgICAgICA8RGF0YU9iamVjdEZvcm1hdCBTaWduZWQ9InRydWUiPgogICAgICAgICAgICAgICAgPENvbnRlbnRUeXBlPjEuMi44NDAuMTEzNTQ5LjEuNy4xPC9Db250ZW50VHlwZT4KICAgICAgICAgICAgPC9EYXRhT2JqZWN0Rm9ybWF0PgogICAgICAgICAgICA8U2lnbmF0dXJlVGltZVN0YW1wPgogICAgICAgICAgICAgICAgPEF0dHJpYnV0ZU9iamVjdCBWT1JlZmVyZW5jZT0iVC01OTg3MjY4NEY4QUYyOEVFMDZEMkYxRTBBNkQ5OTM5RTM0N0I3RjkwMjlEMTYzQURCQkYwRjIxM0RFQ0RBMDQ2Ii8+CiAgICAgICAgICAgICAgICA8VGltZVN0YW1wVmFsdWU+MjAyMy0wNC0xOFQwNjoyNzowMlo8L1RpbWVTdGFtcFZhbHVlPgogICAgICAgICAgICA8L1NpZ25hdHVyZVRpbWVTdGFtcD4KICAgICAgICAgICAgPE1lc3NhZ2VEaWdlc3QgU2lnbmVkPSJ0cnVlIj4KICAgICAgICAgICAgICAgIDxEaWdlc3Q+UnAvTVVxNUdJd0ZLd1V5SkZSVTRtSTVJaldxVFROTjlWSzIvbnVraTJtTT08L0RpZ2VzdD4KICAgICAgICAgICAgPC9NZXNzYWdlRGlnZXN0PgogICAgICAgICAgICA8RFNTPgogICAgICAgICAgICAgICAgPENlcnRzIFZPUmVmZXJlbmNlPSJDLUU2OUEzMkVBNzA3QzcxQzE2MzNGN0M5Q0JGQzYwRjkwMkM1MDA4MUQ5NzQ3MzE2M0VCRjcwOThENURGMzZGMzAgQy0xMDcyNkY5MDRENkU1MzRFMTYxRjg1MkU5NTBDOEY5MjY1RTgxMjVCNzgyMTlBMzE4NjAxQTE0OEYxMDk2MDQ0IEMtRjQ0MDZGOTMyMDhFRTczODA4RTE3RTRBOUUxQzQ4NzdCMDkzMEVBODEyN0U1OUExRkNEMjQ1N0U2QzE4RkZBOCBDLTlCODI3OTA0RjREQkEwQ0MyNjU2RkRGMDU0OTgyODYzNzEzRDZFQjEwNTYxMkU5OEU2REExQTFDRUU1NTIyNkIgQy1FM0I2QTJEQjJFRDdDRTQ4ODQyRjdBQzUzMjQxQzdCNzFENTQxNDRCRkI0MEMxMUYzRjFEMEI0MkY1RUVBMTJEIEMtRUJCRjREQzYwMEMxN0RBMDQzODFERUZEQ0ZDMTE5QzNGMzRFRkI0QTA0RDA4NjA5MTBCODEzQzc3OTJENzU4NSBDLTcyRDU1NkJFNTcwQzBDNDA0QjFEMDc4NkQxQTE1REFDNjg3MjY5MjgwRUIzRDBFRDQ5QjFFMTJBNzRFRUI4RTkgQy0xQ0MzNThBNkRGQTBBNzZCQjU0NzA2NjBENzhGM0IyNUYyM0NDRDYzOTU2NjdFNDlDQ0ZDODIwMURBM0QxOTJEIEMtNUU3MEIxNkI1MjE1ODc0MzJDMTRBNzJCMUZDQ0I3ODM0QzQ4OUEwQzg4M0M0MzYwNTU1QTlCREJGMzQzMkQ0MCBDLUJEQTM4MDhERjc2QTlCQjlBMTEwOUVDRTg4MDZBQUFBNzZEQTc5RDQwQTE0QzQ1MDA4Q0EwMzk0NkUzNjk5NUIgQy1GOEE2MDBFQzBBREI1RkE0RkJDMTI0MDMzMERFNzcwQTY4QUM4RTEzNzhFMUEwMTQxQjhBMDE1RjdGOTYyMDZFIEMtNTRFQkQ0NDVCRTU4NzA3Qjc3QURFMjlGMDFGNTQxMEEzQjQwQTFGOTVEOTcwRDAyMUE2Q0REMkUxQUNCMTIyQyBDLTlDODcyQkM5NzlBN0MwOUE1OEQ0QTI3NEMxOTlFNUNCMTZDRkE5Qjk2MThEOThCQzlBOTk4OEU5ODRCODQ5NUMgQy0wOUY4Q0U0NDZFQzJCMzQ4MjBBRUFGOUEzOTI0OUZDNjc2N0E1NjFFMTgxOTZCQ0M0RTRENUEzMDYxMjM2NzQ0IEMtQThEMTRFOTQ1RTNFNTE1NkJDQUU1RTM5NzM3Q0Y2QTFCMUY1MTAyOEJCQkY5ODJGNTBDRTVGNEMwNTU2OEI0RCBDLTRBMEUwRjMwRkEyRDE4ODY5MEY5Qzc1MjUzQTAxNzE5NUYyMTYzRTQ1QzA5MENGNUQyQjczQzYyQzQ0OUE3ODIgQy1GN0Q2NkJGODE1ODUyMUY3MDQ5OTQzMDQzNEQyMDdGMzZEQTRFNzgwNTlCRTMwMkNFREM1MDg5NUEyNDVBNDEzIi8+CiAgICAgICAgICAgICAgICA8Q1JMcyBWT1JlZmVyZW5jZT0iUi01Q0YxNkFEQ0IxN0RGMEM5NzVFQUJERjIzOUVDODk0NzYyMDlEQTFDOUE3QTg2MEU3OUU2RjNBREIxRDBEREVEIi8+CiAgICAgICAgICAgICAgICA8T0NTUHMgVk9SZWZlcmVuY2U9IlItRTE5MzlBMzFBRjg3MkVEMUE1RkVBQ0Y4RDFERTVCM0M5QjNDRkRBNjRGNUI1QkQzMDVFOThBNjQ4ODgyMEYxMyBSLTI0QjczOTg5QjgzMEZFRkY0RDE2MDYwODAzNjI1Q0UyQzUyNzVDOTc5MkQ1ODAzOEYwNEI5MzE0OTI3RjcxM0EgUi05MDhGMkIxOTFEOTYzQzU1OTFEQ0QwNDBDNTI4RjlDOEYyNjQ1NjY2M0ZGNzIwRjk5QkUwRUI5ODA0RURGNTlEIFItMDEwM0VCMTQ0OTA2QTcxMzg5RDFFRTc3MEExNURBM0QwMzk2REE2QjVFNzkxQjA0MzIzQUQ3REEyQTI0NjUxNSBSLTExRTY1NEUxNEY1QkRGMEY4NzU3NEQyQTQ5ODE5NzkzMTY1MjE2RDI5MTY0Rjk2MDBDQjRDMTgyNzVERTQ4NUIiLz4KICAgICAgICAgICAgPC9EU1M+CiAgICAgICAgICAgIDxEb2NUaW1lU3RhbXA+CiAgICAgICAgICAgICAgICA8QXR0cmlidXRlT2JqZWN0IFZPUmVmZXJlbmNlPSJULTlBRDdGNUFCNUU1Njg2MTk1OTJDRUU4QUY0NjZFODZBNEM3OTZGNkUyMzg4NTVCRTI5MDRDOTUzNjA2N0NBNDEiLz4KICAgICAgICAgICAgICAgIDxUaW1lU3RhbXBWYWx1ZT4yMDIzLTA0LTE4VDA2OjI3OjAzWjwvVGltZVN0YW1wVmFsdWU+CiAgICAgICAgICAgIDwvRG9jVGltZVN0YW1wPgogICAgICAgICAgICA8RG9jVGltZVN0YW1wPgogICAgICAgICAgICAgICAgPEF0dHJpYnV0ZU9iamVjdCBWT1JlZmVyZW5jZT0iVC1ENTJFNzg2RTIxNUQ1MkRGNDU3MDNCOTEzNkUxMzgxQUY3QTIyNUNDMUVGMTRGNjJGMUZGODgwNzFFQjU1MkI0Ii8+CiAgICAgICAgICAgICAgICA8VGltZVN0YW1wVmFsdWU+MjAyNC0wNS0xN1QxNDoxMToxMlo8L1RpbWVTdGFtcFZhbHVlPgogICAgICAgICAgICA8L0RvY1RpbWVTdGFtcD4KICAgICAgICAgICAgPFN1YkZpbHRlcj4KICAgICAgICAgICAgICAgIDxTdWJGaWx0ZXJFbGVtZW50PkVUU0kuQ0FkRVMuZGV0YWNoZWQ8L1N1YkZpbHRlckVsZW1lbnQ+CiAgICAgICAgICAgIDwvU3ViRmlsdGVyPgogICAgICAgICAgICA8Qnl0ZVJhbmdlPjAgMTU2ODA5MyAxNjI4OTk1IDEzMjM8L0J5dGVSYW5nZT4KICAgICAgICAgICAgPEZpbHRlcj4KICAgICAgICAgICAgICAgIDxGaWx0ZXI+QWRvYmUuUFBLTGl0ZTwvRmlsdGVyPgogICAgICAgICAgICA8L0ZpbHRlcj4KICAgICAgICA8L1NpZ25hdHVyZUF0dHJpYnV0ZXM+CiAgICAgICAgPFNpZ25lckluZm9ybWF0aW9uIFBzZXVkb255bT0iZmFsc2UiPgogICAgICAgICAgICA8U2lnbmVyQ2VydGlmaWNhdGUgVk9SZWZlcmVuY2U9IkMtRjQ0MDZGOTMyMDhFRTczODA4RTE3RTRBOUUxQzQ4NzdCMDkzMEVBODEyN0U1OUExRkNEMjQ1N0U2QzE4RkZBOCIvPgogICAgICAgICAgICA8U2lnbmVyPkNPTk5FQ1RJVkUgTlYgLSBDb25uZWN0aXZlIGVTaWduYXR1cmVzPC9TaWduZXI+CiAgICAgICAgPC9TaWduZXJJbmZvcm1hdGlvbj4KICAgICAgICA8U2lnbmF0dXJlUXVhbGl0eT4KICAgICAgICAgICAgPFNpZ25hdHVyZVF1YWxpdHlJbmZvcm1hdGlvbj51cm46Y2VmOmRzczpzaWduYXR1cmVRdWFsaWZpY2F0aW9uOlVua25vd248L1NpZ25hdHVyZVF1YWxpdHlJbmZvcm1hdGlvbj4KICAgICAgICA8L1NpZ25hdHVyZVF1YWxpdHk+CiAgICAgICAgPFNpZ25hdHVyZVZhbGlkYXRpb25Qcm9jZXNzPgogICAgICAgICAgICA8U2lnbmF0dXJlVmFsaWRhdGlvblByb2Nlc3NJRD51cm46ZXRzaTowMTkxMDI6dmFsaWRhdGlvbnByb2Nlc3M6TFRBPC9TaWduYXR1cmVWYWxpZGF0aW9uUHJvY2Vzc0lEPgogICAgICAgIDwvU2lnbmF0dXJlVmFsaWRhdGlvblByb2Nlc3M+CiAgICAgICAgPFNpZ25hdHVyZVZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgIDxNYWluSW5kaWNhdGlvbj51cm46ZXRzaTowMTkxMDI6bWFpbmluZGljYXRpb246dG90YWwtcGFzc2VkPC9NYWluSW5kaWNhdGlvbj4KICAgICAgICAgICAgPEFzc29jaWF0ZWRWYWxpZGF0aW9uUmVwb3J0RGF0YT4KICAgICAgICAgICAgICAgIDxUcnVzdEFuY2hvciBWT1JlZmVyZW5jZT0iQy0xQ0MzNThBNkRGQTBBNzZCQjU0NzA2NjBENzhGM0IyNUYyM0NDRDYzOTU2NjdFNDlDQ0ZDODIwMURBM0QxOTJEIi8+CiAgICAgICAgICAgICAgICA8Q2VydGlmaWNhdGVDaGFpbj4KICAgICAgICAgICAgICAgICAgICA8U2lnbmluZ0NlcnRpZmljYXRlIFZPUmVmZXJlbmNlPSJDLUY0NDA2RjkzMjA4RUU3MzgwOEUxN0U0QTlFMUM0ODc3QjA5MzBFQTgxMjdFNTlBMUZDRDI0NTdFNkMxOEZGQTgiLz4KICAgICAgICAgICAgICAgICAgICA8VHJ1c3RBbmNob3IgVk9SZWZlcmVuY2U9IkMtMUNDMzU4QTZERkEwQTc2QkI1NDcwNjYwRDc4RjNCMjVGMjNDQ0Q2Mzk1NjY3RTQ5Q0NGQzgyMDFEQTNEMTkyRCIvPgogICAgICAgICAgICAgICAgPC9DZXJ0aWZpY2F0ZUNoYWluPgogICAgICAgICAgICAgICAgPENyeXB0b0luZm9ybWF0aW9uPgogICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0SWQgVk9SZWZlcmVuY2U9IlMtMjEyOTY0Mjc1NDRFOTlCMDAzNzBDMzA1RUY5NEY5OTJBMEI3MkJCMjlBMzc1QzUyNURFOTg1NjZERjdGMUYwNCIvPgogICAgICAgICAgICAgICAgICAgIDxBbGdvcml0aG0+aHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxkc2lnLW1vcmUjcnNhLXNoYTI1NjwvQWxnb3JpdGhtPgogICAgICAgICAgICAgICAgICAgIDxTZWN1cmVBbGdvcml0aG0+dHJ1ZTwvU2VjdXJlQWxnb3JpdGhtPgogICAgICAgICAgICAgICAgICAgIDxOb3RBZnRlcj4yMDI1LTEyLTMxVDIzOjAwOjAwWjwvTm90QWZ0ZXI+CiAgICAgICAgICAgICAgICA8L0NyeXB0b0luZm9ybWF0aW9uPgogICAgICAgICAgICA8L0Fzc29jaWF0ZWRWYWxpZGF0aW9uUmVwb3J0RGF0YT4KICAgICAgICA8L1NpZ25hdHVyZVZhbGlkYXRpb25TdGF0dXM+CiAgICA8L1NpZ25hdHVyZVZhbGlkYXRpb25SZXBvcnQ+CiAgICA8U2lnbmF0dXJlVmFsaWRhdGlvblJlcG9ydD4KICAgICAgICA8U2lnbmF0dXJlSWRlbnRpZmllciBpZD0iUy00ODRGNTQzRTM1NUE2QUJCNzVENjM2MDQzNzM4QjU2RThBRkFENUIxNDYwRTQwRkE5MTk0NjdBMThEQTI4N0MwIj4KICAgICAgICAgICAgPERpZ2VzdEFsZ0FuZFZhbHVlPgogICAgICAgICAgICAgICAgPG5zMjpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNzaGEyNTYiLz4KICAgICAgICAgICAgICAgIDxuczI6RGlnZXN0VmFsdWU+a0d6T3k5WFliczJXcXVkM1RRd1VXaFNZTzQySW13Z1d2T1BiN2t4b0haTT08L25zMjpEaWdlc3RWYWx1ZT4KICAgICAgICAgICAgPC9EaWdlc3RBbGdBbmRWYWx1ZT4KICAgICAgICAgICAgPG5zMjpTaWduYXR1cmVWYWx1ZT54UnlPNlo0cHFLaEw1dFVzTWVCUEhlcVE5ZW5HSmhnSW9jeUFTSWRUd0lBUi95c3d6WFdSQ2YyV01ZMG1aSWVFbW90anRlTUltYWV4ZXV0OWVBd1UxSm1Bb3ZZTkx4NTA4bEtmWUNEamRjd0JTTTVaSnBPbzZoVkcvTUZnVnJheFpCQjJxZExIQ3N0ZUJ5YTNHQURMTE5Ib05VUURxelRRMXUvRnJwR3gvbTJaUnFjSlJURGp3V1EzQ1NCTHNpZ3Q0Uy96UnJ6Wk54czZnc3hGWEhYV09rWk1oSDFybXlwZHp1R0puQlBCblc0cWlHMlE1MjJvUEFIS3I0Nlc3SjVzTGYrL2t5eWVMck05NXlpaDR2a1loQk0rVGlnVG43dVBSMlVkekw2SXM4ZDZVdlZJT1kvM3ZWUHFlaWhOcmtQM0lKUTY0c1FwbGE4T21KOWpzbEFqMFE9PTwvbnMyOlNpZ25hdHVyZVZhbHVlPgogICAgICAgICAgICA8SGFzaE9ubHk+ZmFsc2U8L0hhc2hPbmx5PgogICAgICAgICAgICA8RG9jSGFzaE9ubHk+ZmFsc2U8L0RvY0hhc2hPbmx5PgogICAgICAgIDwvU2lnbmF0dXJlSWRlbnRpZmllcj4KICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRzRXZhbHVhdGlvblJlcG9ydD4KICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj51cm46Y2VmOmRzczpiYmI6Zm9ybWF0Q2hlY2tpbmc8L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDxTdGF0dXM+dXJuOmV0c2k6MDE5MTAyOmNvbnN0cmFpbnRTdGF0dXM6YXBwbGllZDwvU3RhdHVzPgogICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgPFZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPE1haW5JbmRpY2F0aW9uPnVybjpldHNpOjAxOTEwMjptYWluaW5kaWNhdGlvbjpwYXNzZWQ8L01haW5JbmRpY2F0aW9uPgogICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjppZGVudGlmaWNhdGlvbk9mVGhlU2lnbmluZ0NlcnRpZmljYXRlPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmFwcGxpZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDxNYWluSW5kaWNhdGlvbj51cm46ZXRzaTowMTkxMDI6bWFpbmluZGljYXRpb246cGFzc2VkPC9NYWluSW5kaWNhdGlvbj4KICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgPC9WYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj51cm46Y2VmOmRzczpiYmI6dmFsaWRhdGlvbkNvbnRleHRJbml0aWFsaXphdGlvbjwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czphcHBsaWVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICA8L0NvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICA8VmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8TWFpbkluZGljYXRpb24+dXJuOmV0c2k6MDE5MTAyOm1haW5pbmRpY2F0aW9uOnBhc3NlZDwvTWFpbkluZGljYXRpb24+CiAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+dXJuOmNlZjpkc3M6YmJiOmNyeXB0b2dyYXBoaWNWZXJpZmljYXRpb248L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDxTdGF0dXM+dXJuOmV0c2k6MDE5MTAyOmNvbnN0cmFpbnRTdGF0dXM6YXBwbGllZDwvU3RhdHVzPgogICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgPFZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPE1haW5JbmRpY2F0aW9uPnVybjpldHNpOjAxOTEwMjptYWluaW5kaWNhdGlvbjpwYXNzZWQ8L01haW5JbmRpY2F0aW9uPgogICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjpzaWduYXR1cmVBY2NlcHRhbmNlVmFsaWRhdGlvbjwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czphcHBsaWVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICA8L0NvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICA8VmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8TWFpbkluZGljYXRpb24+dXJuOmV0c2k6MDE5MTAyOm1haW5pbmRpY2F0aW9uOnBhc3NlZDwvTWFpbkluZGljYXRpb24+CiAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+dXJuOmNlZjpkc3M6YmJiOng1MDlDZXJ0aWZpY2F0ZVZhbGlkYXRpb248L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDxTdGF0dXM+dXJuOmV0c2k6MDE5MTAyOmNvbnN0cmFpbnRTdGF0dXM6YXBwbGllZDwvU3RhdHVzPgogICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgPFZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPE1haW5JbmRpY2F0aW9uPnVybjpldHNpOjAxOTEwMjptYWluaW5kaWNhdGlvbjpwYXNzZWQ8L01haW5JbmRpY2F0aW9uPgogICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjpwYXN0U2lnbmF0dXJlVmFsaWRhdGlvbjwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czpkaXNhYmxlZDwvU3RhdHVzPgogICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjpwYXN0Q2VydGlmaWNhdGVWYWxpZGF0aW9uPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmRpc2FibGVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICA8L0NvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+dXJuOmNlZjpkc3M6YmJiOnZhbGlkYXRpb25UaW1lU2xpZGluZzwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czpkaXNhYmxlZDwvU3RhdHVzPgogICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnRzRXZhbHVhdGlvblJlcG9ydD4KICAgICAgICA8VmFsaWRhdGlvblRpbWVJbmZvPgogICAgICAgICAgICA8VmFsaWRhdGlvblRpbWU+MjAyNC0wOC0yNlQwOTozMDo1MFo8L1ZhbGlkYXRpb25UaW1lPgogICAgICAgICAgICA8QmVzdFNpZ25hdHVyZVRpbWU+CiAgICAgICAgICAgICAgICA8UE9FVGltZT4yMDI0LTA1LTE3VDE0OjExOjExWjwvUE9FVGltZT4KICAgICAgICAgICAgICAgIDxUeXBlT2ZQcm9vZj51cm46ZXRzaTowMTkxMDI6cG9ldHlwZTp2YWxpZGF0aW9uPC9UeXBlT2ZQcm9vZj4KICAgICAgICAgICAgICAgIDxQT0VPYmplY3QgVk9SZWZlcmVuY2U9IlQtMUNCQUY4QTBDRkRBMjdGQzU5RjA3NDkzRjIwOTg0RkU2MEMyOTZFMDdGNkVENkFDMkI0RDY5QkQzRTdEQkIxRCIvPgogICAgICAgICAgICA8L0Jlc3RTaWduYXR1cmVUaW1lPgogICAgICAgIDwvVmFsaWRhdGlvblRpbWVJbmZvPgogICAgICAgIDxTaWduZXJzRG9jdW1lbnQ+CiAgICAgICAgICAgIDxEaWdlc3RBbGdBbmRWYWx1ZT4KICAgICAgICAgICAgICAgIDxuczI6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8+CiAgICAgICAgICAgICAgICA8bnMyOkRpZ2VzdFZhbHVlPjVYeEhBZUptRHNLOHR6WGkySWVDMlVUYVQ3dUJ3Ylh1a1ZrL2QxejE3SG89PC9uczI6RGlnZXN0VmFsdWU+CiAgICAgICAgICAgIDwvRGlnZXN0QWxnQW5kVmFsdWU+CiAgICAgICAgICAgIDxTaWduZXJzRG9jdW1lbnRSZXByZXNlbnRhdGlvbiBWT1JlZmVyZW5jZT0iRC05QzA5MDcwMzc3M0NEQTc5QzQ0RTJCNUQzOUI0RkRDQ0VEM0YzNkMwMzRDMUY0REQ2Q0M2MzJBM0FBMEUxNUEzIi8+CiAgICAgICAgPC9TaWduZXJzRG9jdW1lbnQ+CiAgICAgICAgPFNpZ25hdHVyZUF0dHJpYnV0ZXM+CiAgICAgICAgICAgIDxTaWduaW5nVGltZSBTaWduZWQ9InRydWUiPgogICAgICAgICAgICAgICAgPFRpbWU+MjAyNC0wNS0xN1QxNDoxMDo1M1o8L1RpbWU+CiAgICAgICAgICAgIDwvU2lnbmluZ1RpbWU+CiAgICAgICAgICAgIDxTaWduaW5nQ2VydGlmaWNhdGUgU2lnbmVkPSJ0cnVlIj4KICAgICAgICAgICAgICAgIDxBdHRyaWJ1dGVPYmplY3QgVk9SZWZlcmVuY2U9IkMtNzJENTU2QkU1NzBDMEM0MDRCMUQwNzg2RDFBMTVEQUM2ODcyNjkyODBFQjNEMEVENDlCMUUxMkE3NEVFQjhFOSIvPgogICAgICAgICAgICA8L1NpZ25pbmdDZXJ0aWZpY2F0ZT4KICAgICAgICAgICAgPERhdGFPYmplY3RGb3JtYXQgU2lnbmVkPSJ0cnVlIj4KICAgICAgICAgICAgICAgIDxDb250ZW50VHlwZT4xLjIuODQwLjExMzU0OS4xLjcuMTwvQ29udGVudFR5cGU+CiAgICAgICAgICAgIDwvRGF0YU9iamVjdEZvcm1hdD4KICAgICAgICAgICAgPFNpZ25hdHVyZVRpbWVTdGFtcD4KICAgICAgICAgICAgICAgIDxBdHRyaWJ1dGVPYmplY3QgVk9SZWZlcmVuY2U9IlQtMUNCQUY4QTBDRkRBMjdGQzU5RjA3NDkzRjIwOTg0RkU2MEMyOTZFMDdGNkVENkFDMkI0RDY5QkQzRTdEQkIxRCIvPgogICAgICAgICAgICAgICAgPFRpbWVTdGFtcFZhbHVlPjIwMjQtMDUtMTdUMTQ6MTE6MTFaPC9UaW1lU3RhbXBWYWx1ZT4KICAgICAgICAgICAgPC9TaWduYXR1cmVUaW1lU3RhbXA+CiAgICAgICAgICAgIDxNZXNzYWdlRGlnZXN0IFNpZ25lZD0idHJ1ZSI+CiAgICAgICAgICAgICAgICA8RGlnZXN0PklFdm90OEd4R3VxaFVZSkhXUVZyU3hpMHpvZGRyRjM0WEVYSXFVL0NLS1E9PC9EaWdlc3Q+CiAgICAgICAgICAgIDwvTWVzc2FnZURpZ2VzdD4KICAgICAgICAgICAgPERTUz4KICAgICAgICAgICAgICAgIDxDZXJ0cyBWT1JlZmVyZW5jZT0iQy1FNjlBMzJFQTcwN0M3MUMxNjMzRjdDOUNCRkM2MEY5MDJDNTAwODFEOTc0NzMxNjNFQkY3MDk4RDVERjM2RjMwIEMtMTA3MjZGOTA0RDZFNTM0RTE2MUY4NTJFOTUwQzhGOTI2NUU4MTI1Qjc4MjE5QTMxODYwMUExNDhGMTA5NjA0NCBDLUY0NDA2RjkzMjA4RUU3MzgwOEUxN0U0QTlFMUM0ODc3QjA5MzBFQTgxMjdFNTlBMUZDRDI0NTdFNkMxOEZGQTggQy05QjgyNzkwNEY0REJBMENDMjY1NkZERjA1NDk4Mjg2MzcxM0Q2RUIxMDU2MTJFOThFNkRBMUExQ0VFNTUyMjZCIEMtRTNCNkEyREIyRUQ3Q0U0ODg0MkY3QUM1MzI0MUM3QjcxRDU0MTQ0QkZCNDBDMTFGM0YxRDBCNDJGNUVFQTEyRCBDLUVCQkY0REM2MDBDMTdEQTA0MzgxREVGRENGQzExOUMzRjM0RUZCNEEwNEQwODYwOTEwQjgxM0M3NzkyRDc1ODUgQy03MkQ1NTZCRTU3MEMwQzQwNEIxRDA3ODZEMUExNURBQzY4NzI2OTI4MEVCM0QwRUQ0OUIxRTEyQTc0RUVCOEU5IEMtMUNDMzU4QTZERkEwQTc2QkI1NDcwNjYwRDc4RjNCMjVGMjNDQ0Q2Mzk1NjY3RTQ5Q0NGQzgyMDFEQTNEMTkyRCBDLTVFNzBCMTZCNTIxNTg3NDMyQzE0QTcyQjFGQ0NCNzgzNEM0ODlBMEM4ODNDNDM2MDU1NUE5QkRCRjM0MzJENDAgQy1CREEzODA4REY3NkE5QkI5QTExMDlFQ0U4ODA2QUFBQTc2REE3OUQ0MEExNEM0NTAwOENBMDM5NDZFMzY5OTVCIEMtRjhBNjAwRUMwQURCNUZBNEZCQzEyNDAzMzBERTc3MEE2OEFDOEUxMzc4RTFBMDE0MUI4QTAxNUY3Rjk2MjA2RSBDLTU0RUJENDQ1QkU1ODcwN0I3N0FERTI5RjAxRjU0MTBBM0I0MEExRjk1RDk3MEQwMjFBNkNERDJFMUFDQjEyMkMgQy05Qzg3MkJDOTc5QTdDMDlBNThENEEyNzRDMTk5RTVDQjE2Q0ZBOUI5NjE4RDk4QkM5QTk5ODhFOTg0Qjg0OTVDIEMtMDlGOENFNDQ2RUMyQjM0ODIwQUVBRjlBMzkyNDlGQzY3NjdBNTYxRTE4MTk2QkNDNEU0RDVBMzA2MTIzNjc0NCBDLTRBMEUwRjMwRkEyRDE4ODY5MEY5Qzc1MjUzQTAxNzE5NUYyMTYzRTQ1QzA5MENGNUQyQjczQzYyQzQ0OUE3ODIgQy1BOEQxNEU5NDVFM0U1MTU2QkNBRTVFMzk3MzdDRjZBMUIxRjUxMDI4QkJCRjk4MkY1MENFNUY0QzA1NTY4QjREIEMtRjdENjZCRjgxNTg1MjFGNzA0OTk0MzA0MzREMjA3RjM2REE0RTc4MDU5QkUzMDJDRURDNTA4OTVBMjQ1QTQxMyIvPgogICAgICAgICAgICAgICAgPENSTHMgVk9SZWZlcmVuY2U9IlItNUNGMTZBRENCMTdERjBDOTc1RUFCREYyMzlFQzg5NDc2MjA5REExQzlBN0E4NjBFNzlFNkYzQURCMUQwRERFRCIvPgogICAgICAgICAgICAgICAgPE9DU1BzIFZPUmVmZXJlbmNlPSJSLUUxOTM5QTMxQUY4NzJFRDFBNUZFQUNGOEQxREU1QjNDOUIzQ0ZEQTY0RjVCNUJEMzA1RTk4QTY0ODg4MjBGMTMgUi0yNEI3Mzk4OUI4MzBGRUZGNEQxNjA2MDgwMzYyNUNFMkM1Mjc1Qzk3OTJENTgwMzhGMDRCOTMxNDkyN0Y3MTNBIFItOTA4RjJCMTkxRDk2M0M1NTkxRENEMDQwQzUyOEY5QzhGMjY0NTY2NjNGRjcyMEY5OUJFMEVCOTgwNEVERjU5RCBSLTAxMDNFQjE0NDkwNkE3MTM4OUQxRUU3NzBBMTVEQTNEMDM5NkRBNkI1RTc5MUIwNDMyM0FEN0RBMkEyNDY1MTUgUi0xMUU2NTRFMTRGNUJERjBGODc1NzREMkE0OTgxOTc5MzE2NTIxNkQyOTE2NEY5NjAwQ0I0QzE4Mjc1REU0ODVCIi8+CiAgICAgICAgICAgIDwvRFNTPgogICAgICAgICAgICA8RG9jVGltZVN0YW1wPgogICAgICAgICAgICAgICAgPEF0dHJpYnV0ZU9iamVjdCBWT1JlZmVyZW5jZT0iVC1ENTJFNzg2RTIxNUQ1MkRGNDU3MDNCOTEzNkUxMzgxQUY3QTIyNUNDMUVGMTRGNjJGMUZGODgwNzFFQjU1MkI0Ii8+CiAgICAgICAgICAgICAgICA8VGltZVN0YW1wVmFsdWU+MjAyNC0wNS0xN1QxNDoxMToxMlo8L1RpbWVTdGFtcFZhbHVlPgogICAgICAgICAgICA8L0RvY1RpbWVTdGFtcD4KICAgICAgICAgICAgPFN1YkZpbHRlcj4KICAgICAgICAgICAgICAgIDxTdWJGaWx0ZXJFbGVtZW50PkVUU0kuQ0FkRVMuZGV0YWNoZWQ8L1N1YkZpbHRlckVsZW1lbnQ+CiAgICAgICAgICAgIDwvU3ViRmlsdGVyPgogICAgICAgICAgICA8Qnl0ZVJhbmdlPjAgMTY2MjE3MCAxNzAwMDYwIDUxMDE4PC9CeXRlUmFuZ2U+CiAgICAgICAgICAgIDxGaWx0ZXI+CiAgICAgICAgICAgICAgICA8RmlsdGVyPkFkb2JlLlBQS0xpdGU8L0ZpbHRlcj4KICAgICAgICAgICAgPC9GaWx0ZXI+CiAgICAgICAgPC9TaWduYXR1cmVBdHRyaWJ1dGVzPgogICAgICAgIDxTaWduZXJJbmZvcm1hdGlvbiBQc2V1ZG9ueW09ImZhbHNlIj4KICAgICAgICAgICAgPFNpZ25lckNlcnRpZmljYXRlIFZPUmVmZXJlbmNlPSJDLTcyRDU1NkJFNTcwQzBDNDA0QjFEMDc4NkQxQTE1REFDNjg3MjY5MjgwRUIzRDBFRDQ5QjFFMTJBNzRFRUI4RTkiLz4KICAgICAgICAgICAgPFNpZ25lcj5DaHJpc3RvcGhlIFBlZXJlbnMgKFNpZ25hdHVyZSk8L1NpZ25lcj4KICAgICAgICA8L1NpZ25lckluZm9ybWF0aW9uPgogICAgICAgIDxTaWduYXR1cmVRdWFsaXR5PgogICAgICAgICAgICA8U2lnbmF0dXJlUXVhbGl0eUluZm9ybWF0aW9uPnVybjpjZWY6ZHNzOnNpZ25hdHVyZVF1YWxpZmljYXRpb246UUVTaWc8L1NpZ25hdHVyZVF1YWxpdHlJbmZvcm1hdGlvbj4KICAgICAgICA8L1NpZ25hdHVyZVF1YWxpdHk+CiAgICAgICAgPFNpZ25hdHVyZVZhbGlkYXRpb25Qcm9jZXNzPgogICAgICAgICAgICA8U2lnbmF0dXJlVmFsaWRhdGlvblByb2Nlc3NJRD51cm46ZXRzaTowMTkxMDI6dmFsaWRhdGlvbnByb2Nlc3M6TFRBPC9TaWduYXR1cmVWYWxpZGF0aW9uUHJvY2Vzc0lEPgogICAgICAgIDwvU2lnbmF0dXJlVmFsaWRhdGlvblByb2Nlc3M+CiAgICAgICAgPFNpZ25hdHVyZVZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgIDxNYWluSW5kaWNhdGlvbj51cm46ZXRzaTowMTkxMDI6bWFpbmluZGljYXRpb246dG90YWwtcGFzc2VkPC9NYWluSW5kaWNhdGlvbj4KICAgICAgICAgICAgPEFzc29jaWF0ZWRWYWxpZGF0aW9uUmVwb3J0RGF0YT4KICAgICAgICAgICAgICAgIDxUcnVzdEFuY2hvciBWT1JlZmVyZW5jZT0iQy1BOEQxNEU5NDVFM0U1MTU2QkNBRTVFMzk3MzdDRjZBMUIxRjUxMDI4QkJCRjk4MkY1MENFNUY0QzA1NTY4QjREIi8+CiAgICAgICAgICAgICAgICA8Q2VydGlmaWNhdGVDaGFpbj4KICAgICAgICAgICAgICAgICAgICA8U2lnbmluZ0NlcnRpZmljYXRlIFZPUmVmZXJlbmNlPSJDLTcyRDU1NkJFNTcwQzBDNDA0QjFEMDc4NkQxQTE1REFDNjg3MjY5MjgwRUIzRDBFRDQ5QjFFMTJBNzRFRUI4RTkiLz4KICAgICAgICAgICAgICAgICAgICA8SW50ZXJtZWRpYXRlQ2VydGlmaWNhdGUgVk9SZWZlcmVuY2U9IkMtNEEwRTBGMzBGQTJEMTg4NjkwRjlDNzUyNTNBMDE3MTk1RjIxNjNFNDVDMDkwQ0Y1RDJCNzNDNjJDNDQ5QTc4MiIvPgogICAgICAgICAgICAgICAgICAgIDxUcnVzdEFuY2hvciBWT1JlZmVyZW5jZT0iQy1BOEQxNEU5NDVFM0U1MTU2QkNBRTVFMzk3MzdDRjZBMUIxRjUxMDI4QkJCRjk4MkY1MENFNUY0QzA1NTY4QjREIi8+CiAgICAgICAgICAgICAgICA8L0NlcnRpZmljYXRlQ2hhaW4+CiAgICAgICAgICAgICAgICA8Q3J5cHRvSW5mb3JtYXRpb24+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3RJZCBWT1JlZmVyZW5jZT0iUy00ODRGNTQzRTM1NUE2QUJCNzVENjM2MDQzNzM4QjU2RThBRkFENUIxNDYwRTQwRkE5MTk0NjdBMThEQTI4N0MwIi8+CiAgICAgICAgICAgICAgICAgICAgPEFsZ29yaXRobT5odHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNyc2Etc2hhMjU2PC9BbGdvcml0aG0+CiAgICAgICAgICAgICAgICAgICAgPFNlY3VyZUFsZ29yaXRobT50cnVlPC9TZWN1cmVBbGdvcml0aG0+CiAgICAgICAgICAgICAgICAgICAgPE5vdEFmdGVyPjIwMjUtMTItMzFUMjM6MDA6MDBaPC9Ob3RBZnRlcj4KICAgICAgICAgICAgICAgIDwvQ3J5cHRvSW5mb3JtYXRpb24+CiAgICAgICAgICAgIDwvQXNzb2NpYXRlZFZhbGlkYXRpb25SZXBvcnREYXRhPgogICAgICAgIDwvU2lnbmF0dXJlVmFsaWRhdGlvblN0YXR1cz4KICAgIDwvU2lnbmF0dXJlVmFsaWRhdGlvblJlcG9ydD4KICAgIDxTaWduYXR1cmVWYWxpZGF0aW9uT2JqZWN0cz4KICAgICAgICA8VmFsaWRhdGlvbk9iamVjdCBpZD0iVC01OTg3MjY4NEY4QUYyOEVFMDZEMkYxRTBBNkQ5OTM5RTM0N0I3RjkwMjlEMTYzQURCQkYwRjIxM0RFQ0RBMDQ2Ij4KICAgICAgICAgICAgPE9iamVjdFR5cGU+dXJuOmV0c2k6MDE5MTAyOnZhbGlkYXRpb25PYmplY3Q6dGltZXN0YW1wPC9PYmplY3RUeXBlPgogICAgICAgICAgICA8VmFsaWRhdGlvbk9iamVjdFJlcHJlc2VudGF0aW9uPgogICAgICAgICAgICAgICAgPERpZ2VzdEFsZ0FuZFZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxuczI6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8+CiAgICAgICAgICAgICAgICAgICAgPG5zMjpEaWdlc3RWYWx1ZT5JQjRiOFRZWjVsbXdaVWxUSEQ3Sm5tcXF6RmQ2RHZ3K05YM3kvbU1uRXVBPTwvbnMyOkRpZ2VzdFZhbHVlPgogICAgICAgICAgICAgICAgPC9EaWdlc3RBbGdBbmRWYWx1ZT4KICAgICAgICAgICAgPC9WYWxpZGF0aW9uT2JqZWN0UmVwcmVzZW50YXRpb24+CiAgICAgICAgICAgIDxQT0U+CiAgICAgICAgICAgICAgICA8UE9FVGltZT4yMDIzLTA0LTE4VDA2OjI3OjAzWjwvUE9FVGltZT4KICAgICAgICAgICAgICAgIDxUeXBlT2ZQcm9vZj51cm46ZXRzaTowMTkxMDI6cG9ldHlwZTp2YWxpZGF0aW9uPC9UeXBlT2ZQcm9vZj4KICAgICAgICAgICAgICAgIDxQT0VPYmplY3QgVk9SZWZlcmVuY2U9IlQtOUFEN0Y1QUI1RTU2ODYxOTU5MkNFRThBRjQ2NkU4NkE0Qzc5NkY2RTIzODg1NUJFMjkwNEM5NTM2MDY3Q0E0MSIvPgogICAgICAgICAgICA8L1BPRT4KICAgICAgICAgICAgPFBPRVByb3Zpc2lvbmluZz4KICAgICAgICAgICAgICAgIDxQT0VUaW1lPjIwMjMtMDQtMThUMDY6Mjc6MDJaPC9QT0VUaW1lPgogICAgICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3QgVk9SZWZlcmVuY2U9IkMtRjQ0MDZGOTMyMDhFRTczODA4RTE3RTRBOUUxQzQ4NzdCMDkzMEVBODEyN0U1OUExRkNEMjQ1N0U2QzE4RkZBOCIvPgogICAgICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3QgVk9SZWZlcmVuY2U9IkQtQkJBNDg1NTRCQ0Q0QzlCRDBDNUU0MERFQkY0NzdDOTVEQUEzN0U2QzI5NTE2RUE5RTdGNUE0QkE1RDRCMTgzNCIvPgogICAgICAgICAgICAgICAgPFNpZ25hdHVyZVJlZmVyZW5jZT4KICAgICAgICAgICAgICAgICAgICA8RGlnZXN0TWV0aG9kPmh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NjwvRGlnZXN0TWV0aG9kPgogICAgICAgICAgICAgICAgICAgIDxEaWdlc3RWYWx1ZT5FTzl1b1hCb2tXTmliNEpmblc3ZWRGQ1NkWllUc2VOVEtUMUhJZmlwSWxzPTwvRGlnZXN0VmFsdWU+CiAgICAgICAgICAgICAgICA8L1NpZ25hdHVyZVJlZmVyZW5jZT4KICAgICAgICAgICAgPC9QT0VQcm92aXNpb25pbmc+CiAgICAgICAgICAgIDxWYWxpZGF0aW9uUmVwb3J0PgogICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50c0V2YWx1YXRpb25SZXBvcnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjpmb3JtYXRDaGVja2luZzwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdGF0dXM+dXJuOmV0c2k6MDE5MTAyOmNvbnN0cmFpbnRTdGF0dXM6ZGlzYWJsZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjppZGVudGlmaWNhdGlvbk9mVGhlU2lnbmluZ0NlcnRpZmljYXRlPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czphcHBsaWVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TWFpbkluZGljYXRpb24+dXJuOmV0c2k6MDE5MTAyOm1haW5pbmRpY2F0aW9uOnBhc3NlZDwvTWFpbkluZGljYXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj51cm46Y2VmOmRzczpiYmI6dmFsaWRhdGlvbkNvbnRleHRJbml0aWFsaXphdGlvbjwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdGF0dXM+dXJuOmV0c2k6MDE5MTAyOmNvbnN0cmFpbnRTdGF0dXM6ZGlzYWJsZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjpjcnlwdG9ncmFwaGljVmVyaWZpY2F0aW9uPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czphcHBsaWVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TWFpbkluZGljYXRpb24+dXJuOmV0c2k6MDE5MTAyOm1haW5pbmRpY2F0aW9uOnBhc3NlZDwvTWFpbkluZGljYXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj51cm46Y2VmOmRzczpiYmI6c2lnbmF0dXJlQWNjZXB0YW5jZVZhbGlkYXRpb248L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmFwcGxpZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNYWluSW5kaWNhdGlvbj51cm46ZXRzaTowMTkxMDI6bWFpbmluZGljYXRpb246cGFzc2VkPC9NYWluSW5kaWNhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjp4NTA5Q2VydGlmaWNhdGVWYWxpZGF0aW9uPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czphcHBsaWVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TWFpbkluZGljYXRpb24+dXJuOmV0c2k6MDE5MTAyOm1haW5pbmRpY2F0aW9uOnBhc3NlZDwvTWFpbkluZGljYXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj51cm46Y2VmOmRzczpiYmI6cGFzdFNpZ25hdHVyZVZhbGlkYXRpb248L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmRpc2FibGVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj51cm46Y2VmOmRzczpiYmI6cGFzdENlcnRpZmljYXRlVmFsaWRhdGlvbjwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdGF0dXM+dXJuOmV0c2k6MDE5MTAyOmNvbnN0cmFpbnRTdGF0dXM6ZGlzYWJsZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjp2YWxpZGF0aW9uVGltZVNsaWRpbmc8L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmRpc2FibGVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uQ29uc3RyYWludHNFdmFsdWF0aW9uUmVwb3J0PgogICAgICAgICAgICAgICAgPFNpZ25lckluZm9ybWF0aW9uPgogICAgICAgICAgICAgICAgICAgIDxTaWduZXJDZXJ0aWZpY2F0ZSBWT1JlZmVyZW5jZT0iQy01NEVCRDQ0NUJFNTg3MDdCNzdBREUyOUYwMUY1NDEwQTNCNDBBMUY5NUQ5NzBEMDIxQTZDREQyRTFBQ0IxMjJDIi8+CiAgICAgICAgICAgICAgICAgICAgPFNpZ25lcj5ESElNWU9USVMgLSBUU1UxNjwvU2lnbmVyPgogICAgICAgICAgICAgICAgPC9TaWduZXJJbmZvcm1hdGlvbj4KICAgICAgICAgICAgICAgIDxTaWduYXR1cmVRdWFsaXR5PgogICAgICAgICAgICAgICAgICAgIDxTaWduYXR1cmVRdWFsaXR5SW5mb3JtYXRpb24+dXJuOmNlZjpkc3M6dGltZXN0YW1wUXVhbGlmaWNhdGlvbjpRVFNBPC9TaWduYXR1cmVRdWFsaXR5SW5mb3JtYXRpb24+CiAgICAgICAgICAgICAgICA8L1NpZ25hdHVyZVF1YWxpdHk+CiAgICAgICAgICAgICAgICA8U2lnbmF0dXJlVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8TWFpbkluZGljYXRpb24+dXJuOmV0c2k6MDE5MTAyOm1haW5pbmRpY2F0aW9uOnBhc3NlZDwvTWFpbkluZGljYXRpb24+CiAgICAgICAgICAgICAgICAgICAgPEFzc29jaWF0ZWRWYWxpZGF0aW9uUmVwb3J0RGF0YT4KICAgICAgICAgICAgICAgICAgICAgICAgPFRydXN0QW5jaG9yIFZPUmVmZXJlbmNlPSJDLTU0RUJENDQ1QkU1ODcwN0I3N0FERTI5RjAxRjU0MTBBM0I0MEExRjk1RDk3MEQwMjFBNkNERDJFMUFDQjEyMkMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPENlcnRpZmljYXRlQ2hhaW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2lnbmluZ0NlcnRpZmljYXRlIFZPUmVmZXJlbmNlPSJDLTU0RUJENDQ1QkU1ODcwN0I3N0FERTI5RjAxRjU0MTBBM0I0MEExRjk1RDk3MEQwMjFBNkNERDJFMUFDQjEyMkMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUcnVzdEFuY2hvciBWT1JlZmVyZW5jZT0iQy01NEVCRDQ0NUJFNTg3MDdCNzdBREUyOUYwMUY1NDEwQTNCNDBBMUY5NUQ5NzBEMDIxQTZDREQyRTFBQ0IxMjJDIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ2VydGlmaWNhdGVDaGFpbj4KICAgICAgICAgICAgICAgICAgICAgICAgPENyeXB0b0luZm9ybWF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3RJZCBWT1JlZmVyZW5jZT0iVC01OTg3MjY4NEY4QUYyOEVFMDZEMkYxRTBBNkQ5OTM5RTM0N0I3RjkwMjlEMTYzQURCQkYwRjIxM0RFQ0RBMDQ2Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QWxnb3JpdGhtPmh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZHNpZy1tb3JlI3JzYS1zaGEyNTY8L0FsZ29yaXRobT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZWN1cmVBbGdvcml0aG0+dHJ1ZTwvU2VjdXJlQWxnb3JpdGhtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5vdEFmdGVyPjIwMjUtMTItMzFUMjM6MDA6MDBaPC9Ob3RBZnRlcj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9DcnlwdG9JbmZvcm1hdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L0Fzc29jaWF0ZWRWYWxpZGF0aW9uUmVwb3J0RGF0YT4KICAgICAgICAgICAgICAgIDwvU2lnbmF0dXJlVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgPC9WYWxpZGF0aW9uUmVwb3J0PgogICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdD4KICAgICAgICA8VmFsaWRhdGlvbk9iamVjdCBpZD0iVC05QUQ3RjVBQjVFNTY4NjE5NTkyQ0VFOEFGNDY2RTg2QTRDNzk2RjZFMjM4ODU1QkUyOTA0Qzk1MzYwNjdDQTQxIj4KICAgICAgICAgICAgPE9iamVjdFR5cGU+dXJuOmV0c2k6MDE5MTAyOnZhbGlkYXRpb25PYmplY3Q6dGltZXN0YW1wPC9PYmplY3RUeXBlPgogICAgICAgICAgICA8VmFsaWRhdGlvbk9iamVjdFJlcHJlc2VudGF0aW9uPgogICAgICAgICAgICAgICAgPERpZ2VzdEFsZ0FuZFZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxuczI6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8+CiAgICAgICAgICAgICAgICAgICAgPG5zMjpEaWdlc3RWYWx1ZT5qeVBuaGIwWWRySDRGNEpxbGt1L1JVWU81Ky9ibm5aTHgwMEJiR1VkNjd3PTwvbnMyOkRpZ2VzdFZhbHVlPgogICAgICAgICAgICAgICAgPC9EaWdlc3RBbGdBbmRWYWx1ZT4KICAgICAgICAgICAgPC9WYWxpZGF0aW9uT2JqZWN0UmVwcmVzZW50YXRpb24+CiAgICAgICAgICAgIDxQT0U+CiAgICAgICAgICAgICAgICA8UE9FVGltZT4yMDI0LTA1LTE3VDE0OjExOjEyWjwvUE9FVGltZT4KICAgICAgICAgICAgICAgIDxUeXBlT2ZQcm9vZj51cm46ZXRzaTowMTkxMDI6cG9ldHlwZTp2YWxpZGF0aW9uPC9UeXBlT2ZQcm9vZj4KICAgICAgICAgICAgICAgIDxQT0VPYmplY3QgVk9SZWZlcmVuY2U9IlQtRDUyRTc4NkUyMTVENTJERjQ1NzAzQjkxMzZFMTM4MUFGN0EyMjVDQzFFRjE0RjYyRjFGRjg4MDcxRUI1NTJCNCIvPgogICAgICAgICAgICA8L1BPRT4KICAgICAgICAgICAgPFBPRVByb3Zpc2lvbmluZz4KICAgICAgICAgICAgICAgIDxQT0VUaW1lPjIwMjMtMDQtMThUMDY6Mjc6MDNaPC9QT0VUaW1lPgogICAgICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3QgVk9SZWZlcmVuY2U9IkMtRjQ0MDZGOTMyMDhFRTczODA4RTE3RTRBOUUxQzQ4NzdCMDkzMEVBODEyN0U1OUExRkNEMjQ1N0U2QzE4RkZBOCIvPgogICAgICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3QgVk9SZWZlcmVuY2U9IkMtRTNCNkEyREIyRUQ3Q0U0ODg0MkY3QUM1MzI0MUM3QjcxRDU0MTQ0QkZCNDBDMTFGM0YxRDBCNDJGNUVFQTEyRCIvPgogICAgICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3QgVk9SZWZlcmVuY2U9IkMtRUJCRjREQzYwMEMxN0RBMDQzODFERUZEQ0ZDMTE5QzNGMzRFRkI0QTA0RDA4NjA5MTBCODEzQzc3OTJENzU4NSIvPgogICAgICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3QgVk9SZWZlcmVuY2U9IkMtNTRFQkQ0NDVCRTU4NzA3Qjc3QURFMjlGMDFGNTQxMEEzQjQwQTFGOTVEOTcwRDAyMUE2Q0REMkUxQUNCMTIyQyIvPgogICAgICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3QgVk9SZWZlcmVuY2U9IkMtOUI4Mjc5MDRGNERCQTBDQzI2NTZGREYwNTQ5ODI4NjM3MTNENkVCMTA1NjEyRTk4RTZEQTFBMUNFRTU1MjI2QiIvPgogICAgICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3QgVk9SZWZlcmVuY2U9IlItOTA4RjJCMTkxRDk2M0M1NTkxRENEMDQwQzUyOEY5QzhGMjY0NTY2NjNGRjcyMEY5OUJFMEVCOTgwNEVERjU5RCIvPgogICAgICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3QgVk9SZWZlcmVuY2U9IlQtNTk4NzI2ODRGOEFGMjhFRTA2RDJGMUUwQTZEOTkzOUUzNDdCN0Y5MDI5RDE2M0FEQkJGMEYyMTNERUNEQTA0NiIvPgogICAgICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3QgVk9SZWZlcmVuY2U9IkQtQjM5RTM5MEIyMjZFRDQzMkI4REJGRkVDNjk3RURERkREODU4NTU2MjVBNkI2RDkwRkZCRDI5NEIyNUIzMEQyNiIvPgogICAgICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3QgVk9SZWZlcmVuY2U9IkQtQkJBNDg1NTRCQ0Q0QzlCRDBDNUU0MERFQkY0NzdDOTVEQUEzN0U2QzI5NTE2RUE5RTdGNUE0QkE1RDRCMTgzNCIvPgogICAgICAgICAgICAgICAgPFNpZ25hdHVyZVJlZmVyZW5jZT4KICAgICAgICAgICAgICAgICAgICA8RGlnZXN0TWV0aG9kPmh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NjwvRGlnZXN0TWV0aG9kPgogICAgICAgICAgICAgICAgICAgIDxEaWdlc3RWYWx1ZT5FTzl1b1hCb2tXTmliNEpmblc3ZWRGQ1NkWllUc2VOVEtUMUhJZmlwSWxzPTwvRGlnZXN0VmFsdWU+CiAgICAgICAgICAgICAgICA8L1NpZ25hdHVyZVJlZmVyZW5jZT4KICAgICAgICAgICAgPC9QT0VQcm92aXNpb25pbmc+CiAgICAgICAgICAgIDxWYWxpZGF0aW9uUmVwb3J0PgogICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50c0V2YWx1YXRpb25SZXBvcnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjpmb3JtYXRDaGVja2luZzwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdGF0dXM+dXJuOmV0c2k6MDE5MTAyOmNvbnN0cmFpbnRTdGF0dXM6ZGlzYWJsZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjppZGVudGlmaWNhdGlvbk9mVGhlU2lnbmluZ0NlcnRpZmljYXRlPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czphcHBsaWVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TWFpbkluZGljYXRpb24+dXJuOmV0c2k6MDE5MTAyOm1haW5pbmRpY2F0aW9uOnBhc3NlZDwvTWFpbkluZGljYXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj51cm46Y2VmOmRzczpiYmI6dmFsaWRhdGlvbkNvbnRleHRJbml0aWFsaXphdGlvbjwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdGF0dXM+dXJuOmV0c2k6MDE5MTAyOmNvbnN0cmFpbnRTdGF0dXM6ZGlzYWJsZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjpjcnlwdG9ncmFwaGljVmVyaWZpY2F0aW9uPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czphcHBsaWVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TWFpbkluZGljYXRpb24+dXJuOmV0c2k6MDE5MTAyOm1haW5pbmRpY2F0aW9uOnBhc3NlZDwvTWFpbkluZGljYXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj51cm46Y2VmOmRzczpiYmI6c2lnbmF0dXJlQWNjZXB0YW5jZVZhbGlkYXRpb248L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmFwcGxpZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNYWluSW5kaWNhdGlvbj51cm46ZXRzaTowMTkxMDI6bWFpbmluZGljYXRpb246cGFzc2VkPC9NYWluSW5kaWNhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjp4NTA5Q2VydGlmaWNhdGVWYWxpZGF0aW9uPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czphcHBsaWVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TWFpbkluZGljYXRpb24+dXJuOmV0c2k6MDE5MTAyOm1haW5pbmRpY2F0aW9uOnBhc3NlZDwvTWFpbkluZGljYXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj51cm46Y2VmOmRzczpiYmI6cGFzdFNpZ25hdHVyZVZhbGlkYXRpb248L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmRpc2FibGVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj51cm46Y2VmOmRzczpiYmI6cGFzdENlcnRpZmljYXRlVmFsaWRhdGlvbjwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdGF0dXM+dXJuOmV0c2k6MDE5MTAyOmNvbnN0cmFpbnRTdGF0dXM6ZGlzYWJsZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjp2YWxpZGF0aW9uVGltZVNsaWRpbmc8L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmRpc2FibGVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uQ29uc3RyYWludHNFdmFsdWF0aW9uUmVwb3J0PgogICAgICAgICAgICAgICAgPFNpZ25lckluZm9ybWF0aW9uPgogICAgICAgICAgICAgICAgICAgIDxTaWduZXJDZXJ0aWZpY2F0ZSBWT1JlZmVyZW5jZT0iQy0wOUY4Q0U0NDZFQzJCMzQ4MjBBRUFGOUEzOTI0OUZDNjc2N0E1NjFFMTgxOTZCQ0M0RTRENUEzMDYxMjM2NzQ0Ii8+CiAgICAgICAgICAgICAgICAgICAgPFNpZ25lcj5ESElNWU9USVMgLSBUU1UxNTwvU2lnbmVyPgogICAgICAgICAgICAgICAgPC9TaWduZXJJbmZvcm1hdGlvbj4KICAgICAgICAgICAgICAgIDxTaWduYXR1cmVRdWFsaXR5PgogICAgICAgICAgICAgICAgICAgIDxTaWduYXR1cmVRdWFsaXR5SW5mb3JtYXRpb24+dXJuOmNlZjpkc3M6dGltZXN0YW1wUXVhbGlmaWNhdGlvbjpRVFNBPC9TaWduYXR1cmVRdWFsaXR5SW5mb3JtYXRpb24+CiAgICAgICAgICAgICAgICA8L1NpZ25hdHVyZVF1YWxpdHk+CiAgICAgICAgICAgICAgICA8U2lnbmF0dXJlVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8TWFpbkluZGljYXRpb24+dXJuOmV0c2k6MDE5MTAyOm1haW5pbmRpY2F0aW9uOnBhc3NlZDwvTWFpbkluZGljYXRpb24+CiAgICAgICAgICAgICAgICAgICAgPEFzc29jaWF0ZWRWYWxpZGF0aW9uUmVwb3J0RGF0YT4KICAgICAgICAgICAgICAgICAgICAgICAgPFRydXN0QW5jaG9yIFZPUmVmZXJlbmNlPSJDLTA5RjhDRTQ0NkVDMkIzNDgyMEFFQUY5QTM5MjQ5RkM2NzY3QTU2MUUxODE5NkJDQzRFNEQ1QTMwNjEyMzY3NDQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPENlcnRpZmljYXRlQ2hhaW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2lnbmluZ0NlcnRpZmljYXRlIFZPUmVmZXJlbmNlPSJDLTA5RjhDRTQ0NkVDMkIzNDgyMEFFQUY5QTM5MjQ5RkM2NzY3QTU2MUUxODE5NkJDQzRFNEQ1QTMwNjEyMzY3NDQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUcnVzdEFuY2hvciBWT1JlZmVyZW5jZT0iQy0wOUY4Q0U0NDZFQzJCMzQ4MjBBRUFGOUEzOTI0OUZDNjc2N0E1NjFFMTgxOTZCQ0M0RTRENUEzMDYxMjM2NzQ0Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ2VydGlmaWNhdGVDaGFpbj4KICAgICAgICAgICAgICAgICAgICAgICAgPENyeXB0b0luZm9ybWF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3RJZCBWT1JlZmVyZW5jZT0iVC05QUQ3RjVBQjVFNTY4NjE5NTkyQ0VFOEFGNDY2RTg2QTRDNzk2RjZFMjM4ODU1QkUyOTA0Qzk1MzYwNjdDQTQxIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QWxnb3JpdGhtPmh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZHNpZy1tb3JlI3JzYS1zaGEyNTY8L0FsZ29yaXRobT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZWN1cmVBbGdvcml0aG0+dHJ1ZTwvU2VjdXJlQWxnb3JpdGhtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5vdEFmdGVyPjIwMjUtMTItMzFUMjM6MDA6MDBaPC9Ob3RBZnRlcj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9DcnlwdG9JbmZvcm1hdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L0Fzc29jaWF0ZWRWYWxpZGF0aW9uUmVwb3J0RGF0YT4KICAgICAgICAgICAgICAgIDwvU2lnbmF0dXJlVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgPC9WYWxpZGF0aW9uUmVwb3J0PgogICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdD4KICAgICAgICA8VmFsaWRhdGlvbk9iamVjdCBpZD0iVC0xQ0JBRjhBMENGREEyN0ZDNTlGMDc0OTNGMjA5ODRGRTYwQzI5NkUwN0Y2RUQ2QUMyQjRENjlCRDNFN0RCQjFEIj4KICAgICAgICAgICAgPE9iamVjdFR5cGU+dXJuOmV0c2k6MDE5MTAyOnZhbGlkYXRpb25PYmplY3Q6dGltZXN0YW1wPC9PYmplY3RUeXBlPgogICAgICAgICAgICA8VmFsaWRhdGlvbk9iamVjdFJlcHJlc2VudGF0aW9uPgogICAgICAgICAgICAgICAgPERpZ2VzdEFsZ0FuZFZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxuczI6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8+CiAgICAgICAgICAgICAgICAgICAgPG5zMjpEaWdlc3RWYWx1ZT5OdEMvUHFEbld1c1NkY1p6YmdOaXlFSEpnR1Z2SFpZYjNnQWgxZmxHVXZJPTwvbnMyOkRpZ2VzdFZhbHVlPgogICAgICAgICAgICAgICAgPC9EaWdlc3RBbGdBbmRWYWx1ZT4KICAgICAgICAgICAgPC9WYWxpZGF0aW9uT2JqZWN0UmVwcmVzZW50YXRpb24+CiAgICAgICAgICAgIDxQT0U+CiAgICAgICAgICAgICAgICA8UE9FVGltZT4yMDI0LTA1LTE3VDE0OjExOjEyWjwvUE9FVGltZT4KICAgICAgICAgICAgICAgIDxUeXBlT2ZQcm9vZj51cm46ZXRzaTowMTkxMDI6cG9ldHlwZTp2YWxpZGF0aW9uPC9UeXBlT2ZQcm9vZj4KICAgICAgICAgICAgICAgIDxQT0VPYmplY3QgVk9SZWZlcmVuY2U9IlQtRDUyRTc4NkUyMTVENTJERjQ1NzAzQjkxMzZFMTM4MUFGN0EyMjVDQzFFRjE0RjYyRjFGRjg4MDcxRUI1NTJCNCIvPgogICAgICAgICAgICA8L1BPRT4KICAgICAgICAgICAgPFBPRVByb3Zpc2lvbmluZz4KICAgICAgICAgICAgICAgIDxQT0VUaW1lPjIwMjQtMDUtMTdUMTQ6MTE6MTFaPC9QT0VUaW1lPgogICAgICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3QgVk9SZWZlcmVuY2U9IkMtNzJENTU2QkU1NzBDMEM0MDRCMUQwNzg2RDFBMTVEQUM2ODcyNjkyODBFQjNEMEVENDlCMUUxMkE3NEVFQjhFOSIvPgogICAgICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3QgVk9SZWZlcmVuY2U9IkQtOUMwOTA3MDM3NzNDREE3OUM0NEUyQjVEMzlCNEZEQ0NFRDNGMzZDMDM0QzFGNERENkNDNjMyQTNBQTBFMTVBMyIvPgogICAgICAgICAgICAgICAgPFNpZ25hdHVyZVJlZmVyZW5jZT4KICAgICAgICAgICAgICAgICAgICA8RGlnZXN0TWV0aG9kPmh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NjwvRGlnZXN0TWV0aG9kPgogICAgICAgICAgICAgICAgICAgIDxEaWdlc3RWYWx1ZT5uZVdUUGVad3RobjRhTGs4d0VLOHN2am5iYktjTkZpZ2FUQS9NWnBucTVvPTwvRGlnZXN0VmFsdWU+CiAgICAgICAgICAgICAgICA8L1NpZ25hdHVyZVJlZmVyZW5jZT4KICAgICAgICAgICAgPC9QT0VQcm92aXNpb25pbmc+CiAgICAgICAgICAgIDxWYWxpZGF0aW9uUmVwb3J0PgogICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50c0V2YWx1YXRpb25SZXBvcnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjpmb3JtYXRDaGVja2luZzwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdGF0dXM+dXJuOmV0c2k6MDE5MTAyOmNvbnN0cmFpbnRTdGF0dXM6ZGlzYWJsZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjppZGVudGlmaWNhdGlvbk9mVGhlU2lnbmluZ0NlcnRpZmljYXRlPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czphcHBsaWVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TWFpbkluZGljYXRpb24+dXJuOmV0c2k6MDE5MTAyOm1haW5pbmRpY2F0aW9uOnBhc3NlZDwvTWFpbkluZGljYXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj51cm46Y2VmOmRzczpiYmI6dmFsaWRhdGlvbkNvbnRleHRJbml0aWFsaXphdGlvbjwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdGF0dXM+dXJuOmV0c2k6MDE5MTAyOmNvbnN0cmFpbnRTdGF0dXM6ZGlzYWJsZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjpjcnlwdG9ncmFwaGljVmVyaWZpY2F0aW9uPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czphcHBsaWVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TWFpbkluZGljYXRpb24+dXJuOmV0c2k6MDE5MTAyOm1haW5pbmRpY2F0aW9uOnBhc3NlZDwvTWFpbkluZGljYXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj51cm46Y2VmOmRzczpiYmI6c2lnbmF0dXJlQWNjZXB0YW5jZVZhbGlkYXRpb248L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmFwcGxpZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNYWluSW5kaWNhdGlvbj51cm46ZXRzaTowMTkxMDI6bWFpbmluZGljYXRpb246cGFzc2VkPC9NYWluSW5kaWNhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjp4NTA5Q2VydGlmaWNhdGVWYWxpZGF0aW9uPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czphcHBsaWVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TWFpbkluZGljYXRpb24+dXJuOmV0c2k6MDE5MTAyOm1haW5pbmRpY2F0aW9uOnBhc3NlZDwvTWFpbkluZGljYXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj51cm46Y2VmOmRzczpiYmI6cGFzdFNpZ25hdHVyZVZhbGlkYXRpb248L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmRpc2FibGVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj51cm46Y2VmOmRzczpiYmI6cGFzdENlcnRpZmljYXRlVmFsaWRhdGlvbjwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdGF0dXM+dXJuOmV0c2k6MDE5MTAyOmNvbnN0cmFpbnRTdGF0dXM6ZGlzYWJsZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjp2YWxpZGF0aW9uVGltZVNsaWRpbmc8L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmRpc2FibGVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uQ29uc3RyYWludHNFdmFsdWF0aW9uUmVwb3J0PgogICAgICAgICAgICAgICAgPFNpZ25lckluZm9ybWF0aW9uPgogICAgICAgICAgICAgICAgICAgIDxTaWduZXJDZXJ0aWZpY2F0ZSBWT1JlZmVyZW5jZT0iQy1FNjlBMzJFQTcwN0M3MUMxNjMzRjdDOUNCRkM2MEY5MDJDNTAwODFEOTc0NzMxNjNFQkY3MDk4RDVERjM2RjMwIi8+CiAgICAgICAgICAgICAgICAgICAgPFNpZ25lcj5UaW1lc3RhbXAgVW5pdCAyMDIzMDI8L1NpZ25lcj4KICAgICAgICAgICAgICAgIDwvU2lnbmVySW5mb3JtYXRpb24+CiAgICAgICAgICAgICAgICA8U2lnbmF0dXJlUXVhbGl0eT4KICAgICAgICAgICAgICAgICAgICA8U2lnbmF0dXJlUXVhbGl0eUluZm9ybWF0aW9uPnVybjpjZWY6ZHNzOnRpbWVzdGFtcFF1YWxpZmljYXRpb246UVRTQTwvU2lnbmF0dXJlUXVhbGl0eUluZm9ybWF0aW9uPgogICAgICAgICAgICAgICAgPC9TaWduYXR1cmVRdWFsaXR5PgogICAgICAgICAgICAgICAgPFNpZ25hdHVyZVZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPE1haW5JbmRpY2F0aW9uPnVybjpldHNpOjAxOTEwMjptYWluaW5kaWNhdGlvbjpwYXNzZWQ8L01haW5JbmRpY2F0aW9uPgogICAgICAgICAgICAgICAgICAgIDxBc3NvY2lhdGVkVmFsaWRhdGlvblJlcG9ydERhdGE+CiAgICAgICAgICAgICAgICAgICAgICAgIDxUcnVzdEFuY2hvciBWT1JlZmVyZW5jZT0iQy1FNjlBMzJFQTcwN0M3MUMxNjMzRjdDOUNCRkM2MEY5MDJDNTAwODFEOTc0NzMxNjNFQkY3MDk4RDVERjM2RjMwIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDZXJ0aWZpY2F0ZUNoYWluPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNpZ25pbmdDZXJ0aWZpY2F0ZSBWT1JlZmVyZW5jZT0iQy1FNjlBMzJFQTcwN0M3MUMxNjMzRjdDOUNCRkM2MEY5MDJDNTAwODFEOTc0NzMxNjNFQkY3MDk4RDVERjM2RjMwIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHJ1c3RBbmNob3IgVk9SZWZlcmVuY2U9IkMtRTY5QTMyRUE3MDdDNzFDMTYzM0Y3QzlDQkZDNjBGOTAyQzUwMDgxRDk3NDczMTYzRUJGNzA5OEQ1REYzNkYzMCIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L0NlcnRpZmljYXRlQ2hhaW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDcnlwdG9JbmZvcm1hdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0SWQgVk9SZWZlcmVuY2U9IlQtMUNCQUY4QTBDRkRBMjdGQzU5RjA3NDkzRjIwOTg0RkU2MEMyOTZFMDdGNkVENkFDMkI0RDY5QkQzRTdEQkIxRCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFsZ29yaXRobT5odHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNlY2RzYS1zaGEyNTY8L0FsZ29yaXRobT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZWN1cmVBbGdvcml0aG0+dHJ1ZTwvU2VjdXJlQWxnb3JpdGhtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5vdEFmdGVyPjIwMjgtMTItMzFUMjM6MDA6MDBaPC9Ob3RBZnRlcj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9DcnlwdG9JbmZvcm1hdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L0Fzc29jaWF0ZWRWYWxpZGF0aW9uUmVwb3J0RGF0YT4KICAgICAgICAgICAgICAgIDwvU2lnbmF0dXJlVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgPC9WYWxpZGF0aW9uUmVwb3J0PgogICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdD4KICAgICAgICA8VmFsaWRhdGlvbk9iamVjdCBpZD0iVC1ENTJFNzg2RTIxNUQ1MkRGNDU3MDNCOTEzNkUxMzgxQUY3QTIyNUNDMUVGMTRGNjJGMUZGODgwNzFFQjU1MkI0Ij4KICAgICAgICAgICAgPE9iamVjdFR5cGU+dXJuOmV0c2k6MDE5MTAyOnZhbGlkYXRpb25PYmplY3Q6dGltZXN0YW1wPC9PYmplY3RUeXBlPgogICAgICAgICAgICA8VmFsaWRhdGlvbk9iamVjdFJlcHJlc2VudGF0aW9uPgogICAgICAgICAgICAgICAgPERpZ2VzdEFsZ0FuZFZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxuczI6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8+CiAgICAgICAgICAgICAgICAgICAgPG5zMjpEaWdlc3RWYWx1ZT5SdWNKWWVRVCs5SmRrc2hqSWxQMW1TQnNEMGNOY3VpNjFWUSs5YVkxR2VJPTwvbnMyOkRpZ2VzdFZhbHVlPgogICAgICAgICAgICAgICAgPC9EaWdlc3RBbGdBbmRWYWx1ZT4KICAgICAgICAgICAgPC9WYWxpZGF0aW9uT2JqZWN0UmVwcmVzZW50YXRpb24+CiAgICAgICAgICAgIDxQT0U+CiAgICAgICAgICAgICAgICA8UE9FVGltZT4yMDI0LTA4LTI2VDA5OjMwOjUwWjwvUE9FVGltZT4KICAgICAgICAgICAgICAgIDxUeXBlT2ZQcm9vZj51cm46ZXRzaTowMTkxMDI6cG9ldHlwZTp2YWxpZGF0aW9uPC9UeXBlT2ZQcm9vZj4KICAgICAgICAgICAgPC9QT0U+CiAgICAgICAgICAgIDxQT0VQcm92aXNpb25pbmc+CiAgICAgICAgICAgICAgICA8UE9FVGltZT4yMDI0LTA1LTE3VDE0OjExOjEyWjwvUE9FVGltZT4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IFZPUmVmZXJlbmNlPSJDLUY0NDA2RjkzMjA4RUU3MzgwOEUxN0U0QTlFMUM0ODc3QjA5MzBFQTgxMjdFNTlBMUZDRDI0NTdFNkMxOEZGQTgiLz4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IFZPUmVmZXJlbmNlPSJDLUUzQjZBMkRCMkVEN0NFNDg4NDJGN0FDNTMyNDFDN0I3MUQ1NDE0NEJGQjQwQzExRjNGMUQwQjQyRjVFRUExMkQiLz4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IFZPUmVmZXJlbmNlPSJDLUVCQkY0REM2MDBDMTdEQTA0MzgxREVGRENGQzExOUMzRjM0RUZCNEEwNEQwODYwOTEwQjgxM0M3NzkyRDc1ODUiLz4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IFZPUmVmZXJlbmNlPSJDLTU0RUJENDQ1QkU1ODcwN0I3N0FERTI5RjAxRjU0MTBBM0I0MEExRjk1RDk3MEQwMjFBNkNERDJFMUFDQjEyMkMiLz4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IFZPUmVmZXJlbmNlPSJDLTlCODI3OTA0RjREQkEwQ0MyNjU2RkRGMDU0OTgyODYzNzEzRDZFQjEwNTYxMkU5OEU2REExQTFDRUU1NTIyNkIiLz4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IFZPUmVmZXJlbmNlPSJDLUE4RDE0RTk0NUUzRTUxNTZCQ0FFNUUzOTczN0NGNkExQjFGNTEwMjhCQkJGOTgyRjUwQ0U1RjRDMDU1NjhCNEQiLz4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IFZPUmVmZXJlbmNlPSJDLTlDODcyQkM5NzlBN0MwOUE1OEQ0QTI3NEMxOTlFNUNCMTZDRkE5Qjk2MThEOThCQzlBOTk4OEU5ODRCODQ5NUMiLz4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IFZPUmVmZXJlbmNlPSJDLUU2OUEzMkVBNzA3QzcxQzE2MzNGN0M5Q0JGQzYwRjkwMkM1MDA4MUQ5NzQ3MzE2M0VCRjcwOThENURGMzZGMzAiLz4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IFZPUmVmZXJlbmNlPSJDLTVFNzBCMTZCNTIxNTg3NDMyQzE0QTcyQjFGQ0NCNzgzNEM0ODlBMEM4ODNDNDM2MDU1NUE5QkRCRjM0MzJENDAiLz4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IFZPUmVmZXJlbmNlPSJDLTRBMEUwRjMwRkEyRDE4ODY5MEY5Qzc1MjUzQTAxNzE5NUYyMTYzRTQ1QzA5MENGNUQyQjczQzYyQzQ0OUE3ODIiLz4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IFZPUmVmZXJlbmNlPSJDLTA5RjhDRTQ0NkVDMkIzNDgyMEFFQUY5QTM5MjQ5RkM2NzY3QTU2MUUxODE5NkJDQzRFNEQ1QTMwNjEyMzY3NDQiLz4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IFZPUmVmZXJlbmNlPSJDLUJEQTM4MDhERjc2QTlCQjlBMTEwOUVDRTg4MDZBQUFBNzZEQTc5RDQwQTE0QzQ1MDA4Q0EwMzk0NkUzNjk5NUIiLz4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IFZPUmVmZXJlbmNlPSJDLUY4QTYwMEVDMEFEQjVGQTRGQkMxMjQwMzMwREU3NzBBNjhBQzhFMTM3OEUxQTAxNDFCOEEwMTVGN0Y5NjIwNkUiLz4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IFZPUmVmZXJlbmNlPSJDLTEwNzI2RjkwNEQ2RTUzNEUxNjFGODUyRTk1MEM4RjkyNjVFODEyNUI3ODIxOUEzMTg2MDFBMTQ4RjEwOTYwNDQiLz4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IFZPUmVmZXJlbmNlPSJDLTcyRDU1NkJFNTcwQzBDNDA0QjFEMDc4NkQxQTE1REFDNjg3MjY5MjgwRUIzRDBFRDQ5QjFFMTJBNzRFRUI4RTkiLz4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IFZPUmVmZXJlbmNlPSJSLTkwOEYyQjE5MUQ5NjNDNTU5MURDRDA0MEM1MjhGOUM4RjI2NDU2NjYzRkY3MjBGOTlCRTBFQjk4MDRFREY1OUQiLz4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IFZPUmVmZXJlbmNlPSJSLTVDRjE2QURDQjE3REYwQzk3NUVBQkRGMjM5RUM4OTQ3NjIwOURBMUM5QTdBODYwRTc5RTZGM0FEQjFEMERERUQiLz4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IFZPUmVmZXJlbmNlPSJSLTAxMDNFQjE0NDkwNkE3MTM4OUQxRUU3NzBBMTVEQTNEMDM5NkRBNkI1RTc5MUIwNDMyM0FEN0RBMkEyNDY1MTUiLz4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IFZPUmVmZXJlbmNlPSJSLTI0QjczOTg5QjgzMEZFRkY0RDE2MDYwODAzNjI1Q0UyQzUyNzVDOTc5MkQ1ODAzOEYwNEI5MzE0OTI3RjcxM0EiLz4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IFZPUmVmZXJlbmNlPSJSLUUxOTM5QTMxQUY4NzJFRDFBNUZFQUNGOEQxREU1QjNDOUIzQ0ZEQTY0RjVCNUJEMzA1RTk4QTY0ODg4MjBGMTMiLz4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IFZPUmVmZXJlbmNlPSJULTU5ODcyNjg0RjhBRjI4RUUwNkQyRjFFMEE2RDk5MzlFMzQ3QjdGOTAyOUQxNjNBREJCRjBGMjEzREVDREEwNDYiLz4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IFZPUmVmZXJlbmNlPSJULTlBRDdGNUFCNUU1Njg2MTk1OTJDRUU4QUY0NjZFODZBNEM3OTZGNkUyMzg4NTVCRTI5MDRDOTUzNjA2N0NBNDEiLz4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IFZPUmVmZXJlbmNlPSJULTFDQkFGOEEwQ0ZEQTI3RkM1OUYwNzQ5M0YyMDk4NEZFNjBDMjk2RTA3RjZFRDZBQzJCNEQ2OUJEM0U3REJCMUQiLz4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IFZPUmVmZXJlbmNlPSJELUJGQUU4NTUwODRCOEUzNjdDQTZEQTRCQzBCMzNBQkZDQzYwNTAxNDFGRjZBQzBBM0Q4MzQzQ0MxMjZBNTNGMTMiLz4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IFZPUmVmZXJlbmNlPSJELUJCQTQ4NTU0QkNENEM5QkQwQzVFNDBERUJGNDc3Qzk1REFBMzdFNkMyOTUxNkVBOUU3RjVBNEJBNUQ0QjE4MzQiLz4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IFZPUmVmZXJlbmNlPSJELUIzOUUzOTBCMjI2RUQ0MzJCOERCRkZFQzY5N0VEREZERDg1ODU1NjI1QTZCNkQ5MEZGQkQyOTRCMjVCMzBEMjYiLz4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IFZPUmVmZXJlbmNlPSJELTlDMDkwNzAzNzczQ0RBNzlDNDRFMkI1RDM5QjRGRENDRUQzRjM2QzAzNEMxRjRERDZDQzYzMkEzQUEwRTE1QTMiLz4KICAgICAgICAgICAgICAgIDxTaWduYXR1cmVSZWZlcmVuY2U+CiAgICAgICAgICAgICAgICAgICAgPERpZ2VzdE1ldGhvZD5odHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNzaGEyNTY8L0RpZ2VzdE1ldGhvZD4KICAgICAgICAgICAgICAgICAgICA8RGlnZXN0VmFsdWU+RU85dW9YQm9rV05pYjRKZm5XN2VkRkNTZFpZVHNlTlRLVDFISWZpcElscz08L0RpZ2VzdFZhbHVlPgogICAgICAgICAgICAgICAgPC9TaWduYXR1cmVSZWZlcmVuY2U+CiAgICAgICAgICAgICAgICA8U2lnbmF0dXJlUmVmZXJlbmNlPgogICAgICAgICAgICAgICAgICAgIDxEaWdlc3RNZXRob2Q+aHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2PC9EaWdlc3RNZXRob2Q+CiAgICAgICAgICAgICAgICAgICAgPERpZ2VzdFZhbHVlPm5lV1RQZVp3dGhuNGFMazh3RUs4c3ZqbmJiS2NORmlnYVRBL01acG5xNW89PC9EaWdlc3RWYWx1ZT4KICAgICAgICAgICAgICAgIDwvU2lnbmF0dXJlUmVmZXJlbmNlPgogICAgICAgICAgICA8L1BPRVByb3Zpc2lvbmluZz4KICAgICAgICAgICAgPFZhbGlkYXRpb25SZXBvcnQ+CiAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRzRXZhbHVhdGlvblJlcG9ydD4KICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+dXJuOmNlZjpkc3M6YmJiOmZvcm1hdENoZWNraW5nPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czpkaXNhYmxlZDwvU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8L0NvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+dXJuOmNlZjpkc3M6YmJiOmlkZW50aWZpY2F0aW9uT2ZUaGVTaWduaW5nQ2VydGlmaWNhdGU8L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmFwcGxpZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNYWluSW5kaWNhdGlvbj51cm46ZXRzaTowMTkxMDI6bWFpbmluZGljYXRpb246cGFzc2VkPC9NYWluSW5kaWNhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjp2YWxpZGF0aW9uQ29udGV4dEluaXRpYWxpemF0aW9uPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czpkaXNhYmxlZDwvU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8L0NvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+dXJuOmNlZjpkc3M6YmJiOmNyeXB0b2dyYXBoaWNWZXJpZmljYXRpb248L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmFwcGxpZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNYWluSW5kaWNhdGlvbj51cm46ZXRzaTowMTkxMDI6bWFpbmluZGljYXRpb246cGFzc2VkPC9NYWluSW5kaWNhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjpzaWduYXR1cmVBY2NlcHRhbmNlVmFsaWRhdGlvbjwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdGF0dXM+dXJuOmV0c2k6MDE5MTAyOmNvbnN0cmFpbnRTdGF0dXM6YXBwbGllZDwvU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8L0NvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPE1haW5JbmRpY2F0aW9uPnVybjpldHNpOjAxOTEwMjptYWluaW5kaWNhdGlvbjpwYXNzZWQ8L01haW5JbmRpY2F0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+dXJuOmNlZjpkc3M6YmJiOng1MDlDZXJ0aWZpY2F0ZVZhbGlkYXRpb248L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmFwcGxpZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNYWluSW5kaWNhdGlvbj51cm46ZXRzaTowMTkxMDI6bWFpbmluZGljYXRpb246cGFzc2VkPC9NYWluSW5kaWNhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjpwYXN0U2lnbmF0dXJlVmFsaWRhdGlvbjwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdGF0dXM+dXJuOmV0c2k6MDE5MTAyOmNvbnN0cmFpbnRTdGF0dXM6ZGlzYWJsZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjpwYXN0Q2VydGlmaWNhdGVWYWxpZGF0aW9uPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czpkaXNhYmxlZDwvU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8L0NvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+dXJuOmNlZjpkc3M6YmJiOnZhbGlkYXRpb25UaW1lU2xpZGluZzwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdGF0dXM+dXJuOmV0c2k6MDE5MTAyOmNvbnN0cmFpbnRTdGF0dXM6ZGlzYWJsZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50c0V2YWx1YXRpb25SZXBvcnQ+CiAgICAgICAgICAgICAgICA8U2lnbmVySW5mb3JtYXRpb24+CiAgICAgICAgICAgICAgICAgICAgPFNpZ25lckNlcnRpZmljYXRlIFZPUmVmZXJlbmNlPSJDLUU2OUEzMkVBNzA3QzcxQzE2MzNGN0M5Q0JGQzYwRjkwMkM1MDA4MUQ5NzQ3MzE2M0VCRjcwOThENURGMzZGMzAiLz4KICAgICAgICAgICAgICAgICAgICA8U2lnbmVyPlRpbWVzdGFtcCBVbml0IDIwMjMwMjwvU2lnbmVyPgogICAgICAgICAgICAgICAgPC9TaWduZXJJbmZvcm1hdGlvbj4KICAgICAgICAgICAgICAgIDxTaWduYXR1cmVRdWFsaXR5PgogICAgICAgICAgICAgICAgICAgIDxTaWduYXR1cmVRdWFsaXR5SW5mb3JtYXRpb24+dXJuOmNlZjpkc3M6dGltZXN0YW1wUXVhbGlmaWNhdGlvbjpRVFNBPC9TaWduYXR1cmVRdWFsaXR5SW5mb3JtYXRpb24+CiAgICAgICAgICAgICAgICA8L1NpZ25hdHVyZVF1YWxpdHk+CiAgICAgICAgICAgICAgICA8U2lnbmF0dXJlVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8TWFpbkluZGljYXRpb24+dXJuOmV0c2k6MDE5MTAyOm1haW5pbmRpY2F0aW9uOnBhc3NlZDwvTWFpbkluZGljYXRpb24+CiAgICAgICAgICAgICAgICAgICAgPEFzc29jaWF0ZWRWYWxpZGF0aW9uUmVwb3J0RGF0YT4KICAgICAgICAgICAgICAgICAgICAgICAgPFRydXN0QW5jaG9yIFZPUmVmZXJlbmNlPSJDLUU2OUEzMkVBNzA3QzcxQzE2MzNGN0M5Q0JGQzYwRjkwMkM1MDA4MUQ5NzQ3MzE2M0VCRjcwOThENURGMzZGMzAiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPENlcnRpZmljYXRlQ2hhaW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2lnbmluZ0NlcnRpZmljYXRlIFZPUmVmZXJlbmNlPSJDLUU2OUEzMkVBNzA3QzcxQzE2MzNGN0M5Q0JGQzYwRjkwMkM1MDA4MUQ5NzQ3MzE2M0VCRjcwOThENURGMzZGMzAiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUcnVzdEFuY2hvciBWT1JlZmVyZW5jZT0iQy1FNjlBMzJFQTcwN0M3MUMxNjMzRjdDOUNCRkM2MEY5MDJDNTAwODFEOTc0NzMxNjNFQkY3MDk4RDVERjM2RjMwIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ2VydGlmaWNhdGVDaGFpbj4KICAgICAgICAgICAgICAgICAgICAgICAgPENyeXB0b0luZm9ybWF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3RJZCBWT1JlZmVyZW5jZT0iVC1ENTJFNzg2RTIxNUQ1MkRGNDU3MDNCOTEzNkUxMzgxQUY3QTIyNUNDMUVGMTRGNjJGMUZGODgwNzFFQjU1MkI0Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QWxnb3JpdGhtPmh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZHNpZy1tb3JlI2VjZHNhLXNoYTI1NjwvQWxnb3JpdGhtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlY3VyZUFsZ29yaXRobT50cnVlPC9TZWN1cmVBbGdvcml0aG0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Tm90QWZ0ZXI+MjAyOC0xMi0zMVQyMzowMDowMFo8L05vdEFmdGVyPgogICAgICAgICAgICAgICAgICAgICAgICA8L0NyeXB0b0luZm9ybWF0aW9uPgogICAgICAgICAgICAgICAgICAgIDwvQXNzb2NpYXRlZFZhbGlkYXRpb25SZXBvcnREYXRhPgogICAgICAgICAgICAgICAgPC9TaWduYXR1cmVWYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICA8L1ZhbGlkYXRpb25SZXBvcnQ+CiAgICAgICAgPC9WYWxpZGF0aW9uT2JqZWN0PgogICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IGlkPSJDLTA5RjhDRTQ0NkVDMkIzNDgyMEFFQUY5QTM5MjQ5RkM2NzY3QTU2MUUxODE5NkJDQzRFNEQ1QTMwNjEyMzY3NDQiPgogICAgICAgICAgICA8T2JqZWN0VHlwZT51cm46ZXRzaTowMTkxMDI6dmFsaWRhdGlvbk9iamVjdDpjZXJ0aWZpY2F0ZTwvT2JqZWN0VHlwZT4KICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3RSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgICAgIDxEaWdlc3RBbGdBbmRWYWx1ZT4KICAgICAgICAgICAgICAgICAgICA8bnMyOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiIvPgogICAgICAgICAgICAgICAgICAgIDxuczI6RGlnZXN0VmFsdWU+Q2ZqT1JHN0NzMGdncnErYU9TU2Z4blo2Vmg0WUdXdk1UazFhTUdFalowUT08L25zMjpEaWdlc3RWYWx1ZT4KICAgICAgICAgICAgICAgIDwvRGlnZXN0QWxnQW5kVmFsdWU+CiAgICAgICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdFJlcHJlc2VudGF0aW9uPgogICAgICAgICAgICA8UE9FPgogICAgICAgICAgICAgICAgPFBPRVRpbWU+MjAyNC0wNS0xN1QxNDoxMToxMlo8L1BPRVRpbWU+CiAgICAgICAgICAgICAgICA8VHlwZU9mUHJvb2Y+dXJuOmV0c2k6MDE5MTAyOnBvZXR5cGU6dmFsaWRhdGlvbjwvVHlwZU9mUHJvb2Y+CiAgICAgICAgICAgICAgICA8UE9FT2JqZWN0IFZPUmVmZXJlbmNlPSJULUQ1MkU3ODZFMjE1RDUyREY0NTcwM0I5MTM2RTEzODFBRjdBMjI1Q0MxRUYxNEY2MkYxRkY4ODA3MUVCNTUyQjQiLz4KICAgICAgICAgICAgPC9QT0U+CiAgICAgICAgPC9WYWxpZGF0aW9uT2JqZWN0PgogICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IGlkPSJDLTEwNzI2RjkwNEQ2RTUzNEUxNjFGODUyRTk1MEM4RjkyNjVFODEyNUI3ODIxOUEzMTg2MDFBMTQ4RjEwOTYwNDQiPgogICAgICAgICAgICA8T2JqZWN0VHlwZT51cm46ZXRzaTowMTkxMDI6dmFsaWRhdGlvbk9iamVjdDpjZXJ0aWZpY2F0ZTwvT2JqZWN0VHlwZT4KICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3RSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgICAgIDxEaWdlc3RBbGdBbmRWYWx1ZT4KICAgICAgICAgICAgICAgICAgICA8bnMyOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiIvPgogICAgICAgICAgICAgICAgICAgIDxuczI6RGlnZXN0VmFsdWU+RUhKdmtFMXVVMDRXSDRVdWxReVBrbVhvRWx0NElab3hoZ0doU1BFSllFUT08L25zMjpEaWdlc3RWYWx1ZT4KICAgICAgICAgICAgICAgIDwvRGlnZXN0QWxnQW5kVmFsdWU+CiAgICAgICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdFJlcHJlc2VudGF0aW9uPgogICAgICAgICAgICA8UE9FPgogICAgICAgICAgICAgICAgPFBPRVRpbWU+MjAyNC0wNS0xN1QxNDoxMToxMlo8L1BPRVRpbWU+CiAgICAgICAgICAgICAgICA8VHlwZU9mUHJvb2Y+dXJuOmV0c2k6MDE5MTAyOnBvZXR5cGU6dmFsaWRhdGlvbjwvVHlwZU9mUHJvb2Y+CiAgICAgICAgICAgICAgICA8UE9FT2JqZWN0IFZPUmVmZXJlbmNlPSJULUQ1MkU3ODZFMjE1RDUyREY0NTcwM0I5MTM2RTEzODFBRjdBMjI1Q0MxRUYxNEY2MkYxRkY4ODA3MUVCNTUyQjQiLz4KICAgICAgICAgICAgPC9QT0U+CiAgICAgICAgPC9WYWxpZGF0aW9uT2JqZWN0PgogICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IGlkPSJDLTFDQzM1OEE2REZBMEE3NkJCNTQ3MDY2MEQ3OEYzQjI1RjIzQ0NENjM5NTY2N0U0OUNDRkM4MjAxREEzRDE5MkQiPgogICAgICAgICAgICA8T2JqZWN0VHlwZT51cm46ZXRzaTowMTkxMDI6dmFsaWRhdGlvbk9iamVjdDpjZXJ0aWZpY2F0ZTwvT2JqZWN0VHlwZT4KICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3RSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgICAgIDxEaWdlc3RBbGdBbmRWYWx1ZT4KICAgICAgICAgICAgICAgICAgICA8bnMyOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiIvPgogICAgICAgICAgICAgICAgICAgIDxuczI6RGlnZXN0VmFsdWU+SE1OWXB0K2dwMnUxUndaZzE0ODdKZkk4eldPVlpuNUp6UHlDQWRvOUdTMD08L25zMjpEaWdlc3RWYWx1ZT4KICAgICAgICAgICAgICAgIDwvRGlnZXN0QWxnQW5kVmFsdWU+CiAgICAgICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdFJlcHJlc2VudGF0aW9uPgogICAgICAgICAgICA8UE9FPgogICAgICAgICAgICAgICAgPFBPRVRpbWU+MjAyNC0wOC0yNlQwOTozMDo1MFo8L1BPRVRpbWU+CiAgICAgICAgICAgICAgICA8VHlwZU9mUHJvb2Y+dXJuOmV0c2k6MDE5MTAyOnBvZXR5cGU6dmFsaWRhdGlvbjwvVHlwZU9mUHJvb2Y+CiAgICAgICAgICAgIDwvUE9FPgogICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdD4KICAgICAgICA8VmFsaWRhdGlvbk9iamVjdCBpZD0iQy00QTBFMEYzMEZBMkQxODg2OTBGOUM3NTI1M0EwMTcxOTVGMjE2M0U0NUMwOTBDRjVEMkI3M0M2MkM0NDlBNzgyIj4KICAgICAgICAgICAgPE9iamVjdFR5cGU+dXJuOmV0c2k6MDE5MTAyOnZhbGlkYXRpb25PYmplY3Q6Y2VydGlmaWNhdGU8L09iamVjdFR5cGU+CiAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0UmVwcmVzZW50YXRpb24+CiAgICAgICAgICAgICAgICA8RGlnZXN0QWxnQW5kVmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPG5zMjpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNzaGEyNTYiLz4KICAgICAgICAgICAgICAgICAgICA8bnMyOkRpZ2VzdFZhbHVlPlNnNFBNUG90R0lhUStjZFNVNkFYR1Y4aFkrUmNDUXoxMHJjOFlzUkpwNEk9PC9uczI6RGlnZXN0VmFsdWU+CiAgICAgICAgICAgICAgICA8L0RpZ2VzdEFsZ0FuZFZhbHVlPgogICAgICAgICAgICA8L1ZhbGlkYXRpb25PYmplY3RSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgPFBPRT4KICAgICAgICAgICAgICAgIDxQT0VUaW1lPjIwMjQtMDUtMTdUMTQ6MTE6MTJaPC9QT0VUaW1lPgogICAgICAgICAgICAgICAgPFR5cGVPZlByb29mPnVybjpldHNpOjAxOTEwMjpwb2V0eXBlOnZhbGlkYXRpb248L1R5cGVPZlByb29mPgogICAgICAgICAgICAgICAgPFBPRU9iamVjdCBWT1JlZmVyZW5jZT0iVC1ENTJFNzg2RTIxNUQ1MkRGNDU3MDNCOTEzNkUxMzgxQUY3QTIyNUNDMUVGMTRGNjJGMUZGODgwNzFFQjU1MkI0Ii8+CiAgICAgICAgICAgIDwvUE9FPgogICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdD4KICAgICAgICA8VmFsaWRhdGlvbk9iamVjdCBpZD0iQy01NEVCRDQ0NUJFNTg3MDdCNzdBREUyOUYwMUY1NDEwQTNCNDBBMUY5NUQ5NzBEMDIxQTZDREQyRTFBQ0IxMjJDIj4KICAgICAgICAgICAgPE9iamVjdFR5cGU+dXJuOmV0c2k6MDE5MTAyOnZhbGlkYXRpb25PYmplY3Q6Y2VydGlmaWNhdGU8L09iamVjdFR5cGU+CiAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0UmVwcmVzZW50YXRpb24+CiAgICAgICAgICAgICAgICA8RGlnZXN0QWxnQW5kVmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPG5zMjpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNzaGEyNTYiLz4KICAgICAgICAgICAgICAgICAgICA8bnMyOkRpZ2VzdFZhbHVlPlZPdlVSYjVZY0h0M3JlS2ZBZlZCQ2p0QW9mbGRsdzBDR216ZExockxFaXc9PC9uczI6RGlnZXN0VmFsdWU+CiAgICAgICAgICAgICAgICA8L0RpZ2VzdEFsZ0FuZFZhbHVlPgogICAgICAgICAgICA8L1ZhbGlkYXRpb25PYmplY3RSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgPFBPRT4KICAgICAgICAgICAgICAgIDxQT0VUaW1lPjIwMjMtMDQtMThUMDY6Mjc6MDNaPC9QT0VUaW1lPgogICAgICAgICAgICAgICAgPFR5cGVPZlByb29mPnVybjpldHNpOjAxOTEwMjpwb2V0eXBlOnZhbGlkYXRpb248L1R5cGVPZlByb29mPgogICAgICAgICAgICAgICAgPFBPRU9iamVjdCBWT1JlZmVyZW5jZT0iVC05QUQ3RjVBQjVFNTY4NjE5NTkyQ0VFOEFGNDY2RTg2QTRDNzk2RjZFMjM4ODU1QkUyOTA0Qzk1MzYwNjdDQTQxIi8+CiAgICAgICAgICAgIDwvUE9FPgogICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdD4KICAgICAgICA8VmFsaWRhdGlvbk9iamVjdCBpZD0iQy01RTcwQjE2QjUyMTU4NzQzMkMxNEE3MkIxRkNDQjc4MzRDNDg5QTBDODgzQzQzNjA1NTVBOUJEQkYzNDMyRDQwIj4KICAgICAgICAgICAgPE9iamVjdFR5cGU+dXJuOmV0c2k6MDE5MTAyOnZhbGlkYXRpb25PYmplY3Q6Y2VydGlmaWNhdGU8L09iamVjdFR5cGU+CiAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0UmVwcmVzZW50YXRpb24+CiAgICAgICAgICAgICAgICA8RGlnZXN0QWxnQW5kVmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPG5zMjpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNzaGEyNTYiLz4KICAgICAgICAgICAgICAgICAgICA8bnMyOkRpZ2VzdFZhbHVlPlhuQ3hhMUlWaDBNc0ZLY3JIOHkzZzB4SW1neUlQRU5nVlZxYjIvTkRMVUE9PC9uczI6RGlnZXN0VmFsdWU+CiAgICAgICAgICAgICAgICA8L0RpZ2VzdEFsZ0FuZFZhbHVlPgogICAgICAgICAgICA8L1ZhbGlkYXRpb25PYmplY3RSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgPFBPRT4KICAgICAgICAgICAgICAgIDxQT0VUaW1lPjIwMjQtMDUtMTdUMTQ6MTE6MTJaPC9QT0VUaW1lPgogICAgICAgICAgICAgICAgPFR5cGVPZlByb29mPnVybjpldHNpOjAxOTEwMjpwb2V0eXBlOnZhbGlkYXRpb248L1R5cGVPZlByb29mPgogICAgICAgICAgICAgICAgPFBPRU9iamVjdCBWT1JlZmVyZW5jZT0iVC1ENTJFNzg2RTIxNUQ1MkRGNDU3MDNCOTEzNkUxMzgxQUY3QTIyNUNDMUVGMTRGNjJGMUZGODgwNzFFQjU1MkI0Ii8+CiAgICAgICAgICAgIDwvUE9FPgogICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdD4KICAgICAgICA8VmFsaWRhdGlvbk9iamVjdCBpZD0iQy03MkQ1NTZCRTU3MEMwQzQwNEIxRDA3ODZEMUExNURBQzY4NzI2OTI4MEVCM0QwRUQ0OUIxRTEyQTc0RUVCOEU5Ij4KICAgICAgICAgICAgPE9iamVjdFR5cGU+dXJuOmV0c2k6MDE5MTAyOnZhbGlkYXRpb25PYmplY3Q6Y2VydGlmaWNhdGU8L09iamVjdFR5cGU+CiAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0UmVwcmVzZW50YXRpb24+CiAgICAgICAgICAgICAgICA8RGlnZXN0QWxnQW5kVmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPG5zMjpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNzaGEyNTYiLz4KICAgICAgICAgICAgICAgICAgICA8bnMyOkRpZ2VzdFZhbHVlPmN0Vld2bGNNREVCTEhRZUcwYUZkckdoeWFTZ09zOUR0U2JIaEtuVHV1T2s9PC9uczI6RGlnZXN0VmFsdWU+CiAgICAgICAgICAgICAgICA8L0RpZ2VzdEFsZ0FuZFZhbHVlPgogICAgICAgICAgICA8L1ZhbGlkYXRpb25PYmplY3RSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgPFBPRT4KICAgICAgICAgICAgICAgIDxQT0VUaW1lPjIwMjQtMDUtMTdUMTQ6MTE6MTFaPC9QT0VUaW1lPgogICAgICAgICAgICAgICAgPFR5cGVPZlByb29mPnVybjpldHNpOjAxOTEwMjpwb2V0eXBlOnZhbGlkYXRpb248L1R5cGVPZlByb29mPgogICAgICAgICAgICAgICAgPFBPRU9iamVjdCBWT1JlZmVyZW5jZT0iVC0xQ0JBRjhBMENGREEyN0ZDNTlGMDc0OTNGMjA5ODRGRTYwQzI5NkUwN0Y2RUQ2QUMyQjRENjlCRDNFN0RCQjFEIi8+CiAgICAgICAgICAgIDwvUE9FPgogICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdD4KICAgICAgICA8VmFsaWRhdGlvbk9iamVjdCBpZD0iQy05QjgyNzkwNEY0REJBMENDMjY1NkZERjA1NDk4Mjg2MzcxM0Q2RUIxMDU2MTJFOThFNkRBMUExQ0VFNTUyMjZCIj4KICAgICAgICAgICAgPE9iamVjdFR5cGU+dXJuOmV0c2k6MDE5MTAyOnZhbGlkYXRpb25PYmplY3Q6Y2VydGlmaWNhdGU8L09iamVjdFR5cGU+CiAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0UmVwcmVzZW50YXRpb24+CiAgICAgICAgICAgICAgICA8RGlnZXN0QWxnQW5kVmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPG5zMjpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNzaGEyNTYiLz4KICAgICAgICAgICAgICAgICAgICA8bnMyOkRpZ2VzdFZhbHVlPm00SjVCUFRib013bVZ2M3dWSmdvWTNFOWJyRUZZUzZZNXRvYUhPNVZJbXM9PC9uczI6RGlnZXN0VmFsdWU+CiAgICAgICAgICAgICAgICA8L0RpZ2VzdEFsZ0FuZFZhbHVlPgogICAgICAgICAgICA8L1ZhbGlkYXRpb25PYmplY3RSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgPFBPRT4KICAgICAgICAgICAgICAgIDxQT0VUaW1lPjIwMjMtMDQtMThUMDY6Mjc6MDNaPC9QT0VUaW1lPgogICAgICAgICAgICAgICAgPFR5cGVPZlByb29mPnVybjpldHNpOjAxOTEwMjpwb2V0eXBlOnZhbGlkYXRpb248L1R5cGVPZlByb29mPgogICAgICAgICAgICAgICAgPFBPRU9iamVjdCBWT1JlZmVyZW5jZT0iVC05QUQ3RjVBQjVFNTY4NjE5NTkyQ0VFOEFGNDY2RTg2QTRDNzk2RjZFMjM4ODU1QkUyOTA0Qzk1MzYwNjdDQTQxIi8+CiAgICAgICAgICAgIDwvUE9FPgogICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdD4KICAgICAgICA8VmFsaWRhdGlvbk9iamVjdCBpZD0iQy05Qzg3MkJDOTc5QTdDMDlBNThENEEyNzRDMTk5RTVDQjE2Q0ZBOUI5NjE4RDk4QkM5QTk5ODhFOTg0Qjg0OTVDIj4KICAgICAgICAgICAgPE9iamVjdFR5cGU+dXJuOmV0c2k6MDE5MTAyOnZhbGlkYXRpb25PYmplY3Q6Y2VydGlmaWNhdGU8L09iamVjdFR5cGU+CiAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0UmVwcmVzZW50YXRpb24+CiAgICAgICAgICAgICAgICA8RGlnZXN0QWxnQW5kVmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPG5zMjpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNzaGEyNTYiLz4KICAgICAgICAgICAgICAgICAgICA8bnMyOkRpZ2VzdFZhbHVlPm5JY3J5WG1ud0pwWTFLSjB3Wm5seXhiUHFibGhqWmk4bXBtSTZZUzRTVnc9PC9uczI6RGlnZXN0VmFsdWU+CiAgICAgICAgICAgICAgICA8L0RpZ2VzdEFsZ0FuZFZhbHVlPgogICAgICAgICAgICA8L1ZhbGlkYXRpb25PYmplY3RSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgPFBPRT4KICAgICAgICAgICAgICAgIDxQT0VUaW1lPjIwMjQtMDUtMTdUMTQ6MTE6MTJaPC9QT0VUaW1lPgogICAgICAgICAgICAgICAgPFR5cGVPZlByb29mPnVybjpldHNpOjAxOTEwMjpwb2V0eXBlOnZhbGlkYXRpb248L1R5cGVPZlByb29mPgogICAgICAgICAgICAgICAgPFBPRU9iamVjdCBWT1JlZmVyZW5jZT0iVC1ENTJFNzg2RTIxNUQ1MkRGNDU3MDNCOTEzNkUxMzgxQUY3QTIyNUNDMUVGMTRGNjJGMUZGODgwNzFFQjU1MkI0Ii8+CiAgICAgICAgICAgIDwvUE9FPgogICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdD4KICAgICAgICA8VmFsaWRhdGlvbk9iamVjdCBpZD0iQy1BOEQxNEU5NDVFM0U1MTU2QkNBRTVFMzk3MzdDRjZBMUIxRjUxMDI4QkJCRjk4MkY1MENFNUY0QzA1NTY4QjREIj4KICAgICAgICAgICAgPE9iamVjdFR5cGU+dXJuOmV0c2k6MDE5MTAyOnZhbGlkYXRpb25PYmplY3Q6Y2VydGlmaWNhdGU8L09iamVjdFR5cGU+CiAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0UmVwcmVzZW50YXRpb24+CiAgICAgICAgICAgICAgICA8RGlnZXN0QWxnQW5kVmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPG5zMjpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNzaGEyNTYiLz4KICAgICAgICAgICAgICAgICAgICA8bnMyOkRpZ2VzdFZhbHVlPnFORk9sRjQrVVZhOHJsNDVjM3oyb2JIMUVDaTd2NWd2VU01ZlRBVldpMDA9PC9uczI6RGlnZXN0VmFsdWU+CiAgICAgICAgICAgICAgICA8L0RpZ2VzdEFsZ0FuZFZhbHVlPgogICAgICAgICAgICA8L1ZhbGlkYXRpb25PYmplY3RSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgPFBPRT4KICAgICAgICAgICAgICAgIDxQT0VUaW1lPjIwMjQtMDUtMTdUMTQ6MTE6MTJaPC9QT0VUaW1lPgogICAgICAgICAgICAgICAgPFR5cGVPZlByb29mPnVybjpldHNpOjAxOTEwMjpwb2V0eXBlOnZhbGlkYXRpb248L1R5cGVPZlByb29mPgogICAgICAgICAgICAgICAgPFBPRU9iamVjdCBWT1JlZmVyZW5jZT0iVC1ENTJFNzg2RTIxNUQ1MkRGNDU3MDNCOTEzNkUxMzgxQUY3QTIyNUNDMUVGMTRGNjJGMUZGODgwNzFFQjU1MkI0Ii8+CiAgICAgICAgICAgIDwvUE9FPgogICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdD4KICAgICAgICA8VmFsaWRhdGlvbk9iamVjdCBpZD0iQy1CREEzODA4REY3NkE5QkI5QTExMDlFQ0U4ODA2QUFBQTc2REE3OUQ0MEExNEM0NTAwOENBMDM5NDZFMzY5OTVCIj4KICAgICAgICAgICAgPE9iamVjdFR5cGU+dXJuOmV0c2k6MDE5MTAyOnZhbGlkYXRpb25PYmplY3Q6Y2VydGlmaWNhdGU8L09iamVjdFR5cGU+CiAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0UmVwcmVzZW50YXRpb24+CiAgICAgICAgICAgICAgICA8RGlnZXN0QWxnQW5kVmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPG5zMjpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNzaGEyNTYiLz4KICAgICAgICAgICAgICAgICAgICA8bnMyOkRpZ2VzdFZhbHVlPnZhT0FqZmRxbTdtaEVKN09pQWFxcW5iYWVkUUtGTVJRQ01vRGxHNDJtVnM9PC9uczI6RGlnZXN0VmFsdWU+CiAgICAgICAgICAgICAgICA8L0RpZ2VzdEFsZ0FuZFZhbHVlPgogICAgICAgICAgICA8L1ZhbGlkYXRpb25PYmplY3RSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgPFBPRT4KICAgICAgICAgICAgICAgIDxQT0VUaW1lPjIwMjQtMDUtMTdUMTQ6MTE6MTJaPC9QT0VUaW1lPgogICAgICAgICAgICAgICAgPFR5cGVPZlByb29mPnVybjpldHNpOjAxOTEwMjpwb2V0eXBlOnZhbGlkYXRpb248L1R5cGVPZlByb29mPgogICAgICAgICAgICAgICAgPFBPRU9iamVjdCBWT1JlZmVyZW5jZT0iVC1ENTJFNzg2RTIxNUQ1MkRGNDU3MDNCOTEzNkUxMzgxQUY3QTIyNUNDMUVGMTRGNjJGMUZGODgwNzFFQjU1MkI0Ii8+CiAgICAgICAgICAgIDwvUE9FPgogICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdD4KICAgICAgICA8VmFsaWRhdGlvbk9iamVjdCBpZD0iQy1CRjM5ODBBRDAwMTkyNjVGOTUyNkM1MzI5NzY4NUU3RTRDQUJEMTk4ODIyRUFCNzNGRUNCNTAzMEIxQUI5N0JBIj4KICAgICAgICAgICAgPE9iamVjdFR5cGU+dXJuOmV0c2k6MDE5MTAyOnZhbGlkYXRpb25PYmplY3Q6Y2VydGlmaWNhdGU8L09iamVjdFR5cGU+CiAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0UmVwcmVzZW50YXRpb24+CiAgICAgICAgICAgICAgICA8RGlnZXN0QWxnQW5kVmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPG5zMjpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNzaGEyNTYiLz4KICAgICAgICAgICAgICAgICAgICA8bnMyOkRpZ2VzdFZhbHVlPnZ6bUFyUUFaSmwrVkpzVXlsMmhlZmt5cjBaaUNMcXR6L3N0UU1MR3JsN289PC9uczI6RGlnZXN0VmFsdWU+CiAgICAgICAgICAgICAgICA8L0RpZ2VzdEFsZ0FuZFZhbHVlPgogICAgICAgICAgICA8L1ZhbGlkYXRpb25PYmplY3RSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgPFBPRT4KICAgICAgICAgICAgICAgIDxQT0VUaW1lPjIwMjQtMDgtMjZUMDk6MzA6NTBaPC9QT0VUaW1lPgogICAgICAgICAgICAgICAgPFR5cGVPZlByb29mPnVybjpldHNpOjAxOTEwMjpwb2V0eXBlOnZhbGlkYXRpb248L1R5cGVPZlByb29mPgogICAgICAgICAgICA8L1BPRT4KICAgICAgICA8L1ZhbGlkYXRpb25PYmplY3Q+CiAgICAgICAgPFZhbGlkYXRpb25PYmplY3QgaWQ9IkMtRDQ4RDNEMjNFRURCNTBBNDU5RTU1MTk3NjAxQzI3Nzc0QjlEN0IxOEM5NEQ1QTA1OTUxMUExMDI1MEI5MzE2OCI+CiAgICAgICAgICAgIDxPYmplY3RUeXBlPnVybjpldHNpOjAxOTEwMjp2YWxpZGF0aW9uT2JqZWN0OmNlcnRpZmljYXRlPC9PYmplY3RUeXBlPgogICAgICAgICAgICA8VmFsaWRhdGlvbk9iamVjdFJlcHJlc2VudGF0aW9uPgogICAgICAgICAgICAgICAgPERpZ2VzdEFsZ0FuZFZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxuczI6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8+CiAgICAgICAgICAgICAgICAgICAgPG5zMjpEaWdlc3RWYWx1ZT4xSTA5SSs3YlVLUlo1VkdYWUJ3bmQwdWRleGpKVFZvRmxSR2hBbEM1TVdnPTwvbnMyOkRpZ2VzdFZhbHVlPgogICAgICAgICAgICAgICAgPC9EaWdlc3RBbGdBbmRWYWx1ZT4KICAgICAgICAgICAgPC9WYWxpZGF0aW9uT2JqZWN0UmVwcmVzZW50YXRpb24+CiAgICAgICAgICAgIDxQT0U+CiAgICAgICAgICAgICAgICA8UE9FVGltZT4yMDI0LTA4LTI2VDA5OjMwOjUwWjwvUE9FVGltZT4KICAgICAgICAgICAgICAgIDxUeXBlT2ZQcm9vZj51cm46ZXRzaTowMTkxMDI6cG9ldHlwZTp2YWxpZGF0aW9uPC9UeXBlT2ZQcm9vZj4KICAgICAgICAgICAgPC9QT0U+CiAgICAgICAgPC9WYWxpZGF0aW9uT2JqZWN0PgogICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IGlkPSJDLUUzQjZBMkRCMkVEN0NFNDg4NDJGN0FDNTMyNDFDN0I3MUQ1NDE0NEJGQjQwQzExRjNGMUQwQjQyRjVFRUExMkQiPgogICAgICAgICAgICA8T2JqZWN0VHlwZT51cm46ZXRzaTowMTkxMDI6dmFsaWRhdGlvbk9iamVjdDpjZXJ0aWZpY2F0ZTwvT2JqZWN0VHlwZT4KICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3RSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgICAgIDxEaWdlc3RBbGdBbmRWYWx1ZT4KICAgICAgICAgICAgICAgICAgICA8bnMyOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiIvPgogICAgICAgICAgICAgICAgICAgIDxuczI6RGlnZXN0VmFsdWU+NDdhaTJ5N1h6a2lFTDNyRk1rSEh0eDFVRkV2N1FNRWZQeDBMUXZYdW9TMD08L25zMjpEaWdlc3RWYWx1ZT4KICAgICAgICAgICAgICAgIDwvRGlnZXN0QWxnQW5kVmFsdWU+CiAgICAgICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdFJlcHJlc2VudGF0aW9uPgogICAgICAgICAgICA8UE9FPgogICAgICAgICAgICAgICAgPFBPRVRpbWU+MjAyMy0wNC0xOFQwNjoyNzowM1o8L1BPRVRpbWU+CiAgICAgICAgICAgICAgICA8VHlwZU9mUHJvb2Y+dXJuOmV0c2k6MDE5MTAyOnBvZXR5cGU6dmFsaWRhdGlvbjwvVHlwZU9mUHJvb2Y+CiAgICAgICAgICAgICAgICA8UE9FT2JqZWN0IFZPUmVmZXJlbmNlPSJULTlBRDdGNUFCNUU1Njg2MTk1OTJDRUU4QUY0NjZFODZBNEM3OTZGNkUyMzg4NTVCRTI5MDRDOTUzNjA2N0NBNDEiLz4KICAgICAgICAgICAgPC9QT0U+CiAgICAgICAgPC9WYWxpZGF0aW9uT2JqZWN0PgogICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IGlkPSJDLUU2OUEzMkVBNzA3QzcxQzE2MzNGN0M5Q0JGQzYwRjkwMkM1MDA4MUQ5NzQ3MzE2M0VCRjcwOThENURGMzZGMzAiPgogICAgICAgICAgICA8T2JqZWN0VHlwZT51cm46ZXRzaTowMTkxMDI6dmFsaWRhdGlvbk9iamVjdDpjZXJ0aWZpY2F0ZTwvT2JqZWN0VHlwZT4KICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3RSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgICAgIDxEaWdlc3RBbGdBbmRWYWx1ZT4KICAgICAgICAgICAgICAgICAgICA8bnMyOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiIvPgogICAgICAgICAgICAgICAgICAgIDxuczI6RGlnZXN0VmFsdWU+NXBveTZuQjhjY0ZqUDN5Y3Y4WVBrQ3hRQ0IyWFJ6Rmo2L2NKalYzemJ6QT08L25zMjpEaWdlc3RWYWx1ZT4KICAgICAgICAgICAgICAgIDwvRGlnZXN0QWxnQW5kVmFsdWU+CiAgICAgICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdFJlcHJlc2VudGF0aW9uPgogICAgICAgICAgICA8UE9FPgogICAgICAgICAgICAgICAgPFBPRVRpbWU+MjAyNC0wNS0xN1QxNDoxMToxMlo8L1BPRVRpbWU+CiAgICAgICAgICAgICAgICA8VHlwZU9mUHJvb2Y+dXJuOmV0c2k6MDE5MTAyOnBvZXR5cGU6dmFsaWRhdGlvbjwvVHlwZU9mUHJvb2Y+CiAgICAgICAgICAgICAgICA8UE9FT2JqZWN0IFZPUmVmZXJlbmNlPSJULUQ1MkU3ODZFMjE1RDUyREY0NTcwM0I5MTM2RTEzODFBRjdBMjI1Q0MxRUYxNEY2MkYxRkY4ODA3MUVCNTUyQjQiLz4KICAgICAgICAgICAgPC9QT0U+CiAgICAgICAgPC9WYWxpZGF0aW9uT2JqZWN0PgogICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IGlkPSJDLUVCQkY0REM2MDBDMTdEQTA0MzgxREVGRENGQzExOUMzRjM0RUZCNEEwNEQwODYwOTEwQjgxM0M3NzkyRDc1ODUiPgogICAgICAgICAgICA8T2JqZWN0VHlwZT51cm46ZXRzaTowMTkxMDI6dmFsaWRhdGlvbk9iamVjdDpjZXJ0aWZpY2F0ZTwvT2JqZWN0VHlwZT4KICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3RSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgICAgIDxEaWdlc3RBbGdBbmRWYWx1ZT4KICAgICAgICAgICAgICAgICAgICA8bnMyOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiIvPgogICAgICAgICAgICAgICAgICAgIDxuczI6RGlnZXN0VmFsdWU+Njc5TnhnREJmYUJEZ2Q3OXo4RVp3L05PKzBvRTBJWUpFTGdUeDNrdGRZVT08L25zMjpEaWdlc3RWYWx1ZT4KICAgICAgICAgICAgICAgIDwvRGlnZXN0QWxnQW5kVmFsdWU+CiAgICAgICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdFJlcHJlc2VudGF0aW9uPgogICAgICAgICAgICA8UE9FPgogICAgICAgICAgICAgICAgPFBPRVRpbWU+MjAyMy0wNC0xOFQwNjoyNzowM1o8L1BPRVRpbWU+CiAgICAgICAgICAgICAgICA8VHlwZU9mUHJvb2Y+dXJuOmV0c2k6MDE5MTAyOnBvZXR5cGU6dmFsaWRhdGlvbjwvVHlwZU9mUHJvb2Y+CiAgICAgICAgICAgICAgICA8UE9FT2JqZWN0IFZPUmVmZXJlbmNlPSJULTlBRDdGNUFCNUU1Njg2MTk1OTJDRUU4QUY0NjZFODZBNEM3OTZGNkUyMzg4NTVCRTI5MDRDOTUzNjA2N0NBNDEiLz4KICAgICAgICAgICAgPC9QT0U+CiAgICAgICAgPC9WYWxpZGF0aW9uT2JqZWN0PgogICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IGlkPSJDLUY0NDA2RjkzMjA4RUU3MzgwOEUxN0U0QTlFMUM0ODc3QjA5MzBFQTgxMjdFNTlBMUZDRDI0NTdFNkMxOEZGQTgiPgogICAgICAgICAgICA8T2JqZWN0VHlwZT51cm46ZXRzaTowMTkxMDI6dmFsaWRhdGlvbk9iamVjdDpjZXJ0aWZpY2F0ZTwvT2JqZWN0VHlwZT4KICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3RSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgICAgIDxEaWdlc3RBbGdBbmRWYWx1ZT4KICAgICAgICAgICAgICAgICAgICA8bnMyOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiIvPgogICAgICAgICAgICAgICAgICAgIDxuczI6RGlnZXN0VmFsdWU+OUVCdmt5Q081emdJNFg1S25oeElkN0NURHFnU2ZsbWgvTkpGZm13WS82Zz08L25zMjpEaWdlc3RWYWx1ZT4KICAgICAgICAgICAgICAgIDwvRGlnZXN0QWxnQW5kVmFsdWU+CiAgICAgICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdFJlcHJlc2VudGF0aW9uPgogICAgICAgICAgICA8UE9FPgogICAgICAgICAgICAgICAgPFBPRVRpbWU+MjAyMy0wNC0xOFQwNjoyNzowMlo8L1BPRVRpbWU+CiAgICAgICAgICAgICAgICA8VHlwZU9mUHJvb2Y+dXJuOmV0c2k6MDE5MTAyOnBvZXR5cGU6dmFsaWRhdGlvbjwvVHlwZU9mUHJvb2Y+CiAgICAgICAgICAgICAgICA8UE9FT2JqZWN0IFZPUmVmZXJlbmNlPSJULTU5ODcyNjg0RjhBRjI4RUUwNkQyRjFFMEE2RDk5MzlFMzQ3QjdGOTAyOUQxNjNBREJCRjBGMjEzREVDREEwNDYiLz4KICAgICAgICAgICAgPC9QT0U+CiAgICAgICAgPC9WYWxpZGF0aW9uT2JqZWN0PgogICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IGlkPSJDLUY4QTYwMEVDMEFEQjVGQTRGQkMxMjQwMzMwREU3NzBBNjhBQzhFMTM3OEUxQTAxNDFCOEEwMTVGN0Y5NjIwNkUiPgogICAgICAgICAgICA8T2JqZWN0VHlwZT51cm46ZXRzaTowMTkxMDI6dmFsaWRhdGlvbk9iamVjdDpjZXJ0aWZpY2F0ZTwvT2JqZWN0VHlwZT4KICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3RSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgICAgIDxEaWdlc3RBbGdBbmRWYWx1ZT4KICAgICAgICAgICAgICAgICAgICA8bnMyOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiIvPgogICAgICAgICAgICAgICAgICAgIDxuczI6RGlnZXN0VmFsdWU+K0tZQTdBcmJYNlQ3d1NRRE1ONTNDbWlzamhONDRhQVVHNG9CWDMrV0lHND08L25zMjpEaWdlc3RWYWx1ZT4KICAgICAgICAgICAgICAgIDwvRGlnZXN0QWxnQW5kVmFsdWU+CiAgICAgICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdFJlcHJlc2VudGF0aW9uPgogICAgICAgICAgICA8UE9FPgogICAgICAgICAgICAgICAgPFBPRVRpbWU+MjAyNC0wNS0xN1QxNDoxMToxMlo8L1BPRVRpbWU+CiAgICAgICAgICAgICAgICA8VHlwZU9mUHJvb2Y+dXJuOmV0c2k6MDE5MTAyOnBvZXR5cGU6dmFsaWRhdGlvbjwvVHlwZU9mUHJvb2Y+CiAgICAgICAgICAgICAgICA8UE9FT2JqZWN0IFZPUmVmZXJlbmNlPSJULUQ1MkU3ODZFMjE1RDUyREY0NTcwM0I5MTM2RTEzODFBRjdBMjI1Q0MxRUYxNEY2MkYxRkY4ODA3MUVCNTUyQjQiLz4KICAgICAgICAgICAgPC9QT0U+CiAgICAgICAgPC9WYWxpZGF0aW9uT2JqZWN0PgogICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IGlkPSJDLUY3RDY2QkY4MTU4NTIxRjcwNDk5NDMwNDM0RDIwN0YzNkRBNEU3ODA1OUJFMzAyQ0VEQzUwODk1QTI0NUE0MTMiPgogICAgICAgICAgICA8T2JqZWN0VHlwZT51cm46ZXRzaTowMTkxMDI6dmFsaWRhdGlvbk9iamVjdDpjZXJ0aWZpY2F0ZTwvT2JqZWN0VHlwZT4KICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3RSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgICAgIDxEaWdlc3RBbGdBbmRWYWx1ZT4KICAgICAgICAgICAgICAgICAgICA8bnMyOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiIvPgogICAgICAgICAgICAgICAgICAgIDxuczI6RGlnZXN0VmFsdWU+OTlacitCV0ZJZmNFbVVNRU5OSUg4MjJrNTRCWnZqQXM3Y1VJbGFKRnBCTT08L25zMjpEaWdlc3RWYWx1ZT4KICAgICAgICAgICAgICAgIDwvRGlnZXN0QWxnQW5kVmFsdWU+CiAgICAgICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdFJlcHJlc2VudGF0aW9uPgogICAgICAgICAgICA8UE9FPgogICAgICAgICAgICAgICAgPFBPRVRpbWU+MjAyNC0wOC0yNlQwOTozMDo1MFo8L1BPRVRpbWU+CiAgICAgICAgICAgICAgICA8VHlwZU9mUHJvb2Y+dXJuOmV0c2k6MDE5MTAyOnBvZXR5cGU6dmFsaWRhdGlvbjwvVHlwZU9mUHJvb2Y+CiAgICAgICAgICAgIDwvUE9FPgogICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdD4KICAgICAgICA8VmFsaWRhdGlvbk9iamVjdCBpZD0iUi03NkNDNDYxODg4MUUxNTMyMUZFNTI5QTM2NjA1RTMzRkI2Qjk0MDJCOUI3QzMyNTU1MkNDRUNDODc2RUZCOUY2Ij4KICAgICAgICAgICAgPE9iamVjdFR5cGU+dXJuOmV0c2k6MDE5MTAyOnZhbGlkYXRpb25PYmplY3Q6Q1JMPC9PYmplY3RUeXBlPgogICAgICAgICAgICA8VmFsaWRhdGlvbk9iamVjdFJlcHJlc2VudGF0aW9uPgogICAgICAgICAgICAgICAgPERpZ2VzdEFsZ0FuZFZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxuczI6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8+CiAgICAgICAgICAgICAgICAgICAgPG5zMjpEaWdlc3RWYWx1ZT5kc3hHR0lnZUZUSWY1U21qWmdYalA3YTVRQ3ViZkRKVlVzenN5SGJ2dWZZPTwvbnMyOkRpZ2VzdFZhbHVlPgogICAgICAgICAgICAgICAgPC9EaWdlc3RBbGdBbmRWYWx1ZT4KICAgICAgICAgICAgPC9WYWxpZGF0aW9uT2JqZWN0UmVwcmVzZW50YXRpb24+CiAgICAgICAgICAgIDxQT0U+CiAgICAgICAgICAgICAgICA8UE9FVGltZT4yMDI0LTA4LTI2VDA5OjMwOjUwWjwvUE9FVGltZT4KICAgICAgICAgICAgICAgIDxUeXBlT2ZQcm9vZj51cm46ZXRzaTowMTkxMDI6cG9ldHlwZTp2YWxpZGF0aW9uPC9UeXBlT2ZQcm9vZj4KICAgICAgICAgICAgPC9QT0U+CiAgICAgICAgICAgIDxWYWxpZGF0aW9uUmVwb3J0PgogICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50c0V2YWx1YXRpb25SZXBvcnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjpmb3JtYXRDaGVja2luZzwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdGF0dXM+dXJuOmV0c2k6MDE5MTAyOmNvbnN0cmFpbnRTdGF0dXM6ZGlzYWJsZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjppZGVudGlmaWNhdGlvbk9mVGhlU2lnbmluZ0NlcnRpZmljYXRlPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czphcHBsaWVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TWFpbkluZGljYXRpb24+dXJuOmV0c2k6MDE5MTAyOm1haW5pbmRpY2F0aW9uOnBhc3NlZDwvTWFpbkluZGljYXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj51cm46Y2VmOmRzczpiYmI6dmFsaWRhdGlvbkNvbnRleHRJbml0aWFsaXphdGlvbjwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdGF0dXM+dXJuOmV0c2k6MDE5MTAyOmNvbnN0cmFpbnRTdGF0dXM6ZGlzYWJsZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjpjcnlwdG9ncmFwaGljVmVyaWZpY2F0aW9uPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czphcHBsaWVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TWFpbkluZGljYXRpb24+dXJuOmV0c2k6MDE5MTAyOm1haW5pbmRpY2F0aW9uOnBhc3NlZDwvTWFpbkluZGljYXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj51cm46Y2VmOmRzczpiYmI6c2lnbmF0dXJlQWNjZXB0YW5jZVZhbGlkYXRpb248L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmFwcGxpZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNYWluSW5kaWNhdGlvbj51cm46ZXRzaTowMTkxMDI6bWFpbmluZGljYXRpb246cGFzc2VkPC9NYWluSW5kaWNhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjp4NTA5Q2VydGlmaWNhdGVWYWxpZGF0aW9uPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czphcHBsaWVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TWFpbkluZGljYXRpb24+dXJuOmV0c2k6MDE5MTAyOm1haW5pbmRpY2F0aW9uOnBhc3NlZDwvTWFpbkluZGljYXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uQ29uc3RyYWludHNFdmFsdWF0aW9uUmVwb3J0PgogICAgICAgICAgICAgICAgPFNpZ25lckluZm9ybWF0aW9uPgogICAgICAgICAgICAgICAgICAgIDxTaWduZXJDZXJ0aWZpY2F0ZSBWT1JlZmVyZW5jZT0iQy1BOEQxNEU5NDVFM0U1MTU2QkNBRTVFMzk3MzdDRjZBMUIxRjUxMDI4QkJCRjk4MkY1MENFNUY0QzA1NTY4QjREIi8+CiAgICAgICAgICAgICAgICAgICAgPFNpZ25lcj5CZWxnaXVtIFJvb3QgQ0EzPC9TaWduZXI+CiAgICAgICAgICAgICAgICA8L1NpZ25lckluZm9ybWF0aW9uPgogICAgICAgICAgICAgICAgPFNpZ25hdHVyZVZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPE1haW5JbmRpY2F0aW9uPnVybjpldHNpOjAxOTEwMjptYWluaW5kaWNhdGlvbjpwYXNzZWQ8L01haW5JbmRpY2F0aW9uPgogICAgICAgICAgICAgICAgICAgIDxBc3NvY2lhdGVkVmFsaWRhdGlvblJlcG9ydERhdGE+CiAgICAgICAgICAgICAgICAgICAgICAgIDxUcnVzdEFuY2hvciBWT1JlZmVyZW5jZT0iQy1BOEQxNEU5NDVFM0U1MTU2QkNBRTVFMzk3MzdDRjZBMUIxRjUxMDI4QkJCRjk4MkY1MENFNUY0QzA1NTY4QjREIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDZXJ0aWZpY2F0ZUNoYWluPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNpZ25pbmdDZXJ0aWZpY2F0ZSBWT1JlZmVyZW5jZT0iQy1BOEQxNEU5NDVFM0U1MTU2QkNBRTVFMzk3MzdDRjZBMUIxRjUxMDI4QkJCRjk4MkY1MENFNUY0QzA1NTY4QjREIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHJ1c3RBbmNob3IgVk9SZWZlcmVuY2U9IkMtQThEMTRFOTQ1RTNFNTE1NkJDQUU1RTM5NzM3Q0Y2QTFCMUY1MTAyOEJCQkY5ODJGNTBDRTVGNEMwNTU2OEI0RCIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L0NlcnRpZmljYXRlQ2hhaW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDcnlwdG9JbmZvcm1hdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0SWQgVk9SZWZlcmVuY2U9IlItNzZDQzQ2MTg4ODFFMTUzMjFGRTUyOUEzNjYwNUUzM0ZCNkI5NDAyQjlCN0MzMjU1NTJDQ0VDQzg3NkVGQjlGNiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFsZ29yaXRobT5odHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNyc2Etc2hhMjU2PC9BbGdvcml0aG0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VjdXJlQWxnb3JpdGhtPnRydWU8L1NlY3VyZUFsZ29yaXRobT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxOb3RBZnRlcj4yMDI4LTEyLTMxVDIzOjAwOjAwWjwvTm90QWZ0ZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ3J5cHRvSW5mb3JtYXRpb24+CiAgICAgICAgICAgICAgICAgICAgPC9Bc3NvY2lhdGVkVmFsaWRhdGlvblJlcG9ydERhdGE+CiAgICAgICAgICAgICAgICA8L1NpZ25hdHVyZVZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgIDwvVmFsaWRhdGlvblJlcG9ydD4KICAgICAgICA8L1ZhbGlkYXRpb25PYmplY3Q+CiAgICAgICAgPFZhbGlkYXRpb25PYmplY3QgaWQ9IlItMDEwM0VCMTQ0OTA2QTcxMzg5RDFFRTc3MEExNURBM0QwMzk2REE2QjVFNzkxQjA0MzIzQUQ3REEyQTI0NjUxNSI+CiAgICAgICAgICAgIDxPYmplY3RUeXBlPnVybjpldHNpOjAxOTEwMjp2YWxpZGF0aW9uT2JqZWN0Ok9DU1BSZXNwb25zZTwvT2JqZWN0VHlwZT4KICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3RSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgICAgIDxEaWdlc3RBbGdBbmRWYWx1ZT4KICAgICAgICAgICAgICAgICAgICA8bnMyOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiIvPgogICAgICAgICAgICAgICAgICAgIDxuczI6RGlnZXN0VmFsdWU+QVFQckZFa0dweE9KMGU1M0NoWGFQUU9XMm10ZWVSc0VNanJYMmlva1pSVT08L25zMjpEaWdlc3RWYWx1ZT4KICAgICAgICAgICAgICAgIDwvRGlnZXN0QWxnQW5kVmFsdWU+CiAgICAgICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdFJlcHJlc2VudGF0aW9uPgogICAgICAgICAgICA8UE9FPgogICAgICAgICAgICAgICAgPFBPRVRpbWU+MjAyNC0wNS0xN1QxNDoxMToxMlo8L1BPRVRpbWU+CiAgICAgICAgICAgICAgICA8VHlwZU9mUHJvb2Y+dXJuOmV0c2k6MDE5MTAyOnBvZXR5cGU6dmFsaWRhdGlvbjwvVHlwZU9mUHJvb2Y+CiAgICAgICAgICAgICAgICA8UE9FT2JqZWN0IFZPUmVmZXJlbmNlPSJULUQ1MkU3ODZFMjE1RDUyREY0NTcwM0I5MTM2RTEzODFBRjdBMjI1Q0MxRUYxNEY2MkYxRkY4ODA3MUVCNTUyQjQiLz4KICAgICAgICAgICAgPC9QT0U+CiAgICAgICAgICAgIDxWYWxpZGF0aW9uUmVwb3J0PgogICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50c0V2YWx1YXRpb25SZXBvcnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjpmb3JtYXRDaGVja2luZzwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdGF0dXM+dXJuOmV0c2k6MDE5MTAyOmNvbnN0cmFpbnRTdGF0dXM6ZGlzYWJsZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjppZGVudGlmaWNhdGlvbk9mVGhlU2lnbmluZ0NlcnRpZmljYXRlPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czphcHBsaWVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TWFpbkluZGljYXRpb24+dXJuOmV0c2k6MDE5MTAyOm1haW5pbmRpY2F0aW9uOnBhc3NlZDwvTWFpbkluZGljYXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj51cm46Y2VmOmRzczpiYmI6dmFsaWRhdGlvbkNvbnRleHRJbml0aWFsaXphdGlvbjwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdGF0dXM+dXJuOmV0c2k6MDE5MTAyOmNvbnN0cmFpbnRTdGF0dXM6ZGlzYWJsZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjpjcnlwdG9ncmFwaGljVmVyaWZpY2F0aW9uPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czphcHBsaWVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TWFpbkluZGljYXRpb24+dXJuOmV0c2k6MDE5MTAyOm1haW5pbmRpY2F0aW9uOnBhc3NlZDwvTWFpbkluZGljYXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj51cm46Y2VmOmRzczpiYmI6c2lnbmF0dXJlQWNjZXB0YW5jZVZhbGlkYXRpb248L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmFwcGxpZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNYWluSW5kaWNhdGlvbj51cm46ZXRzaTowMTkxMDI6bWFpbmluZGljYXRpb246cGFzc2VkPC9NYWluSW5kaWNhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjp4NTA5Q2VydGlmaWNhdGVWYWxpZGF0aW9uPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czphcHBsaWVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TWFpbkluZGljYXRpb24+dXJuOmV0c2k6MDE5MTAyOm1haW5pbmRpY2F0aW9uOnBhc3NlZDwvTWFpbkluZGljYXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uQ29uc3RyYWludHNFdmFsdWF0aW9uUmVwb3J0PgogICAgICAgICAgICAgICAgPFNpZ25lckluZm9ybWF0aW9uPgogICAgICAgICAgICAgICAgICAgIDxTaWduZXJDZXJ0aWZpY2F0ZSBWT1JlZmVyZW5jZT0iQy1CREEzODA4REY3NkE5QkI5QTExMDlFQ0U4ODA2QUFBQTc2REE3OUQ0MEExNEM0NTAwOENBMDM5NDZFMzY5OTVCIi8+CiAgICAgICAgICAgICAgICAgICAgPFNpZ25lcj5CZWxnaXVtIE9DU1AgUmVzcG9uZGVyPC9TaWduZXI+CiAgICAgICAgICAgICAgICA8L1NpZ25lckluZm9ybWF0aW9uPgogICAgICAgICAgICAgICAgPFNpZ25hdHVyZVZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPE1haW5JbmRpY2F0aW9uPnVybjpldHNpOjAxOTEwMjptYWluaW5kaWNhdGlvbjpwYXNzZWQ8L01haW5JbmRpY2F0aW9uPgogICAgICAgICAgICAgICAgICAgIDxBc3NvY2lhdGVkVmFsaWRhdGlvblJlcG9ydERhdGE+CiAgICAgICAgICAgICAgICAgICAgICAgIDxUcnVzdEFuY2hvciBWT1JlZmVyZW5jZT0iQy1BOEQxNEU5NDVFM0U1MTU2QkNBRTVFMzk3MzdDRjZBMUIxRjUxMDI4QkJCRjk4MkY1MENFNUY0QzA1NTY4QjREIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDZXJ0aWZpY2F0ZUNoYWluPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNpZ25pbmdDZXJ0aWZpY2F0ZSBWT1JlZmVyZW5jZT0iQy1CREEzODA4REY3NkE5QkI5QTExMDlFQ0U4ODA2QUFBQTc2REE3OUQ0MEExNEM0NTAwOENBMDM5NDZFMzY5OTVCIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW50ZXJtZWRpYXRlQ2VydGlmaWNhdGUgVk9SZWZlcmVuY2U9IkMtNEEwRTBGMzBGQTJEMTg4NjkwRjlDNzUyNTNBMDE3MTk1RjIxNjNFNDVDMDkwQ0Y1RDJCNzNDNjJDNDQ5QTc4MiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRydXN0QW5jaG9yIFZPUmVmZXJlbmNlPSJDLUE4RDE0RTk0NUUzRTUxNTZCQ0FFNUUzOTczN0NGNkExQjFGNTEwMjhCQkJGOTgyRjUwQ0U1RjRDMDU1NjhCNEQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9DZXJ0aWZpY2F0ZUNoYWluPgogICAgICAgICAgICAgICAgICAgICAgICA8Q3J5cHRvSW5mb3JtYXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbk9iamVjdElkIFZPUmVmZXJlbmNlPSJSLTAxMDNFQjE0NDkwNkE3MTM4OUQxRUU3NzBBMTVEQTNEMDM5NkRBNkI1RTc5MUIwNDMyM0FEN0RBMkEyNDY1MTUiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBbGdvcml0aG0+aHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxkc2lnLW1vcmUjcnNhLXNoYTI1NjwvQWxnb3JpdGhtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlY3VyZUFsZ29yaXRobT50cnVlPC9TZWN1cmVBbGdvcml0aG0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Tm90QWZ0ZXI+MjAyNS0xMi0zMVQyMzowMDowMFo8L05vdEFmdGVyPgogICAgICAgICAgICAgICAgICAgICAgICA8L0NyeXB0b0luZm9ybWF0aW9uPgogICAgICAgICAgICAgICAgICAgIDwvQXNzb2NpYXRlZFZhbGlkYXRpb25SZXBvcnREYXRhPgogICAgICAgICAgICAgICAgPC9TaWduYXR1cmVWYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICA8L1ZhbGlkYXRpb25SZXBvcnQ+CiAgICAgICAgPC9WYWxpZGF0aW9uT2JqZWN0PgogICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IGlkPSJSLUQ1QjAwNUIzMzk2NDBGNTdFOEQ4Njk4OTBEQUZEMjRFMTc0NUJDQjRCMDc3QzNDNUZBODNBNDIyNzk2RjFEMkQiPgogICAgICAgICAgICA8T2JqZWN0VHlwZT51cm46ZXRzaTowMTkxMDI6dmFsaWRhdGlvbk9iamVjdDpPQ1NQUmVzcG9uc2U8L09iamVjdFR5cGU+CiAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0UmVwcmVzZW50YXRpb24+CiAgICAgICAgICAgICAgICA8RGlnZXN0QWxnQW5kVmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPG5zMjpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNzaGEyNTYiLz4KICAgICAgICAgICAgICAgICAgICA8bnMyOkRpZ2VzdFZhbHVlPjFiQUZzemxrRDFmbzJHbUpEYS9TVGhkRnZMU3dkOFBGK29Pa0lubHZIUzA9PC9uczI6RGlnZXN0VmFsdWU+CiAgICAgICAgICAgICAgICA8L0RpZ2VzdEFsZ0FuZFZhbHVlPgogICAgICAgICAgICA8L1ZhbGlkYXRpb25PYmplY3RSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgPFBPRT4KICAgICAgICAgICAgICAgIDxQT0VUaW1lPjIwMjQtMDgtMjZUMDk6MzA6NTBaPC9QT0VUaW1lPgogICAgICAgICAgICAgICAgPFR5cGVPZlByb29mPnVybjpldHNpOjAxOTEwMjpwb2V0eXBlOnZhbGlkYXRpb248L1R5cGVPZlByb29mPgogICAgICAgICAgICA8L1BPRT4KICAgICAgICAgICAgPFZhbGlkYXRpb25SZXBvcnQ+CiAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRzRXZhbHVhdGlvblJlcG9ydD4KICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+dXJuOmNlZjpkc3M6YmJiOmZvcm1hdENoZWNraW5nPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czpkaXNhYmxlZDwvU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8L0NvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+dXJuOmNlZjpkc3M6YmJiOmlkZW50aWZpY2F0aW9uT2ZUaGVTaWduaW5nQ2VydGlmaWNhdGU8L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmFwcGxpZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNYWluSW5kaWNhdGlvbj51cm46ZXRzaTowMTkxMDI6bWFpbmluZGljYXRpb246cGFzc2VkPC9NYWluSW5kaWNhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjp2YWxpZGF0aW9uQ29udGV4dEluaXRpYWxpemF0aW9uPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czpkaXNhYmxlZDwvU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8L0NvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+dXJuOmNlZjpkc3M6YmJiOmNyeXB0b2dyYXBoaWNWZXJpZmljYXRpb248L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmFwcGxpZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNYWluSW5kaWNhdGlvbj51cm46ZXRzaTowMTkxMDI6bWFpbmluZGljYXRpb246cGFzc2VkPC9NYWluSW5kaWNhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjpzaWduYXR1cmVBY2NlcHRhbmNlVmFsaWRhdGlvbjwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdGF0dXM+dXJuOmV0c2k6MDE5MTAyOmNvbnN0cmFpbnRTdGF0dXM6YXBwbGllZDwvU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8L0NvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPE1haW5JbmRpY2F0aW9uPnVybjpldHNpOjAxOTEwMjptYWluaW5kaWNhdGlvbjpwYXNzZWQ8L01haW5JbmRpY2F0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+dXJuOmNlZjpkc3M6YmJiOng1MDlDZXJ0aWZpY2F0ZVZhbGlkYXRpb248L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmFwcGxpZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNYWluSW5kaWNhdGlvbj51cm46ZXRzaTowMTkxMDI6bWFpbmluZGljYXRpb246cGFzc2VkPC9NYWluSW5kaWNhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50c0V2YWx1YXRpb25SZXBvcnQ+CiAgICAgICAgICAgICAgICA8U2lnbmVySW5mb3JtYXRpb24+CiAgICAgICAgICAgICAgICAgICAgPFNpZ25lckNlcnRpZmljYXRlIFZPUmVmZXJlbmNlPSJDLUJGMzk4MEFEMDAxOTI2NUY5NTI2QzUzMjk3Njg1RTdFNENBQkQxOTg4MjJFQUI3M0ZFQ0I1MDMwQjFBQjk3QkEiLz4KICAgICAgICAgICAgICAgICAgICA8U2lnbmVyPkJSQ0E2IE9DU1AgUmVzcG9uZGVyPC9TaWduZXI+CiAgICAgICAgICAgICAgICA8L1NpZ25lckluZm9ybWF0aW9uPgogICAgICAgICAgICAgICAgPFNpZ25hdHVyZVZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPE1haW5JbmRpY2F0aW9uPnVybjpldHNpOjAxOTEwMjptYWluaW5kaWNhdGlvbjpwYXNzZWQ8L01haW5JbmRpY2F0aW9uPgogICAgICAgICAgICAgICAgICAgIDxBc3NvY2lhdGVkVmFsaWRhdGlvblJlcG9ydERhdGE+CiAgICAgICAgICAgICAgICAgICAgICAgIDxUcnVzdEFuY2hvciBWT1JlZmVyZW5jZT0iQy05Qzg3MkJDOTc5QTdDMDlBNThENEEyNzRDMTk5RTVDQjE2Q0ZBOUI5NjE4RDk4QkM5QTk5ODhFOTg0Qjg0OTVDIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDZXJ0aWZpY2F0ZUNoYWluPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNpZ25pbmdDZXJ0aWZpY2F0ZSBWT1JlZmVyZW5jZT0iQy1CRjM5ODBBRDAwMTkyNjVGOTUyNkM1MzI5NzY4NUU3RTRDQUJEMTk4ODIyRUFCNzNGRUNCNTAzMEIxQUI5N0JBIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHJ1c3RBbmNob3IgVk9SZWZlcmVuY2U9IkMtOUM4NzJCQzk3OUE3QzA5QTU4RDRBMjc0QzE5OUU1Q0IxNkNGQTlCOTYxOEQ5OEJDOUE5OTg4RTk4NEI4NDk1QyIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L0NlcnRpZmljYXRlQ2hhaW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDcnlwdG9JbmZvcm1hdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0SWQgVk9SZWZlcmVuY2U9IlItRDVCMDA1QjMzOTY0MEY1N0U4RDg2OTg5MERBRkQyNEUxNzQ1QkNCNEIwNzdDM0M1RkE4M0E0MjI3OTZGMUQyRCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFsZ29yaXRobT5odHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNlY2RzYS1zaGEyNTY8L0FsZ29yaXRobT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZWN1cmVBbGdvcml0aG0+dHJ1ZTwvU2VjdXJlQWxnb3JpdGhtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5vdEFmdGVyPjIwMjgtMTItMzFUMjM6MDA6MDBaPC9Ob3RBZnRlcj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9DcnlwdG9JbmZvcm1hdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L0Fzc29jaWF0ZWRWYWxpZGF0aW9uUmVwb3J0RGF0YT4KICAgICAgICAgICAgICAgIDwvU2lnbmF0dXJlVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgPC9WYWxpZGF0aW9uUmVwb3J0PgogICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdD4KICAgICAgICA8VmFsaWRhdGlvbk9iamVjdCBpZD0iUi0yNEI3Mzk4OUI4MzBGRUZGNEQxNjA2MDgwMzYyNUNFMkM1Mjc1Qzk3OTJENTgwMzhGMDRCOTMxNDkyN0Y3MTNBIj4KICAgICAgICAgICAgPE9iamVjdFR5cGU+dXJuOmV0c2k6MDE5MTAyOnZhbGlkYXRpb25PYmplY3Q6T0NTUFJlc3BvbnNlPC9PYmplY3RUeXBlPgogICAgICAgICAgICA8VmFsaWRhdGlvbk9iamVjdFJlcHJlc2VudGF0aW9uPgogICAgICAgICAgICAgICAgPERpZ2VzdEFsZ0FuZFZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxuczI6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8+CiAgICAgICAgICAgICAgICAgICAgPG5zMjpEaWdlc3RWYWx1ZT5KTGM1aWJndy92OU5GZ1lJQTJKYzRzVW5YSmVTMVlBNDhFdVRGSkovY1RvPTwvbnMyOkRpZ2VzdFZhbHVlPgogICAgICAgICAgICAgICAgPC9EaWdlc3RBbGdBbmRWYWx1ZT4KICAgICAgICAgICAgPC9WYWxpZGF0aW9uT2JqZWN0UmVwcmVzZW50YXRpb24+CiAgICAgICAgICAgIDxQT0U+CiAgICAgICAgICAgICAgICA8UE9FVGltZT4yMDI0LTA1LTE3VDE0OjExOjEyWjwvUE9FVGltZT4KICAgICAgICAgICAgICAgIDxUeXBlT2ZQcm9vZj51cm46ZXRzaTowMTkxMDI6cG9ldHlwZTp2YWxpZGF0aW9uPC9UeXBlT2ZQcm9vZj4KICAgICAgICAgICAgICAgIDxQT0VPYmplY3QgVk9SZWZlcmVuY2U9IlQtRDUyRTc4NkUyMTVENTJERjQ1NzAzQjkxMzZFMTM4MUFGN0EyMjVDQzFFRjE0RjYyRjFGRjg4MDcxRUI1NTJCNCIvPgogICAgICAgICAgICA8L1BPRT4KICAgICAgICAgICAgPFZhbGlkYXRpb25SZXBvcnQ+CiAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRzRXZhbHVhdGlvblJlcG9ydD4KICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+dXJuOmNlZjpkc3M6YmJiOmZvcm1hdENoZWNraW5nPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czpkaXNhYmxlZDwvU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8L0NvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+dXJuOmNlZjpkc3M6YmJiOmlkZW50aWZpY2F0aW9uT2ZUaGVTaWduaW5nQ2VydGlmaWNhdGU8L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmFwcGxpZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNYWluSW5kaWNhdGlvbj51cm46ZXRzaTowMTkxMDI6bWFpbmluZGljYXRpb246cGFzc2VkPC9NYWluSW5kaWNhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjp2YWxpZGF0aW9uQ29udGV4dEluaXRpYWxpemF0aW9uPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czpkaXNhYmxlZDwvU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8L0NvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+dXJuOmNlZjpkc3M6YmJiOmNyeXB0b2dyYXBoaWNWZXJpZmljYXRpb248L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmFwcGxpZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNYWluSW5kaWNhdGlvbj51cm46ZXRzaTowMTkxMDI6bWFpbmluZGljYXRpb246cGFzc2VkPC9NYWluSW5kaWNhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjpzaWduYXR1cmVBY2NlcHRhbmNlVmFsaWRhdGlvbjwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdGF0dXM+dXJuOmV0c2k6MDE5MTAyOmNvbnN0cmFpbnRTdGF0dXM6YXBwbGllZDwvU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8L0NvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPE1haW5JbmRpY2F0aW9uPnVybjpldHNpOjAxOTEwMjptYWluaW5kaWNhdGlvbjpwYXNzZWQ8L01haW5JbmRpY2F0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+dXJuOmNlZjpkc3M6YmJiOng1MDlDZXJ0aWZpY2F0ZVZhbGlkYXRpb248L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmFwcGxpZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNYWluSW5kaWNhdGlvbj51cm46ZXRzaTowMTkxMDI6bWFpbmluZGljYXRpb246cGFzc2VkPC9NYWluSW5kaWNhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50c0V2YWx1YXRpb25SZXBvcnQ+CiAgICAgICAgICAgICAgICA8U2lnbmVySW5mb3JtYXRpb24+CiAgICAgICAgICAgICAgICAgICAgPFNpZ25lckNlcnRpZmljYXRlIFZPUmVmZXJlbmNlPSJDLUY4QTYwMEVDMEFEQjVGQTRGQkMxMjQwMzMwREU3NzBBNjhBQzhFMTM3OEUxQTAxNDFCOEEwMTVGN0Y5NjIwNkUiLz4KICAgICAgICAgICAgICAgICAgICA8U2lnbmVyPk9DU1AgQ2VydGlnbmEgRW50aXR5IENBPC9TaWduZXI+CiAgICAgICAgICAgICAgICA8L1NpZ25lckluZm9ybWF0aW9uPgogICAgICAgICAgICAgICAgPFNpZ25hdHVyZVZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPE1haW5JbmRpY2F0aW9uPnVybjpldHNpOjAxOTEwMjptYWluaW5kaWNhdGlvbjpwYXNzZWQ8L01haW5JbmRpY2F0aW9uPgogICAgICAgICAgICAgICAgICAgIDxBc3NvY2lhdGVkVmFsaWRhdGlvblJlcG9ydERhdGE+CiAgICAgICAgICAgICAgICAgICAgICAgIDxUcnVzdEFuY2hvciBWT1JlZmVyZW5jZT0iQy0xQ0MzNThBNkRGQTBBNzZCQjU0NzA2NjBENzhGM0IyNUYyM0NDRDYzOTU2NjdFNDlDQ0ZDODIwMURBM0QxOTJEIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDZXJ0aWZpY2F0ZUNoYWluPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNpZ25pbmdDZXJ0aWZpY2F0ZSBWT1JlZmVyZW5jZT0iQy1GOEE2MDBFQzBBREI1RkE0RkJDMTI0MDMzMERFNzcwQTY4QUM4RTEzNzhFMUEwMTQxQjhBMDE1RjdGOTYyMDZFIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHJ1c3RBbmNob3IgVk9SZWZlcmVuY2U9IkMtMUNDMzU4QTZERkEwQTc2QkI1NDcwNjYwRDc4RjNCMjVGMjNDQ0Q2Mzk1NjY3RTQ5Q0NGQzgyMDFEQTNEMTkyRCIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L0NlcnRpZmljYXRlQ2hhaW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDcnlwdG9JbmZvcm1hdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0SWQgVk9SZWZlcmVuY2U9IlItMjRCNzM5ODlCODMwRkVGRjREMTYwNjA4MDM2MjVDRTJDNTI3NUM5NzkyRDU4MDM4RjA0QjkzMTQ5MjdGNzEzQSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFsZ29yaXRobT5odHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNyc2Etc2hhMjU2PC9BbGdvcml0aG0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VjdXJlQWxnb3JpdGhtPnRydWU8L1NlY3VyZUFsZ29yaXRobT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxOb3RBZnRlcj4yMDI4LTEyLTMxVDIzOjAwOjAwWjwvTm90QWZ0ZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ3J5cHRvSW5mb3JtYXRpb24+CiAgICAgICAgICAgICAgICAgICAgPC9Bc3NvY2lhdGVkVmFsaWRhdGlvblJlcG9ydERhdGE+CiAgICAgICAgICAgICAgICA8L1NpZ25hdHVyZVZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgIDwvVmFsaWRhdGlvblJlcG9ydD4KICAgICAgICA8L1ZhbGlkYXRpb25PYmplY3Q+CiAgICAgICAgPFZhbGlkYXRpb25PYmplY3QgaWQ9IlItNUNGMTZBRENCMTdERjBDOTc1RUFCREYyMzlFQzg5NDc2MjA5REExQzlBN0E4NjBFNzlFNkYzQURCMUQwRERFRCI+CiAgICAgICAgICAgIDxPYmplY3RUeXBlPnVybjpldHNpOjAxOTEwMjp2YWxpZGF0aW9uT2JqZWN0OkNSTDwvT2JqZWN0VHlwZT4KICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3RSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgICAgIDxEaWdlc3RBbGdBbmRWYWx1ZT4KICAgICAgICAgICAgICAgICAgICA8bnMyOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiIvPgogICAgICAgICAgICAgICAgICAgIDxuczI6RGlnZXN0VmFsdWU+WFBGcTNMRjk4TWwxNnIzeU9leUpSMklKMmh5YWVvWU9lZWJ6cmJIUTNlMD08L25zMjpEaWdlc3RWYWx1ZT4KICAgICAgICAgICAgICAgIDwvRGlnZXN0QWxnQW5kVmFsdWU+CiAgICAgICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdFJlcHJlc2VudGF0aW9uPgogICAgICAgICAgICA8UE9FPgogICAgICAgICAgICAgICAgPFBPRVRpbWU+MjAyNC0wNS0xN1QxNDoxMToxMlo8L1BPRVRpbWU+CiAgICAgICAgICAgICAgICA8VHlwZU9mUHJvb2Y+dXJuOmV0c2k6MDE5MTAyOnBvZXR5cGU6dmFsaWRhdGlvbjwvVHlwZU9mUHJvb2Y+CiAgICAgICAgICAgICAgICA8UE9FT2JqZWN0IFZPUmVmZXJlbmNlPSJULUQ1MkU3ODZFMjE1RDUyREY0NTcwM0I5MTM2RTEzODFBRjdBMjI1Q0MxRUYxNEY2MkYxRkY4ODA3MUVCNTUyQjQiLz4KICAgICAgICAgICAgPC9QT0U+CiAgICAgICAgICAgIDxWYWxpZGF0aW9uUmVwb3J0PgogICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50c0V2YWx1YXRpb25SZXBvcnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjpmb3JtYXRDaGVja2luZzwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdGF0dXM+dXJuOmV0c2k6MDE5MTAyOmNvbnN0cmFpbnRTdGF0dXM6ZGlzYWJsZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjppZGVudGlmaWNhdGlvbk9mVGhlU2lnbmluZ0NlcnRpZmljYXRlPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czphcHBsaWVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TWFpbkluZGljYXRpb24+dXJuOmV0c2k6MDE5MTAyOm1haW5pbmRpY2F0aW9uOnBhc3NlZDwvTWFpbkluZGljYXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj51cm46Y2VmOmRzczpiYmI6dmFsaWRhdGlvbkNvbnRleHRJbml0aWFsaXphdGlvbjwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdGF0dXM+dXJuOmV0c2k6MDE5MTAyOmNvbnN0cmFpbnRTdGF0dXM6ZGlzYWJsZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjpjcnlwdG9ncmFwaGljVmVyaWZpY2F0aW9uPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czphcHBsaWVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TWFpbkluZGljYXRpb24+dXJuOmV0c2k6MDE5MTAyOm1haW5pbmRpY2F0aW9uOnBhc3NlZDwvTWFpbkluZGljYXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj51cm46Y2VmOmRzczpiYmI6c2lnbmF0dXJlQWNjZXB0YW5jZVZhbGlkYXRpb248L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmFwcGxpZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNYWluSW5kaWNhdGlvbj51cm46ZXRzaTowMTkxMDI6bWFpbmluZGljYXRpb246cGFzc2VkPC9NYWluSW5kaWNhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjp4NTA5Q2VydGlmaWNhdGVWYWxpZGF0aW9uPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czphcHBsaWVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TWFpbkluZGljYXRpb24+dXJuOmV0c2k6MDE5MTAyOm1haW5pbmRpY2F0aW9uOnBhc3NlZDwvTWFpbkluZGljYXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uQ29uc3RyYWludHNFdmFsdWF0aW9uUmVwb3J0PgogICAgICAgICAgICAgICAgPFNpZ25lckluZm9ybWF0aW9uPgogICAgICAgICAgICAgICAgICAgIDxTaWduZXJDZXJ0aWZpY2F0ZSBWT1JlZmVyZW5jZT0iQy1BOEQxNEU5NDVFM0U1MTU2QkNBRTVFMzk3MzdDRjZBMUIxRjUxMDI4QkJCRjk4MkY1MENFNUY0QzA1NTY4QjREIi8+CiAgICAgICAgICAgICAgICAgICAgPFNpZ25lcj5CZWxnaXVtIFJvb3QgQ0EzPC9TaWduZXI+CiAgICAgICAgICAgICAgICA8L1NpZ25lckluZm9ybWF0aW9uPgogICAgICAgICAgICAgICAgPFNpZ25hdHVyZVZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPE1haW5JbmRpY2F0aW9uPnVybjpldHNpOjAxOTEwMjptYWluaW5kaWNhdGlvbjpwYXNzZWQ8L01haW5JbmRpY2F0aW9uPgogICAgICAgICAgICAgICAgICAgIDxBc3NvY2lhdGVkVmFsaWRhdGlvblJlcG9ydERhdGE+CiAgICAgICAgICAgICAgICAgICAgICAgIDxUcnVzdEFuY2hvciBWT1JlZmVyZW5jZT0iQy1BOEQxNEU5NDVFM0U1MTU2QkNBRTVFMzk3MzdDRjZBMUIxRjUxMDI4QkJCRjk4MkY1MENFNUY0QzA1NTY4QjREIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDZXJ0aWZpY2F0ZUNoYWluPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNpZ25pbmdDZXJ0aWZpY2F0ZSBWT1JlZmVyZW5jZT0iQy1BOEQxNEU5NDVFM0U1MTU2QkNBRTVFMzk3MzdDRjZBMUIxRjUxMDI4QkJCRjk4MkY1MENFNUY0QzA1NTY4QjREIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHJ1c3RBbmNob3IgVk9SZWZlcmVuY2U9IkMtQThEMTRFOTQ1RTNFNTE1NkJDQUU1RTM5NzM3Q0Y2QTFCMUY1MTAyOEJCQkY5ODJGNTBDRTVGNEMwNTU2OEI0RCIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L0NlcnRpZmljYXRlQ2hhaW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDcnlwdG9JbmZvcm1hdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0SWQgVk9SZWZlcmVuY2U9IlItNUNGMTZBRENCMTdERjBDOTc1RUFCREYyMzlFQzg5NDc2MjA5REExQzlBN0E4NjBFNzlFNkYzQURCMUQwRERFRCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFsZ29yaXRobT5odHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNyc2Etc2hhMjU2PC9BbGdvcml0aG0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VjdXJlQWxnb3JpdGhtPnRydWU8L1NlY3VyZUFsZ29yaXRobT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxOb3RBZnRlcj4yMDI4LTEyLTMxVDIzOjAwOjAwWjwvTm90QWZ0ZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ3J5cHRvSW5mb3JtYXRpb24+CiAgICAgICAgICAgICAgICAgICAgPC9Bc3NvY2lhdGVkVmFsaWRhdGlvblJlcG9ydERhdGE+CiAgICAgICAgICAgICAgICA8L1NpZ25hdHVyZVZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgIDwvVmFsaWRhdGlvblJlcG9ydD4KICAgICAgICA8L1ZhbGlkYXRpb25PYmplY3Q+CiAgICAgICAgPFZhbGlkYXRpb25PYmplY3QgaWQ9IlItRTExNTQ1M0Y4Mjc5MkZEMEZFMzA5NzZCRkUyNjk2QjRFRTY1MkIzNkREOTZDMjVCODRBN0M0NTJCN0VGMTM2QiI+CiAgICAgICAgICAgIDxPYmplY3RUeXBlPnVybjpldHNpOjAxOTEwMjp2YWxpZGF0aW9uT2JqZWN0Ok9DU1BSZXNwb25zZTwvT2JqZWN0VHlwZT4KICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3RSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgICAgIDxEaWdlc3RBbGdBbmRWYWx1ZT4KICAgICAgICAgICAgICAgICAgICA8bnMyOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiIvPgogICAgICAgICAgICAgICAgICAgIDxuczI6RGlnZXN0VmFsdWU+NFJWRlA0SjVMOUQrTUpkci9pYVd0TzVsS3piZGxzSmJoS2ZFVXJmdkUycz08L25zMjpEaWdlc3RWYWx1ZT4KICAgICAgICAgICAgICAgIDwvRGlnZXN0QWxnQW5kVmFsdWU+CiAgICAgICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdFJlcHJlc2VudGF0aW9uPgogICAgICAgICAgICA8UE9FPgogICAgICAgICAgICAgICAgPFBPRVRpbWU+MjAyNC0wOC0yNlQwOTozMDo1MFo8L1BPRVRpbWU+CiAgICAgICAgICAgICAgICA8VHlwZU9mUHJvb2Y+dXJuOmV0c2k6MDE5MTAyOnBvZXR5cGU6dmFsaWRhdGlvbjwvVHlwZU9mUHJvb2Y+CiAgICAgICAgICAgIDwvUE9FPgogICAgICAgICAgICA8VmFsaWRhdGlvblJlcG9ydD4KICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludHNFdmFsdWF0aW9uUmVwb3J0PgogICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj51cm46Y2VmOmRzczpiYmI6Zm9ybWF0Q2hlY2tpbmc8L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmRpc2FibGVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj51cm46Y2VmOmRzczpiYmI6aWRlbnRpZmljYXRpb25PZlRoZVNpZ25pbmdDZXJ0aWZpY2F0ZTwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdGF0dXM+dXJuOmV0c2k6MDE5MTAyOmNvbnN0cmFpbnRTdGF0dXM6YXBwbGllZDwvU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8L0NvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPE1haW5JbmRpY2F0aW9uPnVybjpldHNpOjAxOTEwMjptYWluaW5kaWNhdGlvbjpwYXNzZWQ8L01haW5JbmRpY2F0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+dXJuOmNlZjpkc3M6YmJiOnZhbGlkYXRpb25Db250ZXh0SW5pdGlhbGl6YXRpb248L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmRpc2FibGVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj51cm46Y2VmOmRzczpiYmI6Y3J5cHRvZ3JhcGhpY1ZlcmlmaWNhdGlvbjwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdGF0dXM+dXJuOmV0c2k6MDE5MTAyOmNvbnN0cmFpbnRTdGF0dXM6YXBwbGllZDwvU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8L0NvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPE1haW5JbmRpY2F0aW9uPnVybjpldHNpOjAxOTEwMjptYWluaW5kaWNhdGlvbjpwYXNzZWQ8L01haW5JbmRpY2F0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+dXJuOmNlZjpkc3M6YmJiOnNpZ25hdHVyZUFjY2VwdGFuY2VWYWxpZGF0aW9uPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czphcHBsaWVkPC9TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TWFpbkluZGljYXRpb24+dXJuOmV0c2k6MDE5MTAyOm1haW5pbmRpY2F0aW9uOnBhc3NlZDwvTWFpbkluZGljYXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj51cm46Y2VmOmRzczpiYmI6eDUwOUNlcnRpZmljYXRlVmFsaWRhdGlvbjwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdGF0dXM+dXJuOmV0c2k6MDE5MTAyOmNvbnN0cmFpbnRTdGF0dXM6YXBwbGllZDwvU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8L0NvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPE1haW5JbmRpY2F0aW9uPnVybjpldHNpOjAxOTEwMjptYWluaW5kaWNhdGlvbjpwYXNzZWQ8L01haW5JbmRpY2F0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnRzRXZhbHVhdGlvblJlcG9ydD4KICAgICAgICAgICAgICAgIDxTaWduZXJJbmZvcm1hdGlvbj4KICAgICAgICAgICAgICAgICAgICA8U2lnbmVyQ2VydGlmaWNhdGUgVk9SZWZlcmVuY2U9IkMtQkRBMzgwOERGNzZBOUJCOUExMTA5RUNFODgwNkFBQUE3NkRBNzlENDBBMTRDNDUwMDhDQTAzOTQ2RTM2OTk1QiIvPgogICAgICAgICAgICAgICAgICAgIDxTaWduZXI+QmVsZ2l1bSBPQ1NQIFJlc3BvbmRlcjwvU2lnbmVyPgogICAgICAgICAgICAgICAgPC9TaWduZXJJbmZvcm1hdGlvbj4KICAgICAgICAgICAgICAgIDxTaWduYXR1cmVWYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDxNYWluSW5kaWNhdGlvbj51cm46ZXRzaTowMTkxMDI6bWFpbmluZGljYXRpb246cGFzc2VkPC9NYWluSW5kaWNhdGlvbj4KICAgICAgICAgICAgICAgICAgICA8QXNzb2NpYXRlZFZhbGlkYXRpb25SZXBvcnREYXRhPgogICAgICAgICAgICAgICAgICAgICAgICA8VHJ1c3RBbmNob3IgVk9SZWZlcmVuY2U9IkMtQThEMTRFOTQ1RTNFNTE1NkJDQUU1RTM5NzM3Q0Y2QTFCMUY1MTAyOEJCQkY5ODJGNTBDRTVGNEMwNTU2OEI0RCIvPgogICAgICAgICAgICAgICAgICAgICAgICA8Q2VydGlmaWNhdGVDaGFpbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTaWduaW5nQ2VydGlmaWNhdGUgVk9SZWZlcmVuY2U9IkMtQkRBMzgwOERGNzZBOUJCOUExMTA5RUNFODgwNkFBQUE3NkRBNzlENDBBMTRDNDUwMDhDQTAzOTQ2RTM2OTk1QiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPEludGVybWVkaWF0ZUNlcnRpZmljYXRlIFZPUmVmZXJlbmNlPSJDLTRBMEUwRjMwRkEyRDE4ODY5MEY5Qzc1MjUzQTAxNzE5NUYyMTYzRTQ1QzA5MENGNUQyQjczQzYyQzQ0OUE3ODIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUcnVzdEFuY2hvciBWT1JlZmVyZW5jZT0iQy1BOEQxNEU5NDVFM0U1MTU2QkNBRTVFMzk3MzdDRjZBMUIxRjUxMDI4QkJCRjk4MkY1MENFNUY0QzA1NTY4QjREIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ2VydGlmaWNhdGVDaGFpbj4KICAgICAgICAgICAgICAgICAgICAgICAgPENyeXB0b0luZm9ybWF0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3RJZCBWT1JlZmVyZW5jZT0iUi1FMTE1NDUzRjgyNzkyRkQwRkUzMDk3NkJGRTI2OTZCNEVFNjUyQjM2REQ5NkMyNUI4NEE3QzQ1MkI3RUYxMzZCIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QWxnb3JpdGhtPmh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZHNpZy1tb3JlI3JzYS1zaGEyNTY8L0FsZ29yaXRobT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZWN1cmVBbGdvcml0aG0+dHJ1ZTwvU2VjdXJlQWxnb3JpdGhtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5vdEFmdGVyPjIwMjUtMTItMzFUMjM6MDA6MDBaPC9Ob3RBZnRlcj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9DcnlwdG9JbmZvcm1hdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L0Fzc29jaWF0ZWRWYWxpZGF0aW9uUmVwb3J0RGF0YT4KICAgICAgICAgICAgICAgIDwvU2lnbmF0dXJlVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgPC9WYWxpZGF0aW9uUmVwb3J0PgogICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdD4KICAgICAgICA8VmFsaWRhdGlvbk9iamVjdCBpZD0iUi1FMTkzOUEzMUFGODcyRUQxQTVGRUFDRjhEMURFNUIzQzlCM0NGREE2NEY1QjVCRDMwNUU5OEE2NDg4ODIwRjEzIj4KICAgICAgICAgICAgPE9iamVjdFR5cGU+dXJuOmV0c2k6MDE5MTAyOnZhbGlkYXRpb25PYmplY3Q6T0NTUFJlc3BvbnNlPC9PYmplY3RUeXBlPgogICAgICAgICAgICA8VmFsaWRhdGlvbk9iamVjdFJlcHJlc2VudGF0aW9uPgogICAgICAgICAgICAgICAgPERpZ2VzdEFsZ0FuZFZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxuczI6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8+CiAgICAgICAgICAgICAgICAgICAgPG5zMjpEaWdlc3RWYWx1ZT40Wk9hTWErSEx0R2wvcXo0MGQ1YlBKczgvYVpQVzF2VEJlbUtaSWlDRHhNPTwvbnMyOkRpZ2VzdFZhbHVlPgogICAgICAgICAgICAgICAgPC9EaWdlc3RBbGdBbmRWYWx1ZT4KICAgICAgICAgICAgPC9WYWxpZGF0aW9uT2JqZWN0UmVwcmVzZW50YXRpb24+CiAgICAgICAgICAgIDxQT0U+CiAgICAgICAgICAgICAgICA8UE9FVGltZT4yMDI0LTA1LTE3VDE0OjExOjEyWjwvUE9FVGltZT4KICAgICAgICAgICAgICAgIDxUeXBlT2ZQcm9vZj51cm46ZXRzaTowMTkxMDI6cG9ldHlwZTp2YWxpZGF0aW9uPC9UeXBlT2ZQcm9vZj4KICAgICAgICAgICAgICAgIDxQT0VPYmplY3QgVk9SZWZlcmVuY2U9IlQtRDUyRTc4NkUyMTVENTJERjQ1NzAzQjkxMzZFMTM4MUFGN0EyMjVDQzFFRjE0RjYyRjFGRjg4MDcxRUI1NTJCNCIvPgogICAgICAgICAgICA8L1BPRT4KICAgICAgICAgICAgPFZhbGlkYXRpb25SZXBvcnQ+CiAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRzRXZhbHVhdGlvblJlcG9ydD4KICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+dXJuOmNlZjpkc3M6YmJiOmZvcm1hdENoZWNraW5nPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czpkaXNhYmxlZDwvU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8L0NvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+dXJuOmNlZjpkc3M6YmJiOmlkZW50aWZpY2F0aW9uT2ZUaGVTaWduaW5nQ2VydGlmaWNhdGU8L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmFwcGxpZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNYWluSW5kaWNhdGlvbj51cm46ZXRzaTowMTkxMDI6bWFpbmluZGljYXRpb246cGFzc2VkPC9NYWluSW5kaWNhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjp2YWxpZGF0aW9uQ29udGV4dEluaXRpYWxpemF0aW9uPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czpkaXNhYmxlZDwvU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8L0NvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+dXJuOmNlZjpkc3M6YmJiOmNyeXB0b2dyYXBoaWNWZXJpZmljYXRpb248L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmFwcGxpZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNYWluSW5kaWNhdGlvbj51cm46ZXRzaTowMTkxMDI6bWFpbmluZGljYXRpb246cGFzc2VkPC9NYWluSW5kaWNhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjpzaWduYXR1cmVBY2NlcHRhbmNlVmFsaWRhdGlvbjwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdGF0dXM+dXJuOmV0c2k6MDE5MTAyOmNvbnN0cmFpbnRTdGF0dXM6YXBwbGllZDwvU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8L0NvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPE1haW5JbmRpY2F0aW9uPnVybjpldHNpOjAxOTEwMjptYWluaW5kaWNhdGlvbjpwYXNzZWQ8L01haW5JbmRpY2F0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+dXJuOmNlZjpkc3M6YmJiOng1MDlDZXJ0aWZpY2F0ZVZhbGlkYXRpb248L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmFwcGxpZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNYWluSW5kaWNhdGlvbj51cm46ZXRzaTowMTkxMDI6bWFpbmluZGljYXRpb246cGFzc2VkPC9NYWluSW5kaWNhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50c0V2YWx1YXRpb25SZXBvcnQ+CiAgICAgICAgICAgICAgICA8U2lnbmVySW5mb3JtYXRpb24+CiAgICAgICAgICAgICAgICAgICAgPFNpZ25lckNlcnRpZmljYXRlIFZPUmVmZXJlbmNlPSJDLTEwNzI2RjkwNEQ2RTUzNEUxNjFGODUyRTk1MEM4RjkyNjVFODEyNUI3ODIxOUEzMTg2MDFBMTQ4RjEwOTYwNDQiLz4KICAgICAgICAgICAgICAgICAgICA8U2lnbmVyPkJSQ0E2IE9DU1AgUmVzcG9uZGVyPC9TaWduZXI+CiAgICAgICAgICAgICAgICA8L1NpZ25lckluZm9ybWF0aW9uPgogICAgICAgICAgICAgICAgPFNpZ25hdHVyZVZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPE1haW5JbmRpY2F0aW9uPnVybjpldHNpOjAxOTEwMjptYWluaW5kaWNhdGlvbjpwYXNzZWQ8L01haW5JbmRpY2F0aW9uPgogICAgICAgICAgICAgICAgICAgIDxBc3NvY2lhdGVkVmFsaWRhdGlvblJlcG9ydERhdGE+CiAgICAgICAgICAgICAgICAgICAgICAgIDxUcnVzdEFuY2hvciBWT1JlZmVyZW5jZT0iQy05Qzg3MkJDOTc5QTdDMDlBNThENEEyNzRDMTk5RTVDQjE2Q0ZBOUI5NjE4RDk4QkM5QTk5ODhFOTg0Qjg0OTVDIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDZXJ0aWZpY2F0ZUNoYWluPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNpZ25pbmdDZXJ0aWZpY2F0ZSBWT1JlZmVyZW5jZT0iQy0xMDcyNkY5MDRENkU1MzRFMTYxRjg1MkU5NTBDOEY5MjY1RTgxMjVCNzgyMTlBMzE4NjAxQTE0OEYxMDk2MDQ0Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHJ1c3RBbmNob3IgVk9SZWZlcmVuY2U9IkMtOUM4NzJCQzk3OUE3QzA5QTU4RDRBMjc0QzE5OUU1Q0IxNkNGQTlCOTYxOEQ5OEJDOUE5OTg4RTk4NEI4NDk1QyIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L0NlcnRpZmljYXRlQ2hhaW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDcnlwdG9JbmZvcm1hdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0SWQgVk9SZWZlcmVuY2U9IlItRTE5MzlBMzFBRjg3MkVEMUE1RkVBQ0Y4RDFERTVCM0M5QjNDRkRBNjRGNUI1QkQzMDVFOThBNjQ4ODgyMEYxMyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFsZ29yaXRobT5odHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNlY2RzYS1zaGEyNTY8L0FsZ29yaXRobT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZWN1cmVBbGdvcml0aG0+dHJ1ZTwvU2VjdXJlQWxnb3JpdGhtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5vdEFmdGVyPjIwMjgtMTItMzFUMjM6MDA6MDBaPC9Ob3RBZnRlcj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9DcnlwdG9JbmZvcm1hdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L0Fzc29jaWF0ZWRWYWxpZGF0aW9uUmVwb3J0RGF0YT4KICAgICAgICAgICAgICAgIDwvU2lnbmF0dXJlVmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgPC9WYWxpZGF0aW9uUmVwb3J0PgogICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdD4KICAgICAgICA8VmFsaWRhdGlvbk9iamVjdCBpZD0iUi05MDhGMkIxOTFEOTYzQzU1OTFEQ0QwNDBDNTI4RjlDOEYyNjQ1NjY2M0ZGNzIwRjk5QkUwRUI5ODA0RURGNTlEIj4KICAgICAgICAgICAgPE9iamVjdFR5cGU+dXJuOmV0c2k6MDE5MTAyOnZhbGlkYXRpb25PYmplY3Q6T0NTUFJlc3BvbnNlPC9PYmplY3RUeXBlPgogICAgICAgICAgICA8VmFsaWRhdGlvbk9iamVjdFJlcHJlc2VudGF0aW9uPgogICAgICAgICAgICAgICAgPERpZ2VzdEFsZ0FuZFZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxuczI6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8+CiAgICAgICAgICAgICAgICAgICAgPG5zMjpEaWdlc3RWYWx1ZT5rSThyR1IyV1BGV1IzTkJBeFNqNXlQSmtWbVkvOXlENW0rRHJtQVR0OVowPTwvbnMyOkRpZ2VzdFZhbHVlPgogICAgICAgICAgICAgICAgPC9EaWdlc3RBbGdBbmRWYWx1ZT4KICAgICAgICAgICAgPC9WYWxpZGF0aW9uT2JqZWN0UmVwcmVzZW50YXRpb24+CiAgICAgICAgICAgIDxQT0U+CiAgICAgICAgICAgICAgICA8UE9FVGltZT4yMDIzLTA0LTE4VDA2OjI3OjAzWjwvUE9FVGltZT4KICAgICAgICAgICAgICAgIDxUeXBlT2ZQcm9vZj51cm46ZXRzaTowMTkxMDI6cG9ldHlwZTp2YWxpZGF0aW9uPC9UeXBlT2ZQcm9vZj4KICAgICAgICAgICAgICAgIDxQT0VPYmplY3QgVk9SZWZlcmVuY2U9IlQtOUFEN0Y1QUI1RTU2ODYxOTU5MkNFRThBRjQ2NkU4NkE0Qzc5NkY2RTIzODg1NUJFMjkwNEM5NTM2MDY3Q0E0MSIvPgogICAgICAgICAgICA8L1BPRT4KICAgICAgICAgICAgPFZhbGlkYXRpb25SZXBvcnQ+CiAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRzRXZhbHVhdGlvblJlcG9ydD4KICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+dXJuOmNlZjpkc3M6YmJiOmZvcm1hdENoZWNraW5nPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czpkaXNhYmxlZDwvU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8L0NvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+dXJuOmNlZjpkc3M6YmJiOmlkZW50aWZpY2F0aW9uT2ZUaGVTaWduaW5nQ2VydGlmaWNhdGU8L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmFwcGxpZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNYWluSW5kaWNhdGlvbj51cm46ZXRzaTowMTkxMDI6bWFpbmluZGljYXRpb246cGFzc2VkPC9NYWluSW5kaWNhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjp2YWxpZGF0aW9uQ29udGV4dEluaXRpYWxpemF0aW9uPC9WYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDb25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1cz51cm46ZXRzaTowMTkxMDI6Y29uc3RyYWludFN0YXR1czpkaXNhYmxlZDwvU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8L0NvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+dXJuOmNlZjpkc3M6YmJiOmNyeXB0b2dyYXBoaWNWZXJpZmljYXRpb248L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmFwcGxpZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNYWluSW5kaWNhdGlvbj51cm46ZXRzaTowMTkxMDI6bWFpbmluZGljYXRpb246cGFzc2VkPC9NYWluSW5kaWNhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgPFZhbGlkYXRpb25Db25zdHJhaW50PgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPnVybjpjZWY6ZHNzOmJiYjpzaWduYXR1cmVBY2NlcHRhbmNlVmFsaWRhdGlvbjwvVmFsaWRhdGlvbkNvbnN0cmFpbnRJZGVudGlmaWVyPgogICAgICAgICAgICAgICAgICAgICAgICA8Q29uc3RyYWludFN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdGF0dXM+dXJuOmV0c2k6MDE5MTAyOmNvbnN0cmFpbnRTdGF0dXM6YXBwbGllZDwvU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8L0NvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPE1haW5JbmRpY2F0aW9uPnVybjpldHNpOjAxOTEwMjptYWluaW5kaWNhdGlvbjpwYXNzZWQ8L01haW5JbmRpY2F0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uQ29uc3RyYWludD4KICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uQ29uc3RyYWludElkZW50aWZpZXI+dXJuOmNlZjpkc3M6YmJiOng1MDlDZXJ0aWZpY2F0ZVZhbGlkYXRpb248L1ZhbGlkYXRpb25Db25zdHJhaW50SWRlbnRpZmllcj4KICAgICAgICAgICAgICAgICAgICAgICAgPENvbnN0cmFpbnRTdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3RhdHVzPnVybjpldHNpOjAxOTEwMjpjb25zdHJhaW50U3RhdHVzOmFwcGxpZWQ8L1N0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Db25zdHJhaW50U3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8VmFsaWRhdGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNYWluSW5kaWNhdGlvbj51cm46ZXRzaTowMTkxMDI6bWFpbmluZGljYXRpb246cGFzc2VkPC9NYWluSW5kaWNhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9WYWxpZGF0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgIDwvVmFsaWRhdGlvbkNvbnN0cmFpbnQ+CiAgICAgICAgICAgICAgICA8L1ZhbGlkYXRpb25Db25zdHJhaW50c0V2YWx1YXRpb25SZXBvcnQ+CiAgICAgICAgICAgICAgICA8U2lnbmVySW5mb3JtYXRpb24+CiAgICAgICAgICAgICAgICAgICAgPFNpZ25lckNlcnRpZmljYXRlIFZPUmVmZXJlbmNlPSJDLTlCODI3OTA0RjREQkEwQ0MyNjU2RkRGMDU0OTgyODYzNzEzRDZFQjEwNTYxMkU5OEU2REExQTFDRUU1NTIyNkIiLz4KICAgICAgICAgICAgICAgICAgICA8U2lnbmVyPk9DU1AgQ2VydGlnbmEgRW50aXR5IENBPC9TaWduZXI+CiAgICAgICAgICAgICAgICA8L1NpZ25lckluZm9ybWF0aW9uPgogICAgICAgICAgICAgICAgPFNpZ25hdHVyZVZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgPE1haW5JbmRpY2F0aW9uPnVybjpldHNpOjAxOTEwMjptYWluaW5kaWNhdGlvbjpwYXNzZWQ8L01haW5JbmRpY2F0aW9uPgogICAgICAgICAgICAgICAgICAgIDxBc3NvY2lhdGVkVmFsaWRhdGlvblJlcG9ydERhdGE+CiAgICAgICAgICAgICAgICAgICAgICAgIDxUcnVzdEFuY2hvciBWT1JlZmVyZW5jZT0iQy0xQ0MzNThBNkRGQTBBNzZCQjU0NzA2NjBENzhGM0IyNUYyM0NDRDYzOTU2NjdFNDlDQ0ZDODIwMURBM0QxOTJEIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDZXJ0aWZpY2F0ZUNoYWluPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNpZ25pbmdDZXJ0aWZpY2F0ZSBWT1JlZmVyZW5jZT0iQy05QjgyNzkwNEY0REJBMENDMjY1NkZERjA1NDk4Mjg2MzcxM0Q2RUIxMDU2MTJFOThFNkRBMUExQ0VFNTUyMjZCIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHJ1c3RBbmNob3IgVk9SZWZlcmVuY2U9IkMtMUNDMzU4QTZERkEwQTc2QkI1NDcwNjYwRDc4RjNCMjVGMjNDQ0Q2Mzk1NjY3RTQ5Q0NGQzgyMDFEQTNEMTkyRCIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L0NlcnRpZmljYXRlQ2hhaW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxDcnlwdG9JbmZvcm1hdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0SWQgVk9SZWZlcmVuY2U9IlItOTA4RjJCMTkxRDk2M0M1NTkxRENEMDQwQzUyOEY5QzhGMjY0NTY2NjNGRjcyMEY5OUJFMEVCOTgwNEVERjU5RCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFsZ29yaXRobT5odHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNyc2Etc2hhMjU2PC9BbGdvcml0aG0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VjdXJlQWxnb3JpdGhtPnRydWU8L1NlY3VyZUFsZ29yaXRobT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxOb3RBZnRlcj4yMDI1LTEyLTMxVDIzOjAwOjAwWjwvTm90QWZ0ZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ3J5cHRvSW5mb3JtYXRpb24+CiAgICAgICAgICAgICAgICAgICAgPC9Bc3NvY2lhdGVkVmFsaWRhdGlvblJlcG9ydERhdGE+CiAgICAgICAgICAgICAgICA8L1NpZ25hdHVyZVZhbGlkYXRpb25TdGF0dXM+CiAgICAgICAgICAgIDwvVmFsaWRhdGlvblJlcG9ydD4KICAgICAgICA8L1ZhbGlkYXRpb25PYmplY3Q+CiAgICAgICAgPFZhbGlkYXRpb25PYmplY3QgaWQ9IlItMTFFNjU0RTE0RjVCREYwRjg3NTc0RDJBNDk4MTk3OTMxNjUyMTZEMjkxNjRGOTYwMENCNEMxODI3NURFNDg1QiI+CiAgICAgICAgICAgIDxPYmplY3RUeXBlPnVybjpldHNpOjAxOTEwMjp2YWxpZGF0aW9uT2JqZWN0Ok9DU1BSZXNwb25zZTwvT2JqZWN0VHlwZT4KICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3RSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgICAgIDxEaWdlc3RBbGdBbmRWYWx1ZT4KICAgICAgICAgICAgICAgICAgICA8bnMyOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiIvPgogICAgICAgICAgICAgICAgICAgIDxuczI6RGlnZXN0VmFsdWU+RWVaVTRVOWIzdytIVjAwcVNZR1hreFpTRnRLUlpQbGdETFRCZ25YZVNGcz08L25zMjpEaWdlc3RWYWx1ZT4KICAgICAgICAgICAgICAgIDwvRGlnZXN0QWxnQW5kVmFsdWU+CiAgICAgICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdFJlcHJlc2VudGF0aW9uPgogICAgICAgICAgICA8UE9FPgogICAgICAgICAgICAgICAgPFBPRVRpbWU+MjAyNC0wOC0yNlQwOTozMDo1MFo8L1BPRVRpbWU+CiAgICAgICAgICAgICAgICA8VHlwZU9mUHJvb2Y+dXJuOmV0c2k6MDE5MTAyOnBvZXR5cGU6dmFsaWRhdGlvbjwvVHlwZU9mUHJvb2Y+CiAgICAgICAgICAgIDwvUE9FPgogICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdD4KICAgICAgICA8VmFsaWRhdGlvbk9iamVjdCBpZD0iRC1CQkE0ODU1NEJDRDRDOUJEMEM1RTQwREVCRjQ3N0M5NURBQTM3RTZDMjk1MTZFQTlFN0Y1QTRCQTVENEIxODM0Ij4KICAgICAgICAgICAgPE9iamVjdFR5cGU+dXJuOmV0c2k6MDE5MTAyOnZhbGlkYXRpb25PYmplY3Q6c2lnbmVkRGF0YTwvT2JqZWN0VHlwZT4KICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3RSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgICAgIDxEaWdlc3RBbGdBbmRWYWx1ZT4KICAgICAgICAgICAgICAgICAgICA8bnMyOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiIvPgogICAgICAgICAgICAgICAgICAgIDxuczI6RGlnZXN0VmFsdWU+RHZxSDJueHF0TkQ3elFwMlozRklWczFPdC96UCt2MmppNlNiUlQ0MXNmUT08L25zMjpEaWdlc3RWYWx1ZT4KICAgICAgICAgICAgICAgIDwvRGlnZXN0QWxnQW5kVmFsdWU+CiAgICAgICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdFJlcHJlc2VudGF0aW9uPgogICAgICAgICAgICA8UE9FPgogICAgICAgICAgICAgICAgPFBPRVRpbWU+MjAyMy0wNC0xOFQwNjoyNzowMlo8L1BPRVRpbWU+CiAgICAgICAgICAgICAgICA8VHlwZU9mUHJvb2Y+dXJuOmV0c2k6MDE5MTAyOnBvZXR5cGU6dmFsaWRhdGlvbjwvVHlwZU9mUHJvb2Y+CiAgICAgICAgICAgICAgICA8UE9FT2JqZWN0IFZPUmVmZXJlbmNlPSJULTU5ODcyNjg0RjhBRjI4RUUwNkQyRjFFMEE2RDk5MzlFMzQ3QjdGOTAyOUQxNjNBREJCRjBGMjEzREVDREEwNDYiLz4KICAgICAgICAgICAgPC9QT0U+CiAgICAgICAgPC9WYWxpZGF0aW9uT2JqZWN0PgogICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0IGlkPSJELTlDMDkwNzAzNzczQ0RBNzlDNDRFMkI1RDM5QjRGRENDRUQzRjM2QzAzNEMxRjRERDZDQzYzMkEzQUEwRTE1QTMiPgogICAgICAgICAgICA8T2JqZWN0VHlwZT51cm46ZXRzaTowMTkxMDI6dmFsaWRhdGlvbk9iamVjdDpzaWduZWREYXRhPC9PYmplY3RUeXBlPgogICAgICAgICAgICA8VmFsaWRhdGlvbk9iamVjdFJlcHJlc2VudGF0aW9uPgogICAgICAgICAgICAgICAgPERpZ2VzdEFsZ0FuZFZhbHVlPgogICAgICAgICAgICAgICAgICAgIDxuczI6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8+CiAgICAgICAgICAgICAgICAgICAgPG5zMjpEaWdlc3RWYWx1ZT41WHhIQWVKbURzSzh0elhpMkllQzJVVGFUN3VCd2JYdWtWay9kMXoxN0hvPTwvbnMyOkRpZ2VzdFZhbHVlPgogICAgICAgICAgICAgICAgPC9EaWdlc3RBbGdBbmRWYWx1ZT4KICAgICAgICAgICAgPC9WYWxpZGF0aW9uT2JqZWN0UmVwcmVzZW50YXRpb24+CiAgICAgICAgICAgIDxQT0U+CiAgICAgICAgICAgICAgICA8UE9FVGltZT4yMDI0LTA1LTE3VDE0OjExOjExWjwvUE9FVGltZT4KICAgICAgICAgICAgICAgIDxUeXBlT2ZQcm9vZj51cm46ZXRzaTowMTkxMDI6cG9ldHlwZTp2YWxpZGF0aW9uPC9UeXBlT2ZQcm9vZj4KICAgICAgICAgICAgICAgIDxQT0VPYmplY3QgVk9SZWZlcmVuY2U9IlQtMUNCQUY4QTBDRkRBMjdGQzU5RjA3NDkzRjIwOTg0RkU2MEMyOTZFMDdGNkVENkFDMkI0RDY5QkQzRTdEQkIxRCIvPgogICAgICAgICAgICA8L1BPRT4KICAgICAgICA8L1ZhbGlkYXRpb25PYmplY3Q+CiAgICAgICAgPFZhbGlkYXRpb25PYmplY3QgaWQ9IkQtQkZBRTg1NTA4NEI4RTM2N0NBNkRBNEJDMEIzM0FCRkNDNjA1MDE0MUZGNkFDMEEzRDgzNDNDQzEyNkE1M0YxMyI+CiAgICAgICAgICAgIDxPYmplY3RUeXBlPnVybjpldHNpOjAxOTEwMjp2YWxpZGF0aW9uT2JqZWN0OnNpZ25lZERhdGE8L09iamVjdFR5cGU+CiAgICAgICAgICAgIDxWYWxpZGF0aW9uT2JqZWN0UmVwcmVzZW50YXRpb24+CiAgICAgICAgICAgICAgICA8RGlnZXN0QWxnQW5kVmFsdWU+CiAgICAgICAgICAgICAgICAgICAgPG5zMjpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNzaGEyNTYiLz4KICAgICAgICAgICAgICAgICAgICA8bnMyOkRpZ2VzdFZhbHVlPlJsZTY3cURIdHVWNW51T1pOUnhiZG1lbGNsUlZWM2NhVlNRa3VSSElmOEE9PC9uczI6RGlnZXN0VmFsdWU+CiAgICAgICAgICAgICAgICA8L0RpZ2VzdEFsZ0FuZFZhbHVlPgogICAgICAgICAgICA8L1ZhbGlkYXRpb25PYmplY3RSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgPFBPRT4KICAgICAgICAgICAgICAgIDxQT0VUaW1lPjIwMjQtMDUtMTdUMTQ6MTE6MTJaPC9QT0VUaW1lPgogICAgICAgICAgICAgICAgPFR5cGVPZlByb29mPnVybjpldHNpOjAxOTEwMjpwb2V0eXBlOnZhbGlkYXRpb248L1R5cGVPZlByb29mPgogICAgICAgICAgICAgICAgPFBPRU9iamVjdCBWT1JlZmVyZW5jZT0iVC1ENTJFNzg2RTIxNUQ1MkRGNDU3MDNCOTEzNkUxMzgxQUY3QTIyNUNDMUVGMTRGNjJGMUZGODgwNzFFQjU1MkI0Ii8+CiAgICAgICAgICAgIDwvUE9FPgogICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdD4KICAgICAgICA8VmFsaWRhdGlvbk9iamVjdCBpZD0iRC1CMzlFMzkwQjIyNkVENDMyQjhEQkZGRUM2OTdFRERGREQ4NTg1NTYyNUE2QjZEOTBGRkJEMjk0QjI1QjMwRDI2Ij4KICAgICAgICAgICAgPE9iamVjdFR5cGU+dXJuOmV0c2k6MDE5MTAyOnZhbGlkYXRpb25PYmplY3Q6c2lnbmVkRGF0YTwvT2JqZWN0VHlwZT4KICAgICAgICAgICAgPFZhbGlkYXRpb25PYmplY3RSZXByZXNlbnRhdGlvbj4KICAgICAgICAgICAgICAgIDxEaWdlc3RBbGdBbmRWYWx1ZT4KICAgICAgICAgICAgICAgICAgICA8bnMyOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMDQveG1sZW5jI3NoYTI1NiIvPgogICAgICAgICAgICAgICAgICAgIDxuczI6RGlnZXN0VmFsdWU+aUdoSFZTcS9GUjhMcmtUZDZuWlprcFdZcjdsSVFUMG9SNWZBczlNNk5Rdz08L25zMjpEaWdlc3RWYWx1ZT4KICAgICAgICAgICAgICAgIDwvRGlnZXN0QWxnQW5kVmFsdWU+CiAgICAgICAgICAgIDwvVmFsaWRhdGlvbk9iamVjdFJlcHJlc2VudGF0aW9uPgogICAgICAgICAgICA8UE9FPgogICAgICAgICAgICAgICAgPFBPRVRpbWU+MjAyMy0wNC0xOFQwNjoyNzowM1o8L1BPRVRpbWU+CiAgICAgICAgICAgICAgICA8VHlwZU9mUHJvb2Y+dXJuOmV0c2k6MDE5MTAyOnBvZXR5cGU6dmFsaWRhdGlvbjwvVHlwZU9mUHJvb2Y+CiAgICAgICAgICAgICAgICA8UE9FT2JqZWN0IFZPUmVmZXJlbmNlPSJULTlBRDdGNUFCNUU1Njg2MTk1OTJDRUU4QUY0NjZFODZBNEM3OTZGNkUyMzg4NTVCRTI5MDRDOTUzNjA2N0NBNDEiLz4KICAgICAgICAgICAgPC9QT0U+CiAgICAgICAgPC9WYWxpZGF0aW9uT2JqZWN0PgogICAgPC9TaWduYXR1cmVWYWxpZGF0aW9uT2JqZWN0cz4KPC9WYWxpZGF0aW9uUmVwb3J0Pgo=</validationReportDataHandler>
---
>         <validationReportDataHandler></validationReportDataHandler>